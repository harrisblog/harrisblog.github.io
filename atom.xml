<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Harris&#39;s Blog</title>
  
  <subtitle>时不我待，只争朝夕</subtitle>
  <link href="https://blog.harriswong.top/atom.xml" rel="self"/>
  
  <link href="https://blog.harriswong.top/"/>
  <updated>2023-02-25T23:43:00.000Z</updated>
  <id>https://blog.harriswong.top/</id>
  
  <author>
    <name>Harris Wong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一些日常物品的英文名称</title>
    <link href="https://blog.harriswong.top/posts/bf53ce06/"/>
    <id>https://blog.harriswong.top/posts/bf53ce06/</id>
    <published>2023-02-25T23:43:00.000Z</published>
    <updated>2023-02-25T23:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来英国已经半年了，确实如我哥说的那样，你英语最好的时候就是学雅思的时候，言下之意就是不学英语、不用嘴说英语，你雅思学到的口语技巧会慢慢忘记，所以雅思过了不代表你的英语就达标了，还得继续积累。记得有次房屋中介小哥问我有没有 tape measure，我听了两次才听懂是什么东西，真就是我这双耳朵从未听过这个词，但还好当时猜出来了大致意思，还有一次，印度室友跟我聊到了 pressure cooker，我一开始是蒙的，但能够通过 pressure 和 cooker 猜出大致意思——有压力的做饭工具（高压锅），我直接:&quot;Oh! it&#39;s called presure cooker&quot;。实话说，通过和别人对话学英语真的是如我所料地效果低下，半年来也就从对话中学到了这两个例子里的词，其实没有哪个老外有闲工夫陪你练英语、陪你成长，只能说和他们对话是一个检验你英语学习成果的途径，并不是你获得英语知识的主要来源，他们不可能手把手教你念：“Oh! This is apple. That one is banana”，真当他们是再生父母呀？所以这就是为什么我会主动去收集相关英语知识到我的博客里，希望能帮到自己和路过的盆友。</p><p><del>好的我又来水文章了</del>，那么本篇将记录一些我认为生活中用的比较多的常见物品英文表达吧。</p></blockquote><h1 id="家具"><a href="#家具" class="headerlink" title="家具"></a>家具</h1><h2 id="厨房"><a href="#厨房" class="headerlink" title="厨房"></a>厨房</h2><table><thead><tr><th>EN</th><th>中</th></tr></thead><tbody><tr><td>apron</td><td>围裙</td></tr><tr><td>bin<br />rubbish bin</td><td>垃圾桶（英）</td></tr><tr><td>bin bag<br />dustbin bag</td><td>垃圾袋</td></tr><tr><td>blender</td><td>搅拌器、果汁机（美）</td></tr><tr><td>broom</td><td>扫帚</td></tr><tr><td>coffee maker</td><td>咖啡机</td></tr><tr><td>cupboard</td><td>橱柜、碗柜、食橱、壁橱</td></tr><tr><td>dish towel</td><td>洗碗抹布</td></tr><tr><td>food scale</td><td>食品秤</td></tr><tr><td>freezer</td><td>冷冻室、冰冻室（冰箱）</td></tr><tr><td>fridge<br />refrigerator</td><td>冰箱</td></tr><tr><td>frying pan</td><td>煎锅、平底锅</td></tr><tr><td>hair dryer</td><td>吹风机、电吹风</td></tr><tr><td>kettle</td><td>水壶、电烧水壶</td></tr><tr><td>kitchen sink<br />washing-up sink</td><td>洗碗池，简称 sink 也行</td></tr><tr><td>microwave</td><td>微波炉</td></tr><tr><td>oven</td><td>烤箱、烤炉</td></tr><tr><td>peeler</td><td>削皮器</td></tr><tr><td>pressure cooker</td><td>高压锅</td></tr><tr><td>saucepan</td><td>煮锅、炖锅、汤锅、深平底锅</td></tr><tr><td>sponge</td><td>海绵块（洗碗用）</td></tr><tr><td>toaster</td><td>面包机</td></tr><tr><td>trash can<br />garbage can</td><td>垃圾桶（美）</td></tr></tbody></table><h2 id="浴室"><a href="#浴室" class="headerlink" title="浴室"></a>浴室</h2><table><thead><tr><th>EN</th><th>中</th></tr></thead><tbody><tr><td>bath towel<br />shower towel</td><td>洗澡毛巾</td></tr><tr><td>bathtub</td><td>浴缸（美）</td></tr><tr><td>body wash</td><td>沐浴露、沐浴乳</td></tr><tr><td>bucket</td><td>水桶</td></tr><tr><td>laundry basket</td><td>脏衣篓</td></tr><tr><td>laundry detergent</td><td>洗衣液</td></tr><tr><td>mop</td><td>拖把</td></tr><tr><td>toilet paper/roll</td><td>厕纸</td></tr><tr><td>toothbrush</td><td>牙刷</td></tr><tr><td>toothpaste</td><td>牙膏</td></tr><tr><td>shampoo</td><td>洗发液、洗发水、香波</td></tr><tr><td>shower curtain</td><td>浴帘</td></tr><tr><td>shower head</td><td>花洒头</td></tr><tr><td>soap</td><td>肥皂</td></tr><tr><td>wash basin</td><td>洗脸池、洗手池</td></tr><tr><td>washing machine</td><td>洗衣机</td></tr><tr><td>washing powder</td><td>洗衣粉</td></tr></tbody></table><h2 id="房间"><a href="#房间" class="headerlink" title="房间"></a>房间</h2><table><thead><tr><th>EN</th><th>中</th></tr></thead><tbody><tr><td>air conditioner<br />AC</td><td>空调</td></tr><tr><td>bedside table<br />night table</td><td>床头柜</td></tr><tr><td>blanket</td><td>盖的毯子</td></tr><tr><td>bookcase<br />bookshelf</td><td>书柜<br />书架</td></tr><tr><td>carpet</td><td>地毯</td></tr><tr><td>coat rack<br />coat stand</td><td>衣帽架</td></tr><tr><td>curtains</td><td>窗帘</td></tr><tr><td>drawer</td><td>抽屉</td></tr><tr><td>dressing table</td><td>梳妆台</td></tr><tr><td>hanger</td><td>衣架</td></tr><tr><td>light bulb</td><td>灯泡</td></tr><tr><td>mattress</td><td>床垫、褥垫</td></tr><tr><td>pillowcase</td><td>枕套</td></tr><tr><td>quilt<br />duvet</td><td>被子、被褥</td></tr><tr><td>quilt cover<br />duvet cover</td><td>被套</td></tr><tr><td>radiator</td><td>暖气片</td></tr><tr><td>sheet</td><td>床单</td></tr><tr><td>vacuum cleaner</td><td>吸尘器、真空吸尘器</td></tr><tr><td>wardrobe</td><td>衣柜</td></tr></tbody></table><h2 id="餐厅-客厅-阳台"><a href="#餐厅-客厅-阳台" class="headerlink" title="餐厅/客厅/阳台"></a>餐厅/客厅/阳台</h2><table><thead><tr><th>EN</th><th>中</th></tr></thead><tbody><tr><td>door mat</td><td>门垫</td></tr><tr><td>fork</td><td>餐叉、叉子</td></tr><tr><td>tablecloth<br />table cloth</td><td>桌布</td></tr><tr><td>tissues</td><td>纸巾、面巾纸</td></tr><tr><td>napkin</td><td>餐巾纸（吃饭时用的、放在餐具下垫着的）</td></tr><tr><td>vase</td><td>花瓶</td></tr></tbody></table><h1 id="食物"><a href="#食物" class="headerlink" title="食物"></a>食物</h1><h2 id="蔬菜"><a href="#蔬菜" class="headerlink" title="蔬菜"></a>蔬菜</h2><table><thead><tr><th>EN</th><th>中</th></tr></thead><tbody><tr><td>black fungus</td><td>黑木耳</td></tr><tr><td>broccoli</td><td>西兰花</td></tr><tr><td>chilli</td><td>辣椒</td></tr><tr><td>coriander</td><td>香菜</td></tr><tr><td>corn</td><td>玉米</td></tr><tr><td>cucumber</td><td>黄瓜</td></tr><tr><td>eggplant</td><td>茄子</td></tr><tr><td>garlic</td><td>大蒜</td></tr><tr><td>ginger</td><td>生姜</td></tr><tr><td>green onion</td><td>葱、青葱</td></tr><tr><td>green pepper</td><td>青椒</td></tr><tr><td>kelp</td><td>海带</td></tr><tr><td>leek</td><td>韭菜</td></tr><tr><td>lettuce</td><td>莴苣、生菜</td></tr><tr><td>needle mushroom<br />enoki mushroom</td><td>金针菇</td></tr><tr><td>onion</td><td>洋葱</td></tr><tr><td>pepper</td><td>胡椒</td></tr><tr><td>pickled cucumber</td><td>酸黄瓜、腌黄瓜</td></tr><tr><td>pumpkin</td><td>南瓜</td></tr><tr><td>red pepper</td><td>红椒</td></tr><tr><td>yellow pepper</td><td>黄椒</td></tr></tbody></table><h2 id="水果"><a href="#水果" class="headerlink" title="水果"></a>水果</h2><table><thead><tr><th>EN</th><th>中</th></tr></thead><tbody><tr><td>durian</td><td>榴莲</td></tr><tr><td>lychee</td><td>荔枝</td></tr><tr><td>pitaya<br />dragon fruit</td><td>火龙果</td></tr><tr><td>red dates</td><td>红枣</td></tr></tbody></table><h1 id="工具-物件"><a href="#工具-物件" class="headerlink" title="工具/物件"></a>工具/物件</h1><table><thead><tr><th>EN</th><th>中</th></tr></thead><tbody><tr><td>lighter</td><td>打火机</td></tr><tr><td>needle</td><td>针</td></tr><tr><td>scissors</td><td>剪刀</td></tr><tr><td>packaging tape</td><td>包装胶带</td></tr><tr><td>tape messure</td><td>卷尺、皮尺</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;来英国已经半年了，确实如我哥说的那样，你英语最好的时候就是学雅思的时候，言下之意就是不学英语、不用嘴说英语，你雅思学到的口语技巧会慢慢忘记，所以雅思过了不代表你的英语就达标了，还得继续积累。记得有次房屋中介小哥问我有没有 tape measure，</summary>
      
    
    
    
    <category term="🤗干货分享" scheme="https://blog.harriswong.top/categories/%F0%9F%A4%97%E5%B9%B2%E8%B4%A7%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="🔠英语" scheme="https://blog.harriswong.top/tags/%F0%9F%94%A0%E8%8B%B1%E8%AF%AD/"/>
    
    <category term="🔡情景英语" scheme="https://blog.harriswong.top/tags/%F0%9F%94%A1%E6%83%85%E6%99%AF%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>B站UP主Scott的英文演讲记录</title>
    <link href="https://blog.harriswong.top/posts/8531ffd/"/>
    <id>https://blog.harriswong.top/posts/8531ffd/</id>
    <published>2023-02-21T14:28:00.000Z</published>
    <updated>2023-02-21T14:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我为了提高英语能力，用了很多奇奇怪怪的方式，虽然效果提升不太明显，但我乐意哈哈，我不太喜欢循规蹈矩地去学，因为我一旦脱离预设的轨道，我就会一发不可收拾地摆烂。这篇文章“项目”是我心血来潮创建的，主要是记录B站一名叫 <a href="https://space.bilibili.com/508695150">英文演讲爱好者Scott</a> Up主的一些我认为不错的英文演讲视频 Script，待我某天脑子一热的时候，来读读，念叨念叨也挺好。</p><p>Scripts 按发布日期降序排列。对了，这些 Scripts 我有自己修改过，也用 AI 浅浅润色了下，所以整体和原视频的表达方式有些许出入。</p></blockquote><h1 id="What-are-the-three-top-qualities-that-you-look-for-in-a-friend"><a href="#What-are-the-three-top-qualities-that-you-look-for-in-a-friend" class="headerlink" title="What are the three top qualities that you look for in a friend?"></a><a href="https://www.bilibili.com/video/BV1Yb41197o3">What are the three top qualities that you look for in a friend?</a></h1><p>2023-02-23</p><p>To me, there are definitely three qualities that are essential when it comes to making friends. The first one is Gratitude（感恩、感激）, the second one is Responsibility, and the third one is being positive. As the saying goes: &quot;People either inspire you or drain you（耗尽你）, so choose your friends wisely&quot;. You could agree with me about these qualities and think that it&#39;s really important. And another point that I&#39;m gonna share with you is how we identify if our friends possess these three qualities.</p><p>Firstly, being grateful is an important trait（特质） to look for in a friend. You can just observe how they treat their parents. As we all know, parents are the ones we should respect and be grateful for their great efforts, like <u>feeding us for years</u>. So this is one point we can consider. If they don&#39;t treat their parents very well, how would you expect that they would treat you very well? It doesn&#39;t make any sense.</p><p>Secondly, responsibility is another vital quality to consider. You can see how much time your friends spend with their family members, which is really important. If they are responsible, you can trust them, and you can have some corporation to build or run a company or whatever.</p><p>Lastly, being positive is an essential trait for a friend to have. You can observe how your friends talk and what they say. Do they complain all the time? Do they say something really positive, praise someone and appreciate the help they received from others? If they have a positive outlook on life, they are more likely to inspire and uplift you（激励振奋你）.</p><p>With these three qualities,  you are more likely to have inspiring friends rather than draining ones（耗费精力的朋友）. So my friend, please remember that people either inspire you or drain you, choose them wisely.</p><p>And another one is really important. If you really wanna make friends with these three qualities, you&#39;re gotta be the one with these three qualities at first. Because human beings are attracted to people who share similar qualities. So strive to be the one you wanna make friends with. Eventually, you&#39;re gonna make friends like this.</p><h1 id="Should-all-education-at-all-levels-be-free"><a href="#Should-all-education-at-all-levels-be-free" class="headerlink" title="Should all education at all levels be free?"></a><a href="https://www.bilibili.com/video/BV1je4y1c7nE/">Should all education at all levels be free?</a></h1><p>2023-02-18</p><p>This is a really interesting question, so what do you think about that? Well, getting something for free is usually a nice thing for most people. But there is one saying I like the most, which is: &quot;In this world, the most luxurious thing is something that free of charge&quot;. So you can imagine that you can get whatever you want, whatever kinda training resources you want for free. But later on, you may start to realize that it&#39;s just free of charge. I don&#39;t have to take time to learn and I just wanna get it. And maybe most people tend to take that for granted and they won&#39;t take the time to learn that deeply.</p><p>On the other hand, you can see that we have excellent courses that are designed by experts who put a lotta time and effort into creating them. If these courses are just given away for free and the designers don&#39;t get paid, they may lose the motivation to continue creating such excellent courses anymore. So you see that the free of charge leads to a very negative result. That&#39;s why some countries like the United States or some European countries have this kinda copyright law. For example, music and even though some pictures or videos have the copyright. That means if you wanna use that you need to pay for the author because you need to respect their creativity and also the creator needs to get paid for that. This creates a positive cycle and the designer, author or creator would like to do more for that and create excellent courses or masterpieces later on.</p><p>That&#39;s why education works the same way. If we get everything for free, just think about those teachers and course designers, they may lose their passion, and we won&#39;t have excellent courses anymore. So my friend, free of charge is okay, but remember that in this world the most luxurious stuff is free of charge.</p><h1 id="What-do-you-think-about-alcohol-culture-in-China"><a href="#What-do-you-think-about-alcohol-culture-in-China" class="headerlink" title="What do you think about alcohol culture in China?"></a><a href="https://www.bilibili.com/video/BV1JM411q7Yo/">What do you think about alcohol culture in China?</a></h1><p>2023-01-25</p><p>It&#39;s gonna be a really interesting question, especially in China. There are different alcohol cultures in China. I was born in the middle of China and I felt like in my hometown we got a very strong alcohol culture. In my hometown, it&#39;s very common for people to say &quot;bro, let&#39;s bottom it up&quot;, because they believe the more you drink with them, the closer relationship you&#39;ve got. So this is kinda an interesting point. But when I started working in a company, I didn&#39;t drink quite a lot with my colleagues when we have a gathering or parties. So this kinda different culture is really interesting.</p><p>I believe there&#39;s no right or wrong when it comes to alcohol culture. I&#39;m not gonna judge the culture. But the most important thing in my mind is who you&#39;re gonna drink with. Is this the right time? I still remember when I was in college, I once participated in a party, but I was like I don&#39;t know them, I don&#39;t wanna drink with them. You know how some people act when they&#39;re drunk. I personally don&#39;t enjoy that, and sometimes I feel pressured to drink. So I only drank one cup of beer and then I threw it all away. That kinda feeling was really terrible. But I still remember that a couple of weeks ago, I visited my dad, I also bought the rice wine, because I felt like this is the right time. And then I drank a bit with my dad because we seldom have a very deep conversation. You know sometimes, alcohol can help us open up（敞开心扉）and have deeper conversations. After we drank alcohol, we got a very good time as my dad shared what was going on in his life, and I also shared something interesting about work and life.</p><p>So, my friend, there&#39;s nothing wrong or right with alcohol. But the most important thing for us is that we really need to pick up the right person that we&#39;re gonna drink with. And we need to think about whether is it the right time to drink alcohol.</p><h1 id="What-gets-you-excited-about-life"><a href="#What-gets-you-excited-about-life" class="headerlink" title="What gets you excited about life?"></a><a href="https://www.bilibili.com/video/BV1pg411n7c8">What gets you excited about life?</a></h1><p>2022-12-12</p><p>I know it&#39;s gonna be a really hard question to answer. Honestly speaking, I used to be a person who didn&#39;t have this kinda excitement about life, especially when I was working in the company for several years. I was like this is life. It&#39;s just from home to the company and doing something that I don&#39;t really like, but I still need to earn money. And after work, I just wanna enjoy something I really like, for example, watching some TV dramas, searching on the internet and playing computer games. But I gradually found that boring life I cannot change. I lost the passion I used to have. Because when I was in college, I was really into programming skills. As you can see, sometimes when you conquer some challenges or difficulties, that kinda sense of achievement will make you really excited. But I didn&#39;t have this kinda feeling for a long time. I know it&#39;s gonna be a terrible thing if I lose the passion. That&#39;s the reality.</p><p>But after that, I found there was one person in my life, who is also a toastmaster member（英语演讲会成员）. By the first time, I saw him, he was really energetic on the stage. His body language and vocal variety（声调抑扬顿挫）were really amazing. I thought this is the person I really like. Because I saw the passion, the excitement in his life. I still remember the topic of the speech he was delivering is about travelling. He said: &quot;no matter physical or mental, we need to travel and then our body or our spirit can on the way&quot;, which really inspired me. That kinda passion and excitement really influenced my lifestyle. After that, I tried to have a conversation with him, and he said something that really shocked me. You know, he was already at a very top level, he&#39;s a really excellent professional trainer, he got a very satisfying salary and he got a reputation in society, but he&#39;s still hard working on the stage and tried to do something with excitement. He practices yoga, tai chi and plays the guitar and also he&#39;s a very great Kongfu master. I thought I need to be someone full of passion and full excitement like him. He once told me: &quot;There are three circles in our lives, one is something we are good at, the second one is something we need to do, and the third circle is something we can do and will bring value to others, and then we need to make these three circles overlapped. The more they overlapped, the more excitement you will feel in your life&quot;. So at that moment, I&#39;m trying to find the three circles in my life. That&#39;s why I try to practice my speech, especially English public speaking. Because in my company, I also need to use English to communicate with others. This is something I really like, but I cannot say this is something that I&#39;m good at, because I&#39;m still learning. The better my communication skill, the more working opportunities in my career, which can also bring benefits to others, especially sometimes when I have a good idea, if I can convey my message to others with a very constructive structure（建设性的结构）, somebody will definitely get some benefits from my sharing. So this is the fact that I get to find the excitement in my life.</p><p>And later on, I try to join the toastmaster club to practice my public speaking skill. I gradually found that every day is a good day. Because I really cannot wait the next day, there&#39;s gonna be something new in my life. Learning something new can give me this kinda excitement and passion again. So finding excitement and passion in your life is the top priority thing. If you don&#39;t have it, just keep looking until you find your true excitement in your life. And you&#39;ll find your life will be colourful and you&#39;ll never neglect every minute every second of your life.</p><h1 id="What-do-you-think-about-a-happy-childhood-or-high-scores"><a href="#What-do-you-think-about-a-happy-childhood-or-high-scores" class="headerlink" title="What do you think about a happy childhood or high scores?"></a><a href="https://www.bilibili.com/video/BV1XD4y1b7Bw/">What do you think about a happy childhood or high scores?</a></h1><p>2022-10-28 </p><p>I like this question so much. I wanna answer this question based on my perspective. Honestly speaking, when I was a child I didn&#39;t have a happy childhood. Not only was I not a good student in school, but my parents also got divorced, so I didn&#39;t have the chance to see them very often. I had a babysitter（保姆）, so every day, all I needed to do was come back from school, grab something to eat and finish my homework. The only thing that made me happy was playing video games. However, I didn&#39;t consider that I had a very happy childhood at that moment. On the other hand, I hated studying. Believe it or not, I think it was because I was not a good student and I was trying to study hard, but it didn&#39;t work. It seemed like studying was not my thing, so I preferred to chase happiness. When I play video games, I felt like I could focus on something, which gave me a sense of fulfilment（满足感，成就感）. So that was the moment that made me happy, but not a period with long-term happiness.</p><p>Comparing this with my life as an adult got me thinking about what is the key factor to make my life happier. But the answer is happiness doesn&#39;t come from having or doing something you really like. In the adult world, sometimes we cannot choose what we really want. We need to accept what we have, right? Therefore, I think the most important thing for us to have a happier life is that we need to appreciate what we have because how we feel about what we are doing or what we have is more important. If I had a chance to go back to my childhood, I would have studied harder, even though I was not a good student. The most significant thing for me to cherish at that moment was that I had energy which allowed me to remember and learn something quickly. Because when we grow up, our memory will go down, so we cannot remember something very clearly. And I also wanna do something like exercise when I was a child because I know exercising can really bring lotta benefits to me. Compared to studying, I know studying hard is important in the current world, but it isn&#39;t the key thing to determine whether a kid is good or not. So I think that having a good attitude, being positive, and being optimistic are the really key factors for kids to become happy. I understand it&#39;s really challenging in our competitive society. And most parents want their kids can be capable of handling many things and have multiple skills. However, do you think that will make your kid&#39;s life happier? I don&#39;t think so.</p><p>Well, back to our topic, happy childhood or high scores in childhood, I think that doesn&#39;t matter. The most important thing to do is to have a good attitude, a positive attitude, being kind and grateful. That is the key thing to making your life happier. No matter if you are a kid or if you are already an adult. So, my friend, I wish you a very happy life, keep going, keep positive and then you will be grateful for what you have.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;我为了提高英语能力，用了很多奇奇怪怪的方式，虽然效果提升不太明显，但我乐意哈哈，我不太喜欢循规蹈矩地去学，因为我一旦脱离预设的轨道，我就会一发不可收拾地摆烂。这篇文章“项目”是我心血来潮创建的，主要是记录B站一名叫 &lt;a href=&quot;https:/</summary>
      
    
    
    
    <category term="📕知识笔记" scheme="https://blog.harriswong.top/categories/%F0%9F%93%95%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="🔠英语" scheme="https://blog.harriswong.top/tags/%F0%9F%94%A0%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>Redux in React 学习笔记</title>
    <link href="https://blog.harriswong.top/posts/c631f0b6/"/>
    <id>https://blog.harriswong.top/posts/c631f0b6/</id>
    <published>2023-02-19T00:21:00.000Z</published>
    <updated>2023-02-19T00:21:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://react-redux.js.org/introduction/getting-started">官方文档</a>，<a href="https://scrimba.com/learn/react/redux-intro-cgM9Byu7">视频教程</a></p></blockquote><h1 id="What-is-Redux"><a href="#What-is-Redux" class="headerlink" title="What is Redux?"></a>What is Redux?</h1><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>Redux 是一种 JS 状态管理库，可用于任何 JS 应用程序，包括 React。Redux 提供单一的状态存储，可在整个应用程序中共享，方便跨组件共享数据。</p><p>在Redux中，状态存储在一个称为<code>Store</code>的对象中，并且只能通过<code>Action</code>来修改。<code>Reducer</code>函数用于处理<code>Action</code>，并返回新的状态对象。</p><p>它类似于 Context 概念，但 Context 并不像 Redux 那样提供状态管理和更新机制，你需要自己实现逻辑来修改 Context 中的数据。Redux 和 Context 是两种不同的技术，用于解决不同的问题，在一些小型应用或者组件层次较浅的应用中，使用 Context 可能会更加简单和方便。但在复杂应用中，Redux 的状态管理机制能够让你更方便地组织和管理应用的状态，也更容易调试和维护。</p><h2 id="Workflow"><a href="#Workflow" class="headerlink" title="Workflow"></a>Workflow</h2><p>Redux中的数据流是单向的，从<code>View</code>（视图）到<code>Action</code>（动作）再到<code>Reducer</code>（处理器）再到<code>Store</code>（存储器），最终再次返回到<code>View</code>中。当一个<code>Action</code>被触发后，它会被传递到<code>Reducer</code>中进行处理，<code>Reducer</code>返回一个新的状态对象，<code>Store</code>保存这个新的状态对象，然后通知<code>View</code>进行更新。</p><h1 id="Core-concepts"><a href="#Core-concepts" class="headerlink" title="Core concepts"></a>Core concepts</h1><p>为了形象理解概念，这将用餐厅举例：</p><p>Action 👉 Your Order</p><p>Dispatch 👉 Restaurant Server</p><p>Reducer 👉 Chef</p><p>Store 👉 Whole Restaurant</p><p>State 👉 它可以是餐厅内部的各种状态的集合，比如餐桌占用情况、食材库存等</p><p>getState 👉 获取餐厅当前的状态</p><p>Subscribe 👉 餐厅经理时刻关注/监视餐厅状态的变化，比如营业额、食材库存等</p><blockquote><p>厨师（Reducer）处理服务员（Dispatch）传来的订单（Action）</p></blockquote><h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><p>Action 是个普通 JS 对象，用于<u>描述发生的事件</u>和<u>携带数据</u>。也是应用状态的唯一来源，因为它们描述了应用中发生的所有事件，包括用户操作、网络响应等等。Action 常被用来触发状态的更新。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeCount</span>(<span class="params">count</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: <span class="string">&#x27;CHANGE_COUNT&#x27;</span>,</span><br><span class="line">    payload: count</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Property-type（必须）"><a href="#Property-type（必须）" class="headerlink" title="Property: type（必须）"></a>Property: type（必须）</h3><p><code>type</code> 用来描述 action 的类型。</p><p>书写要求：<strong>全大写</strong>，用下划线__来连接单词</p><h3 id="Property-payload（可选）"><a href="#Property-payload（可选）" class="headerlink" title="Property: payload（可选）"></a>Property: payload（可选）</h3><p><code>payload</code> 可以是任何 JS 值，用于携带与这个 action 相关的数据。</p><h2 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h2><p>Reducer 是个纯函数，用于处理 action 产生的数据，更新应用的状态。Reducer 接收一个 state 对象和一个 action 对象，然后根据 action 的 type 属性决定如何更新 state 对象。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">    count: <span class="number">0</span>,</span><br><span class="line">    favoriteThings: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state = initialState, action</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">switch</span>(<span class="params">action.type</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;CHANGE_COUNT&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                ...state,</span><br><span class="line">                count: state.count + action.payload</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;ADD_FAVORITE_THING&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                ...state,</span><br><span class="line">                favoriteThings: [...state.favoriteThings, action.payload]</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="combineReducers"><a href="#combineReducers" class="headerlink" title="combineReducers()"></a>combineReducers()</h3><p>当应用变得越来越复杂时，你可能需要将 reducer 拆分成更小的部分，每个部分负责管理全局 state 中的一个子集。这样做的好处是使 reducer 更易于管理和测试，同时也可以更好地维护应用程序。</p><p>最好将所有拆分的部分放在一个叫 redux 的文件夹</p><p>redux/index.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redux, &#123;combineReducers, createStore&#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span></span><br><span class="line"><span class="keyword">import</span> countReducer <span class="keyword">from</span> <span class="string">&quot;./count&quot;</span></span><br><span class="line"><span class="keyword">import</span> favoriteThingsReducer <span class="keyword">from</span> <span class="string">&quot;./favoriteThings&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootReducer = combineReducers(&#123;</span><br><span class="line">    count: countReducer,</span><br><span class="line">    favoriteThings: favoriteThingsReducer,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(rootReducer)</span><br><span class="line">store.subscribe(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(store.getState())</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p>redux/count.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">changeCount</span>(<span class="params">amount = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        type: <span class="string">&quot;CHANGE_COUNT&quot;</span>,</span><br><span class="line">        payload: amount</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">countReducer</span>(<span class="params">count = <span class="number">0</span>, action</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">switch</span>(<span class="params">action.type</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;CHANGE_COUNT&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> count + action.payload</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> count</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>redux/favoriteThings.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addFavoriteThing</span>(<span class="params">thing</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        type: <span class="string">&quot;ADD_FAVORITE_THING&quot;</span>,</span><br><span class="line">        payload: thing</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">removeFavoriteThing</span>(<span class="params">thing</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        type: <span class="string">&quot;REMOVE_FAVORITE_THING&quot;</span>,</span><br><span class="line">        payload: thing</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">favoriteThingsReducer</span>(<span class="params">favoriteThings = [], action</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">switch</span>(<span class="params">action.type</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;ADD_FAVORITE_THING&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> [...favoriteThings, action.payload]</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;REMOVE_FAVORITE_THING&quot;</span>: &#123;            </span><br><span class="line">            <span class="keyword">const</span> updatedArr = favoriteThings.filter(<span class="function"><span class="params">thing</span> =&gt;</span> thing.toLowerCase() !== action.payload.toLowerCase())</span><br><span class="line">            <span class="keyword">return</span> updatedArr</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> favoriteThings</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h2><p>Store 是应用中存储 state 的地方，应用中的每一个组件都可以从 store 中获取状态，也可以向其添加新状态。在Redux中，store 是唯一的，所有的状态都保存其中。</p><p>它还提供了一些方法来访问 state，如 getState 和 dispatch。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redux, &#123;createStore&#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">const</span> store = redux.createStore(reducer)</span><br><span class="line"></span><br><span class="line">store.subscribe(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(store.getState())</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.dispatch(changeCount(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h3 id="dispatch"><a href="#dispatch" class="headerlink" title="dispatch()"></a>dispatch()</h3><p>用于将 Action 提交给 Store，使得 Reducer 可以根据 Action 更新 state。</p><h3 id="subscribe"><a href="#subscribe" class="headerlink" title="subscribe()"></a>subscribe()</h3><p>Subscribe 是用于监听 Store 的变化，并在 Store 状态发生变化时触发回调函数。每当 Store 的状态发生变化时，Redux 会遍历所有已注册的监听器，然后逐一执行它们的回调函数。</p><h1 id="Redux-in-React"><a href="#Redux-in-React" class="headerlink" title="Redux in React"></a>Redux in React</h1><h2 id="react-redux"><a href="#react-redux" class="headerlink" title="react-redux"></a>react-redux</h2><p>TODO（如何下载安装导入）</p><h2 id="lt-Provider-gt"><a href="#lt-Provider-gt" class="headerlink" title="&lt;Provider /&gt;"></a>&lt;Provider /&gt;</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Provider&#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./redux&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">        &lt;App /&gt;</span><br><span class="line">    &lt;/Provider&gt;, </span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="connect"><a href="#connect" class="headerlink" title="connect()"></a>connect()</h2><p>本质是 Higher Order Components</p><p><strong>Syntax</strong>:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">connect(states, actions)(Component)</span><br><span class="line">connect(mapStateToPropsFunc, mapDispatchToPropsFunc)(Component)</span><br></pre></td></tr></table></figure><h3 id="mapStateToProps"><a href="#mapStateToProps" class="headerlink" title="mapStateToProps"></a>mapStateToProps</h3><p>&quot;What parts of the state do you want?&quot;</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h1&gt;&#123;props.count&#125;&lt;/h1&gt;</span><br><span class="line">            &lt;button&gt;-&lt;/button&gt;</span><br><span class="line">            &lt;button&gt;+&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        count: state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, &#123;&#125;)(App)</span><br></pre></td></tr></table></figure><p>更简洁的写法：</p><p><code>export default connect(state =&gt; (&#123;count: state&#125;), &#123;&#125;)(App)</code></p><h3 id="mapDispatchToProps"><a href="#mapDispatchToProps" class="headerlink" title="mapDispatchToProps"></a>mapDispatchToProps</h3><p>&quot;What actions do you wanna dispatch?&quot;</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123;increment, decrement&#125; <span class="keyword">from</span> <span class="string">&quot;./redux&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params">props</span>) </span>&#123;    </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h1&gt;&#123;props.count&#125;&lt;/h1&gt;</span><br><span class="line">            &lt;button onClick=&#123;props.decrement&#125;&gt;-&lt;/button&gt;</span><br><span class="line">            &lt;button onClick=&#123;props.increment&#125;&gt;+&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// mapStateToProps</span></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = &#123;</span><br><span class="line">    increment: increment,</span><br><span class="line">    decrement: decrement</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(App)</span><br></pre></td></tr></table></figure><p>当属性和值的名称一样时，可以写成如下形式：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mapDispatchToProps = &#123;</span><br><span class="line">    increment,</span><br><span class="line">    decrement</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有更简洁的写法（真叫一个专业对口）：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;increment, decrement&#125; <span class="keyword">from</span> <span class="string">&quot;./redux&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, &#123;increment, decrement&#125;)(App)</span><br></pre></td></tr></table></figure><h2 id="useSelector"><a href="#useSelector" class="headerlink" title="useSelector()"></a>useSelector()</h2><p><code>useSelector()</code> 的作用是从 Redux store 中获取所需的 state，并在组件中使用。</p><p>它的参数是一个函数，这个函数接收当前 Redux store 中的 state 作为参数，并返回你需要使用的 state。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useSelector &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Counter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> count = useSelector(<span class="function"><span class="params">state</span> =&gt;</span> state.count);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;Count: &#123;count&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="useDispatch"><a href="#useDispatch" class="headerlink" title="useDispatch()"></a>useDispatch()</h2><p><code>useDispatch</code> 用于在 React 组件中获取 <code>dispatch</code> 函数，以便触发 action 来更新 store 中的 state。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123;useSelector, useDispatch&#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123;increment, decrement&#125; <span class="keyword">from</span> <span class="string">&quot;./redux&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> count = useSelector(<span class="function"><span class="params">state</span> =&gt;</span> state)</span><br><span class="line">    <span class="keyword">const</span> dispatch = useDispatch()</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h1&gt;&#123;count&#125;&lt;/h1&gt;</span><br><span class="line">            &lt;button onClick=&#123;<span class="function">() =&gt;</span> dispatch(decrement())&#125;&gt;-&lt;/button&gt;</span><br><span class="line">            &lt;button onClick=&#123;<span class="function">() =&gt;</span> dispatch(increment())&#125;&gt;+&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Thunk"><a href="#Thunk" class="headerlink" title="Thunk"></a>Thunk</h2><p>thunk 是一种中间件，它允许我们在 action creator 中返回一个函数，而不是返回一个 action 对象。这个函数可以在内部进行异步操作，并在完成操作后再分发真正的 action。</p><p>Thunk 中间件会对每个分发的 action 进行检查，如果 action 是一个函数而不是一个对象，它就会执行这个函数，并将 dispatch 和 getState 作为参数传递给函数。这样，我们就可以在函数中进行异步操作，然后再根据异步操作的结果分发真正的 action。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redux, &#123;createStore, applyMiddleware&#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&quot;redux-thunk&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">increment</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">dispatch, getState</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> currentCount = getState()</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params">currentCount % <span class="number">2</span> === <span class="number">0</span></span>)</span> &#123;</span><br><span class="line">            dispatch(&#123;<span class="attr">type</span>: <span class="string">&quot;INCREMENT&quot;</span>&#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                dispatch(&#123;<span class="attr">type</span>: <span class="string">&quot;INCREMENT&quot;</span>&#125;)</span><br><span class="line">            &#125;, <span class="number">1500</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">count = <span class="number">0</span>, action</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">switch</span>(<span class="params">action.type</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;INCREMENT&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> count + <span class="number">1</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> count</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer, applyMiddleware(thunk))</span><br><span class="line">store.subscribe(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(store.getState()))</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://react-redux.js.org/introduction/getting-started&quot;&gt;官方文档&lt;/a&gt;，&lt;a href=&quot;https://scrimba.com/learn/react/redux-in</summary>
      
    
    
    
    <category term="📕知识笔记" scheme="https://blog.harriswong.top/categories/%F0%9F%93%95%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="📝前端" scheme="https://blog.harriswong.top/tags/%F0%9F%93%9D%E5%89%8D%E7%AB%AF/"/>
    
    <category term="✡️Redux" scheme="https://blog.harriswong.top/tags/%E2%9C%A1%EF%B8%8FRedux/"/>
    
    <category term="❄React" scheme="https://blog.harriswong.top/tags/%E2%9D%84React/"/>
    
  </entry>
  
  <entry>
    <title>开发个人主页Portfolio网站记录</title>
    <link href="https://blog.harriswong.top/posts/1d200213/"/>
    <id>https://blog.harriswong.top/posts/1d200213/</id>
    <published>2023-02-08T14:28:00.000Z</published>
    <updated>2023-03-05T14:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我在 Youtube 上找 React 项目开发教程时意外看到 Portfolio 这个概念，它是用来展示自己技能和作品的地方，可以在求职过程中向潜在雇主展示自己的能力和经验。开发这样一个项目能够让我每天保持敲代码和 Coming up with new idea 的习惯，感觉每天会很充实。在此我将记录搭建过程中的点点滴滴。</p></blockquote><div class="tag link"><a class="link-card" title="Harris Wong's Portfolio" href="https://harriswong.top"><div class="left"><img src= "https://cdn.jsdelivr.net/npm/hassan-assets/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/npm/hassan-assets/img/favicon.ico"/></div><div class="right"><p class="text">Harris Wong's Portfolio</p><p class="url">https://harriswong.top</p></div></a></div><h1 id="技术难点"><a href="#技术难点" class="headerlink" title="技术难点"></a>技术难点</h1><blockquote><p>将会在此记录一些不错的、我不会的、值得去记录的技术点。</p></blockquote><h2 id="将用户键入文本传入邮件应用里时不显示回车"><a href="#将用户键入文本传入邮件应用里时不显示回车" class="headerlink" title="将用户键入文本传入邮件应用里时不显示回车"></a>将用户键入文本传入邮件应用里时不显示回车</h2><p>在URL里，文本内容需要编码才能显示回车和空格等效果，在本项目里，我使用的是 <code>encodeURIComponent()</code> 方法。</p><p>具体如下，我将 textarea 里获取到的文本内容进行编码</p><p><code>const changeBody = (event) =&gt; setBody(encodeURIComponent(event.target.value));</code></p><h2 id="回到顶部按钮的逻辑实现"><a href="#回到顶部按钮的逻辑实现" class="headerlink" title="回到顶部按钮的逻辑实现"></a>回到顶部按钮的逻辑实现</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BackToTop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [showScroll, setShowScroll] = useState(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [scale, setScale] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听页面滚动事件，如果滚动高度大于 500，则显示返回顶部按钮</span></span><br><span class="line">  <span class="keyword">const</span> checkScrollTop = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!showScroll &amp;&amp; <span class="built_in">window</span>.pageYOffset &gt; <span class="number">500</span>) &#123;</span><br><span class="line">      setShowScroll(<span class="literal">true</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (showScroll &amp;&amp; <span class="built_in">window</span>.pageYOffset &lt;= <span class="number">500</span>) &#123;</span><br><span class="line">      setShowScroll(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&quot;scroll&quot;</span>, checkScrollTop);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">window</span>.removeEventListener(<span class="string">&quot;scroll&quot;</span>, checkScrollTop);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [showScroll]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &#123;<span class="comment">/* 返回顶部按钮 */</span>&#125;</span><br><span class="line">      &#123;</span><br><span class="line">        &lt;button</span><br><span class="line">          className=<span class="string">&quot;hw__backtotop&quot;</span></span><br><span class="line">          onClick=&#123;<span class="function">() =&gt;</span> <span class="built_in">window</span>.scrollTo(&#123; <span class="attr">top</span>: <span class="number">0</span>, <span class="attr">behavior</span>: <span class="string">&quot;smooth&quot;</span> &#125;)&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;BsTriangleFill /&gt;</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="点击导航链接滚动到指定位置时固定导航栏可能会遮盖板块上方内容"><a href="#点击导航链接滚动到指定位置时固定导航栏可能会遮盖板块上方内容" class="headerlink" title="点击导航链接滚动到指定位置时固定导航栏可能会遮盖板块上方内容"></a>点击导航链接滚动到指定位置时固定导航栏可能会遮盖板块上方内容</h2><p>当点击导航栏上的链接滚动到指定的位置时，如果固定导航栏，则可能会遮盖页面上方的内容。</p><p>我的做法是给每个区域加上 padding-top，值为导航栏高度。</p><h2 id="页面滚动到对应地方执行-animated-css-动画"><a href="#页面滚动到对应地方执行-animated-css-动画" class="headerlink" title="页面滚动到对应地方执行 animated.css 动画"></a>页面滚动到对应地方执行 animated.css 动画</h2><p>我将这部分逻辑写成了一个自定义 Hook，需要的组件直接调用就好。</p><p>useScroll.jsx</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useScroll = <span class="function">(<span class="params">elementClass, animation</span>) =&gt;</span> &#123;</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> handleScroll = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> element = <span class="built_in">document</span>.querySelectorAll(<span class="string">`.<span class="subst">$&#123;elementClass&#125;</span>`</span>);</span><br><span class="line">      <span class="keyword">if</span> (element[<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="keyword">const</span> elementPosition =</span><br><span class="line">          element[<span class="number">0</span>].getBoundingClientRect().top + <span class="built_in">window</span>.scrollY;</span><br><span class="line">        <span class="keyword">const</span> windowBottom = <span class="built_in">window</span>.scrollY + <span class="built_in">window</span>.innerHeight;</span><br><span class="line">        <span class="keyword">if</span> (windowBottom &gt; elementPosition) &#123;</span><br><span class="line">          element.forEach(<span class="function"><span class="params">ele</span> =&gt;</span> &#123;</span><br><span class="line">            ele.classList.add(<span class="string">&#x27;animate__animated&#x27;</span>, animation);</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="built_in">window</span>.removeEventListener(<span class="string">&quot;scroll&quot;</span>, handleScroll)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 初始化时触发一次，否则就需要鼠标划动后才能触发</span></span><br><span class="line">    handleScroll();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&quot;scroll&quot;</span>, handleScroll);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">window</span>.removeEventListener(<span class="string">&quot;scroll&quot;</span>, handleScroll);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useScroll;</span><br></pre></td></tr></table></figure><blockquote><p>Note：第一个 <code>window.removeEventListener(&quot;scroll&quot;, handleScroll)</code> 是动画执行完毕后移除滚动监听器，第二个是组件卸载后移除滚动监听器。第一个不写的话，动画执行后会持续随着你滚动页面而调用 <code>handleScroll()</code> 方法，第二个不写暂时不知。</p></blockquote><p>&lt;component&gt;.jsx，调用方法如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Component = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  useScroll(<span class="string">&#x27;classname&#x27;</span>, <span class="string">&#x27;animate__zoomIn&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    ...</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="开发日志"><a href="#开发日志" class="headerlink" title="开发日志"></a>开发日志</h1><details cyan><summary> Portfolio 网站开发日志 </summary>              <div class='content'>              <div class="timeline"><div class="timenode"><div class="meta"><p><p>2023/03/11</p></p></div><div class="body"><ul><li>【新增】Projects 板块项目分类 Tabs</li><li>【优化】项目描述超过一定高度显示滚动条</li></ul></div></div><div class="timenode"><div class="meta"><p><p>2023/03/10</p></p></div><div class="body"><ul><li>【优化】深色模式下一些板块亮度调暗 filter: brightness(0.9)</li><li>【新增】Skills 技能列表在光标 hover 后用胶囊形式显示所有技能</li></ul></div></div><div class="timenode"><div class="meta"><p><p>2023/03/09</p></p></div><div class="body"><ul><li>【优化】About 内容划入动画设置 delay 以营造一个接一个显示的效果。</li><li>【优化】useScroll Hook，以适配不同尺寸的屏幕，屏幕大的话，Skills 进度条可以直接显示动画，屏幕小，Skills 进度条可以等页面划到了再执行动画。（只需要初始化时先执行一次检验是否在视窗内的函数即可）</li></ul></div></div><div class="timenode"><div class="meta"><p><p>2023/03/07</p></p></div><div class="body"><ul><li>【新增】Skills 板块的 Figma 技能</li><li>【新增】Projects 板块里的项目描述和跳转链接</li></ul></div></div><div class="timenode"><div class="meta"><p><p>2023/03/06</p></p></div><div class="body"><ul><li>【更新】网站文案</li><li>【新增】给 Section 组件加入板块描述</li></ul></div></div><div class="timenode"><div class="meta"><p><p>2023/03/05</p></p></div><div class="body"><ul><li>【优化】<a href="https://github.com/twobin/react-lazyload">图片懒加载 - React-lazyload</a>（<a href="https://github.com/twobin/react-lazyload/issues/400">解决安装时的Bug</a>）</li><li>【美化】部分区域使用浏览器自带字体 Georgia</li></ul></div></div><div class="timenode"><div class="meta"><p><p>2023/03/04</p></p></div><div class="body"><ul><li>【新增】网站 Logo 和 ICO 图标（<a href="https://brandmark.io/">Brand Mark</a>）</li></ul></div></div><div class="timenode"><div class="meta"><p><p>2023/03/01</p></p></div><div class="body"><ul><li>【美化】组件划入动画（<a href="https://animate.style/">animated.css</a>）</li></ul></div></div><div class="timenode"><div class="meta"><p><p>2023/02/28</p></p></div><div class="body"><ul><li>【优化】当光标悬浮在 Skills 板块里技能块上时暂停左移动画</li><li>【更新】网站标题</li><li>【功能】Navbar 板块 Logo 部分加返回顶部功能及动画</li></ul></div></div><div class="timenode"><div class="meta"><p><p>2023/02/27</p></p></div><div class="body"><ul><li>【新增】用波浪线分隔指定板块（<a href="https://app.haikei.app/">haikei</a>）</li><li>【修复】Sidebar 里点击导航链接同时要关闭 Sidebar</li><li>【修复】点击导航链接滚动到指定板块时，固定导航栏遮盖了板块上方内容</li></ul></div></div><div class="timenode"><div class="meta"><p><p>2023/02/26</p></p></div><div class="body"><ul><li>【美化】继续加入主题色插画</li><li>【新增】About 板块里的 Blog、GitHub 按钮</li></ul></div></div><div class="timenode"><div class="meta"><p><p>2023/02/25</p></p></div><div class="body"><ul><li>【美化】加入主题色插画以丰富网站视觉效果</li></ul></div></div><div class="timenode"><div class="meta"><p><p>2023/02/24</p></p></div><div class="body"><ul><li>【移动端】菜单栏全屏划入划出效果</li></ul></div></div><div class="timenode"><div class="meta"><p><p>2023/02/22</p></p></div><div class="body"><ul><li>【移动端】网站所有板块尺寸适配</li></ul></div></div><div class="timenode"><div class="meta"><p><p>2023/02/21</p></p></div><div class="body"><ul><li>【移动端】导航栏 Navbar 板块</li></ul></div></div><div class="timenode"><div class="meta"><p><p>2023/02/20</p></p></div><div class="body"><ul><li>【新增】返回顶部按钮 BackToTop</li></ul></div></div><div class="timenode"><div class="meta"><p><p>2023/02/19</p></p></div><div class="body"><ul><li>【新增】联系 Contact 板块</li></ul></div></div><div class="timenode"><div class="meta"><p><p>2023/02/18</p></p></div><div class="body"><ul><li>【新增】项目 Projects 板块</li></ul></div></div><div class="timenode"><div class="meta"><p><p>2023/02/17</p></p></div><div class="body"><ul><li>【新增】经历 Experiences 板块</li></ul></div></div><div class="timenode"><div class="meta"><p><p>2023/02/16</p></p></div><div class="body"><ul><li>【新增】Skills 技能进度条</li></ul></div></div><div class="timenode"><div class="meta"><p><p>2023/02/15</p></p></div><div class="body"><ul><li>【新增】6点-18点自动为浅色模式，否则为深色模式</li><li>【新增】页尾 Footer 板块</li></ul></div></div><div class="timenode"><div class="meta"><p><p>2023/02/13</p></p></div><div class="body"><ul><li>【新增】技能 Skills 板块</li></ul></div></div><div class="timenode"><div class="meta"><p><p>2023/02/11</p></p></div><div class="body"><ul><li>【新增】深浅切换功能</li></ul></div></div><div class="timenode"><div class="meta"><p><p>2023/02/09</p></p></div><div class="body"><ul><li>【新增】关于 About 板块</li></ul></div></div><div class="timenode"><div class="meta"><p><p>2023/02/08</p></p></div><div class="body"><ul><li>项目初始化</li><li>【新增】导航栏 Navbar 板块</li></ul></div></div></div>              </div>            </details><h1 id="网站文案"><a href="#网站文案" class="headerlink" title="网站文案"></a>网站文案</h1><blockquote><p>以下文案收集于其它 Portfolio 类型网站，可供参考。</p></blockquote><h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><ul><li><p>I am a passionate frontend developer based in London, UK. My specialities are <strong>React JS</strong> and <strong>Tailwind CSS</strong>, and I love building apps that are delightful to use.</p></li><li><p>I&#39;m a frontend developer based out of London, UK. I love building apps that solve real-world problems, and that are delightful to use. My specialities include TypeScript, React JS, Tailwind CSS, and Styled Components.</p></li><li><p>My background is in teaching and marketing. I have a bachelors degree in English from Kings College. When I&#39;m not coding, I take care of my five adorable cats.</p></li><li><p>I&#39;m a web developer and designer based out of London, UK. I love building apps that solve real-world problems, and that are delightful to use. My specialities include TypeScript, React JS, Tailwind CSS, and Styled Components.</p><p>My background is in teaching and marketing, and I have a bachelors degree in English from Kings College. I also have five adorable cats.</p></li><li><p>A Front-End Developer based in London, UK</p></li><li><p>Hey! My name is Denise. I am a web &amp; font designer based in Utah</p><p>I have been working as a freelance designer and front-end developer since 2007. I’ve always been someone who has both a creative and a logical side. When I discovered web design in college, I realized it would be the perfect fit. I could use my creative side to design and my logical side to code. As a bonus, being both designer and developer allows me to make sure no detail is lost in translation.</p></li><li><p>Since beginning my journey as a freelance designer over 11 years ago, I&#39;ve done remote work for agencies, consulted for startups, and collaborated with talented people to create digital products for both business and consumer use. I&#39;m quietly confident, naturally curious, and perpetually working on improving my chops one design problem at a time.</p></li><li><p>Hello! My name is Brittany and I enjoy creating things that live on the internet. My interest in web development started back in 2012 when I decided to try editing custom Tumblr themes — turns out hacking together a custom reblog button taught me a lot about HTML &amp; CSS!</p></li></ul><h2 id="Projects"><a href="#Projects" class="headerlink" title="Projects"></a>Projects</h2><ul><li><p>All my projects include links to the code and live version. Click the button to learn more about each one.</p></li><li><p>A selection of my range of work</p></li><li><p>Here are a few past design projects I&#39;ve worked on.</p></li><li><p>I&#39;m a bit of a digital product junky. Over the years, I&#39;ve used hundreds of web and mobile apps in different industries and verticals. Eventually, I decided that it would be a fun challenge to try designing and building my own.</p></li><li><p>I love working with small businesses</p><p>I specialize in creating sites for individuals and small businesses. You shouldn’t have to settle for cheap solutions or generic templates. I provide custom designs at afforable prices. Frequently your website is the first impression your customers will get, so make sure it’s a good one. Since my time is split between a few different things, I’m not able to take on every project I’d like to, but I&#39;m always looking for fun work. Take a look at my portfolio below, if you think I’d be a good match [send me an email](mailto:<a href="mailto:deniselchandler@gmail.com">deniselchandler@gmail.com</a>?subject=DeniseChandler.com Contact Form).</p></li></ul><h3 id="project-item"><a href="#project-item" class="headerlink" title="project item"></a>project item</h3><ul><li>Quiz App:  Quizzical is a simple quiz app that lets you select alternatives and then gives you a score. It&#39;s built with functional React components.</li><li>Personal Dashboard: A Chrome Extension that gives you an overview over the current time, how the weather is like and how Dogecoin is performing. Interacts with multiple APIs using async JS.</li><li>Password Generator: An app that generates random passwords based on a few user inputs, e.g. length, types of characters, etc. Built with HTML, CSS, and vanilla JavaScript.</li><li>Personal Dashboard: A Chrome extension to help you focus and stay up-to-date.<ul><li>HTML</li><li>CSS</li><li>JavaScript</li><li>React</li></ul></li></ul><h2 id="Contact"><a href="#Contact" class="headerlink" title="Contact"></a>Contact</h2><ul><li>Please reach out if you have any questions! I&#39;m happy to jump on a video call to brainstorm projects and ideas. Send me an email at __ or call me directly at __</li><li>Are you looking for a fast-performing and user-friendly website to represent your product or business? or looking for any kind of consultation? or want to ask questions? or have some advice for me or just want to say &quot;Hi 👋&quot; in any case feel free to Let me know. I will do my best to respond back. 😊 The quickest way to reach out to me is via an email.</li></ul><h1 id="灵感来源"><a href="#灵感来源" class="headerlink" title="灵感来源"></a>灵感来源</h1><ul><li><p>Youtube 教程</p></li><li><p>他人 Portfolio 网站</p><ul><li><a href="https://denisechandler.com/">https://denisechandler.com/</a></li><li><a href="https://www.seanhalpin.xyz/">https://www.seanhalpin.xyz/</a></li><li><a href="https://zhheo.com/">https://zhheo.com/</a></li></ul></li><li><p>Scrimba</p><ol><li><a href="https://scrimba.com/scrim/c3rPn4c2?pl=p5PxYsw">https://scrimba.com/scrim/c3rPn4c2?pl=p5PxYsw</a></li><li><a href="https://scrimba.com/scrim/c6w7eJH7?pl=p5PxYsw">https://scrimba.com/scrim/c6w7eJH7?pl=p5PxYsw</a></li><li><a href="https://scrimba.com/scrim/cV68zZsr?pl=p5PxYsw">https://scrimba.com/scrim/cV68zZsr?pl=p5PxYsw</a></li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;我在 Youtube 上找 React 项目开发教程时意外看到 Portfolio 这个概念，它是用来展示自己技能和作品的地方，可以在求职过程中向潜在雇主展示自己的能力和经验。开发这样一个项目能够让我每天保持敲代码和 Coming up with </summary>
      
    
    
    
    <category term="📕知识笔记" scheme="https://blog.harriswong.top/categories/%F0%9F%93%95%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="📝前端" scheme="https://blog.harriswong.top/tags/%F0%9F%93%9D%E5%89%8D%E7%AB%AF/"/>
    
    <category term="❄React" scheme="https://blog.harriswong.top/tags/%E2%9D%84React/"/>
    
  </entry>
  
  <entry>
    <title>邵艾伦Alan美式口语网课笔记</title>
    <link href="https://blog.harriswong.top/posts/7f6d81d5/"/>
    <id>https://blog.harriswong.top/posts/7f6d81d5/</id>
    <published>2023-01-22T15:39:00.000Z</published>
    <updated>2023-02-26T17:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我关注邵艾伦Alan几年了，好像从19年二十万粉左右开始关注的，那个时候他会做一些和外国人聊天的视频，各种油管视频的reaction，我看得开心的同时也能学到英语。如今他的频道越做越大，已经两百万粉丝了，近期也在B站发布了自己教的美式口语视频课程，我觉得很不错。虽然他没有那些英语老师教的专业，但是我依旧会选择看他的课程，除了粉丝滤镜之外，他的教学模式可谓是全网比较独特的吧。在学习新的语言这一方面，我个人偏向于“婴儿式”学习方法，就是不断输入，同时也要尝试着输出，不需要刻意去学习语法、音标，总而言之就是你知道如何说就行，不需要太多了解其中的原理。当然我已经学了15年的英语，我的基础已经比较扎实了，所以我更需要接触那些常用日常的口语表达，其实很多书、很多教学视频里面教的内容相当一部分还是不够地道，或者有些过时，至少对于我而言，而Alan的课是直接从他和别人对话视频中截取的教学素材，内容非常 fresh，表达也很地道，同时Alan会说一些很街头很嘻哈开玩笑的话，这些也是我的兴趣之一。以上是我的个人想法，不具有普适性，他的课还是挺适合我的。</p></blockquote><blockquote><p>全套课程看完了，学到了很多，还需慢慢沉淀。</p><p>第一轮复习：2-14</p><p>课程直达：<a href="https://www.bilibili.com/cheese/play/ss1060">邵艾伦英语二合一【口语突飞猛进】【美式口音速成】</a></p></blockquote><h1 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h1><ol><li><p>Vibe. (感觉) = vibration (频率/震动) </p><p>Good vibes (好的感觉)，Bad vibes (不好的感觉) </p><p>e.g. He gives me a good vibe.</p></li><li><p>statistic (统计) / statistically (统计上的) </p></li><li><p>hood. (贫民窟) = neighborhood (街区) </p></li><li><p>pull over (逮停) </p></li><li><p>strapped up (备枪) </p></li><li><p>nerd (书呆子) / nerdy (书呆子的感觉) </p></li><li><p>Jacked (很壮) </p></li><li><p>Baller (很有钱的人) </p></li><li><p>Work out (健身) / Lift (撸铁) </p></li><li><p>Hella = very (非常) </p></li><li><p>Loaded (很有钱) </p></li><li><p>Clutch (完美解决问题) </p></li><li><p>Flex (秀/炫耀) Flexing (炫耀) </p></li><li><p>Typical (常见) Atypical (不常见) </p></li><li><p>Dope (酷) </p></li><li><p>Literally (真正意义上的/字面意思上的) </p></li><li><p>High-five (击掌) </p></li><li><p>Take it personally (认为是针对某人的) </p></li><li><p>Y&#39;all = you all (你们) </p></li><li><p>Tier (等级) </p></li><li><p>Smooth (很会) </p><p>e.g. He&#39;s so smooth when it comes to talking to girls.</p></li><li><p>Ethnicity (族裔) </p></li><li><p>Exotic (异国风情) </p></li><li><p>Conservative (保守的) </p></li><li><p>Right away (马上开始) </p></li><li><p>For real? (真的吗？) </p></li><li><p>Straight up  (直接/属实) </p></li><li><p>Lowkey (低调/轻轻说一句) </p></li><li><p>Bring up (提起/提及) </p><p>e.g. Why you gotta bring that shit up?</p></li><li><p>Spoil (变坏/变质) Spoiler (剧透) </p><p>e.g. I don&#39;t want any spoilers.</p><p>e.g. I can&#39;t have any spoilers for the new spiderman movie.</p></li><li><p>Lose my voice (失声) </p></li><li><p>Reps. = repetitions (重复) </p><p>e.g. How many reps of pull up do I need to do?</p></li><li><p>No way (不是吧?) </p></li><li><p>Draft (起草) Drafted (收编了，选中了) </p><p>e.g. I just got drafted to the NBA.</p></li><li><p>Rip-off (盗版) </p><p>e.g. Is that a real GUCCI or a rip-off?</p><p>e.g. It looks like a rip-off to me.</p></li><li><p>It/that sucks (难受) </p><p>You/they suck (你很糟糕) </p></li><li><p>Freckles (雀斑) </p></li><li><p>Make-up (妆) </p></li><li><p>Expelled (驱逐/开除) 一般指学校/组织/国家</p><p>e.g. You got expelled from school.</p></li><li><p>Skating Rink (溜冰场) </p></li><li><p>Hang out (一起玩) </p></li><li><p>__ though (但__) </p></li><li><p>I see (我懂了) </p></li><li><p>Get a ride (搭个车) </p></li><li><p>Freshman (高一/大一) </p><p>Sophomore (高二/大二) </p><p>Junior (高三/大三) </p><p>Senior (高四/大四) </p></li><li><p>Hoop (圆圈/篮球框) </p></li><li><p>Deadass (认真的) </p></li><li><p>Age well (不显老) </p></li><li><p>Trivia (知识竞赛) </p></li><li><p>Kill it (做的很好) </p></li><li><p>What&#39;s your major? (你大学学的什么专业?) </p></li><li><p>Content creator (视频博主) </p></li><li><p>Crispy (清脆) </p></li><li><p>Varsity (校队主力) junior varsity (非校队主力) </p></li><li><p>Brag (吹牛) </p></li><li><p>Present (当下) (礼物) (展示) </p><p>e.g. I don&#39;t wanna think too far, so let&#39;s just look near the presents.</p><p>e.g. We should all enjoy the present.</p></li><li><p>Whole lotta = a lot of (很多) </p></li><li><p>Shut down (关门了) </p></li><li><p>6-pack (六块腹肌) </p></li><li><p>Crochet (编织) </p></li><li><p>Look up (去搜索/查阅) (抬头看) (生意有所好转) (看望) </p></li><li><p>I was like (我当时的反应是) </p><p>They were like (他们当时的反应是) </p><p>He was like (他当时的反应是) </p><p>She was like (她当时的反应是) </p></li><li><p>Introvert (内向的人) introverted (内向) </p><p>Extrovert (外向的人) extroverted (外向) </p></li><li><p>Missing out (错过了快乐，不如意)</p><p>e.g. Since I have an exam tomorrow, so I gotta stay at home and study. But all my friends can go to the cinema, which makes me feel missing out.</p><p>e.g. Are you sure you&#39;re not gonna go to the party tonight? So you&#39;re gonna be missing out.</p></li><li><p>Long-term (长久的) short-term (短暂的) </p><p>e.g. Long-term relationship/friendship/damage</p></li><li><p>Last forever (永远长存) </p></li><li><p>Hook up (勾搭) </p></li><li><p>Commit (承诺) (犯) </p><p>e.g. He just committed a crime.</p></li><li><p>1, 000, 000, 000</p><p>billion  million  thousand</p><p>十亿 百万 千</p></li><li><p>Legit. = legitimate (正儿八经的/合法的/实在的) </p></li><li><p>mess you up (教训你一顿) </p></li><li><p>we&#39;ll see (到时候看吧) </p></li><li><p>assume (盲猜/假定) </p><p>e.g. How old are she look? Hmm, I assume twenty.</p></li><li><p>elementary/primary school (小学) </p><p>middle school (初中) </p><p>high school (高中) </p><p>college/university (大学) </p><p>graduate school (研究生院) </p><p>kindergarten (幼儿园) </p></li><li><p>miserable (痛苦/悲惨) </p><p>e.g. The fact that I have to work 12 hours a day, makes me miserable.</p><p>e.g. I feel miserable right now because I don&#39;t see any hope.</p></li><li><p>valid excuse (正当的借口) </p><p>e.g. I don&#39;t wanna go to school today, so I need to find a valid excuse.</p></li><li><p>symptoms (症状) </p></li><li><p>quarantine (隔离) </p></li><li><p>f*** it (不管了) </p></li><li><p>I am like (我的反应是) </p><p>He is like (他的反应是) </p><p>She is like (她的反应是) </p><p>They are like (他们的反应是) </p></li><li><p>Grooming (打理/修饰) </p></li><li><p>Chinese New Year = Lunar New Year (春节/中国新年) </p></li><li><p>For sure (肯定的) </p></li><li><p>Asian American (亚裔美国人) </p><p>African American (非裔美国人) </p><p>American Born Chinese (美国出生的华裔)</p></li><li><p>Stereotype (刻板印象) </p></li><li><p>Accent (口音) </p><p>Bonus: 规则: 单词开头是元音 (a,e,I,o,u) 之前，使用an</p></li><li><p>Coming up (快到了) </p><p>e.g. Did you know that Chinese new year / my birthday / summer break is coming up?</p></li><li><p>Meme (网络上很火的梗) </p></li><li><p>Artsy (艺术性的) </p></li><li><p>Trippy (魔幻的) </p></li><li><p>Hippie. = Hipster (嬉皮士) </p></li><li><p>Full-time (全职的) </p><p>Part-time (兼职的) </p></li><li><p>Livestream (直播) streamer (主播) streaming (在直播) stream (直播) </p></li><li><p>Chill (舒服) Chilling (放松) </p></li><li><p>Yell at (对着某人大吼大叫) </p></li><li><p>Divulge (透露) </p></li><li><p>Feeling down (情绪低落) </p></li><li><p>Take out a loan (拿贷款) </p></li><li><p>Grateful (感激/感恩) </p></li><li><p>Period (句号) (例假) (时期) (到此结束)</p></li><li><p>Gone through (经历过) </p><p>e.g. What have you gone/been through?</p></li><li><p>Reach out (伸出手，找人沟通) </p></li><li><p>Schedule (时间表) </p></li><li><p>Drop out (辍学) </p></li><li><p>Comfort zone (舒适圈) </p></li><li><p>On a primal level (到骨子里去了) </p><p>e.g. Whenever I think about that event, it hurts on a primal level.</p></li><li><p>Good for you (对你好的) </p><p>Bad for you (对你不好的) </p></li><li><p>Stick it out (坚持) </p></li><li><p>Interaction (交流) </p></li><li><p>Get to us (影响到我们) </p><p>Get to me (影响到我) </p><p>Get to you (影响到你) </p><p>e.g. Just don&#39;t let it get to you.</p></li><li><p>Good times (快乐的时光) </p></li><li><p>I&#39;m down (我可以的、我感兴趣、冲！) </p><p>e.g. Do you wanna hang out with me later after you&#39;ve done with your class? Yeah, I&#39;m down. Let&#39;s do it.</p></li><li><p>Import (进口) export (出口) </p></li><li><p>Industry (行业) </p></li><li><p>Degree (温度) (文凭) (程度) </p></li><li><p>Save up (存钱) </p></li><li><p>Bail out (金钱上帮助困难中的人) </p></li><li><p>Max out (拉满) </p><p>Max out AC (空调开最大)</p><p>Max out credit card (刷爆信用卡)</p></li><li><p>Homeschool (在家自学) </p></li><li><p>Lenient (宽容，宽松，懒散) </p></li><li><p>Luxury (奢侈) </p></li><li><p>Intellectual (智力的) (知识分子) </p></li><li><p>Flaw (缺陷) </p><p>Flawlessly (无缺陷地，完美地)</p></li><li><p>Caught up (了解最新情况) </p><p>e.g. I&#39;m pretty caught up with your life / that TV show / recent news.</p></li><li><p>Model (模特) modeling (做模特) </p></li><li><p>Tricky (复杂/难办/棘手) </p></li><li><p>Session (一段时间/时期) </p></li><li><p>Open-minded (思想开放/开明) </p><p>e.g. Usually, the people who are born and raised in big cities are more open-minded.</p></li><li><p>Westernized (西化) </p></li><li><p>Take off (起飞) </p><p>e.g. Ever since he made the song, his career took off.</p><p>e.g. My plane is about to take off in two hours, so can you please drive faster?</p></li><li><p>Known (出名的) </p></li><li><p>Fan base (粉丝群体) </p><p>e.g. BTS has a huge fan base in the US.</p></li><li><p>Stay/keep in touch (保持联系) </p></li><li><p>Religion (宗教) / religious (宗教方面的) </p></li><li><p>Occasion (场合) situation (情况) </p><p>e.g. Under what occasion/situation, xxx</p></li><li><p>Self-taught (自学的) </p><p>e.g. What surprises me is that he&#39;s actually self-taught.</p></li><li><p>Cultural shock (文化冲击) </p></li><li><p>Adjust (适应/调整) </p><p>e.g. It&#39;s harder for older people to adjust to new things.</p></li><li><p>Shoot my shot (放下顾虑去追别人，抓机会) </p></li><li><p>Middle eastern (中东人) </p></li><li><p>__ I guess (我觉得吧) </p></li><li><p>In shape (身材好) </p><p>e.g. You look pretty in shape.</p></li><li><p>Stand out (突出/显眼) </p></li><li><p>Racism (种族主义) racist (种族主义者) </p></li><li><p>Call out (指出错误) (嘲笑) </p></li><li><p>Here and there (时不时的) </p></li><li><p>Tired of it (厌倦了它) </p><p>e.g. I&#39;m tired of doing homework every single day.</p></li><li><p>Opener (开场白) (开瓶器) </p><p>e.g. I bet everybody says that as an opener.</p></li><li><p>Crack joke (开玩笑) </p><p>e.g. He likes to crack jokes all the time.</p></li><li><p>Bet = for sure (没问题) </p></li><li><p>For now (暂时的) </p></li><li><p>Gig (临时工作) </p></li><li><p>Down payment (首付) </p></li><li><p>Make bank (赚大钱) </p></li><li><p>Pull (吸引到) </p></li><li><p>Hustle (努力达到目标/挣钱) </p></li><li><p>Time-consuming (很花时间的) </p></li><li><p>Taxing (消耗) </p></li><li><p>Innovate (创新) </p></li><li><p>Off the cuff (一拍脑门) </p></li><li><p>Limited edition (限量款) </p></li><li><p>Liability (责任) </p></li><li><p>Arsonist (纵火犯) </p></li><li><p>Big deal (大事) </p></li><li><p>So far (目前来说) so good</p></li><li><p>Ultimate (最终的) </p></li><li><p>Phenomenon (现象) </p></li><li><p>_<em>proof (防_</em>) </p><p>Waterproof 防水</p><p>Bulletproof 防弹</p><p>Fireproof 防火</p></li><li><p>Meet requirement (符合要求) </p></li><li><p>That&#39;s it? (这就没了？就这？) </p></li><li><p>Come up with __ (想出__) </p></li><li><p>Human being (人类) </p></li><li><p>Speculate (猜测/推断) </p></li><li><p>Obsessed with __ (痴迷于__) </p></li><li><p>Tempting (有诱惑力的) </p></li><li><p>Drive me crazy (把我弄疯) </p></li><li><p>Enticing (诱人的) </p></li><li><p>Resonance (共振) </p></li><li><p>Input (输入) output (输出) </p></li><li><p>Inevitable (无法避免的) </p><p>Inevitability (无法避免的事)</p></li><li><p>Futile (徒劳) </p></li><li><p>Take over (接管，管制) </p><p>e.g. Let me take over the rest of your work.</p></li><li><p>Oversight (监督) </p></li><li><p>Investigate (调查) </p></li><li><p>Regulation (监管) </p></li><li><p>Decade (十年) </p></li><li><p>Doomsday (末日) </p></li><li><p>Out of control (失控) </p><p>e.g. Things are getting outta control.</p></li><li><p>Spooky (吓人的) </p></li><li><p>Merge (融合) </p></li><li><p>Augment (强化) </p></li><li><p>Drop the gun (逃避) </p></li><li><p>Radically (极大程度地，根本地) </p></li><li><p>Capability (能力) </p></li><li><p>Cognition (认知力) </p></li><li><p>Enhance (强化) </p></li><li><p>Bandwidth (宽带/速率) </p></li><li><p>Interface (接口/交流处) </p></li><li><p>Retain (保留) </p></li><li><p>Down the rabbit hole (进入未知领域了) </p><p>e.g. This conversation just went down the rabbit hole.</p></li><li><p>Abstract (抽象的) </p></li><li><p>Wrap your head around__ (理解__) </p></li><li><p>Document (记录) Documentary (纪录片) </p></li><li><p>Drone (无人机) </p></li><li><p>Missile (导弹) </p></li><li><p>Discriminate (差别对待，歧视) </p><p>Indiscriminately (无差别地)</p></li><li><p>Philosophy (哲学) </p></li><li><p>Modify (修改) </p><p>e.g. I don&#39;t think you need to modify your picture to make yourself look better, because you look pretty amazing already.</p></li><li><p>PR = public relation (公关) </p></li><li><p>Hashtag = #</p></li><li><p>Distinguish (区分) </p></li><li><p>Propagate (传播) Propaganda (政治宣传) </p></li><li><p>Optimistic (乐观的) Optimist (乐观的人) </p><p>e.g. I consider myself an optimist.</p></li><li><p>Pessimistic (悲观的) Pessimist (悲观的人) </p></li><li><p>Distill (提纯) </p><p>Distillation (浓缩，精华)</p></li><li><p>Pristine (光亮如新，崭新的) </p><p>e.g. I just washed my car yesterday, so now it looks pristine.</p></li><li><p>Back at it (重操旧业) </p></li><li><p>Heart&#39;s racing (心跳加速) </p><p>e.g. I bet her heart&#39;s racing.</p></li><li><p>Freak out (慌张，紧张，吓坏) </p><p>e.g. I&#39;m freaking out.</p></li><li><p>Contestant (参赛者) </p></li><li><p>Take your time (你不用着急) / Take his time (他不用着急) / Take their time (他们不用着急) </p></li><li><p>Deli. (熟食店) = Delicatessen</p></li><li><p>Fill me up (把我填饱) Fill you up (把你填饱) </p></li><li><p>Devour (吞食，狼吞虎咽) </p></li><li><p>No cap (不开玩笑) You&#39;re capping (你在开玩笑) That&#39;s a cap (这是在开玩笑) </p></li><li><p>Menace (疯的) </p></li><li><p>Natural habitat (自然的生活环境) </p></li><li><p>Zodiac sign (生肖) </p></li><li><p>ASAP (越快越好) = as soon as possible</p></li><li><p>Pick someone&#39;s brain (理解到别人的想法) </p></li><li><p>Crib (住所) </p></li><li><p>Telly (hotel room 酒店房间) </p></li><li><p>Pull up = pull thorough (过来) </p></li><li><p>Put someone on the spot (把某人放进一个很难回答/做决定/难堪的位置) </p><p>e.g. Are you gonna put me on the spot? 你这是要让我难堪吗？</p></li><li><p>Luxury (奢侈/难得的特权，享受) </p></li><li><p>Done up (好好打扮) </p><p>e.g. You look really done up.</p></li><li><p>DM (私信) = Direct Message</p></li><li><p>Genuine (真诚的) </p></li><li><p>Go out (出去嗨/出去喝酒) </p></li><li><p>Fell off (跌下了/过气了) </p></li><li><p>Make up for something (弥补) </p></li><li><p>Reciprocate (回报/反馈) </p></li><li><p>Simp (舔/舔狗) </p><p>L. (废物/失败者) = Loser</p><p>W. (赢/赢家) = Winner</p></li><li><p>Mansion (豪宅) </p></li><li><p>athletic (有运动细胞的) unathletic (没有运动细胞的) athlete (运动员) </p></li><li><p>I&#39;m not either = Me neither (我也不是) </p></li><li><p>Consistent (持续不断的) </p></li><li><p>Setup (设备) </p></li><li><p>Bandwagon (跟风) </p></li><li><p>Get to do something (可以做某件事) </p><p>e.g. I&#39;m happy because I get to eat at McDonald&#39;s.</p><p>e.g. I get to just have fun because I don&#39;t have work today.</p></li><li><p>Chef&#39;s kiss (主厨亲过一样/超好的) </p></li><li><p>Superior (更好的/更高级的) </p></li><li><p>Dependent (依赖人的) </p><p>Independent (不依赖人的/独立的) </p></li><li><p>Nowadays (当今) </p></li><li><p>Heels (高跟鞋) </p></li><li><p>Grind (磨碎) (努力奋斗) </p></li><li><p>In the flesh (活生生的) </p><p>e.g. I&#39;ve seen her on television but never in the flesh.</p></li><li><p>OOTD (今日穿搭) = outfit of the day</p></li><li><p>Bucket list (愿望清单) </p><p>e.g. Going snowboarding is / has always been on my bucket list.</p></li><li><p>Organic (有机的) </p></li><li><p>Leak (泄露) </p><p>e.g. My phone/video/idea got leaked.</p></li><li><p>Spam (垃圾信息) </p></li><li><p>Clout (名气) </p></li><li><p>Ins and outs (来龙去脉，里里外外，详情，细节) </p><p>e.g. I know how to use computers, but I don&#39;t really understand the ins and outs of how they work.</p></li><li><p>Didn&#39;t know any better (不太懂事) </p></li><li><p>Eliminate (消除) </p></li><li><p>Go on the fly (不经过太多思考做某事) </p></li><li><p>GOAT (最伟大的) = Greatest Of All Time</p></li><li><p>Wish you a happy __ (节日) </p><p>祝你__ (节日) 快乐</p></li><li><p>Take turns (轮流) </p></li><li><p>Hygiene (卫生) </p></li><li><p>Ego (自我) big ego (太自我) </p></li><li><p>Clingy (粘人的) </p></li><li><p>Get along with__ (与__相处得融洽) </p></li><li><p>Meant to be (命中注定的) </p></li><li><p>through thick and thin (不管有多困难，历尽千辛万苦) </p></li><li><p>put in work (卖力工作) </p></li><li><p>superficial (肤浅) </p></li><li><p>cherish (珍惜) </p></li><li><p>collab. (合作) = collaboration</p></li><li><p>corny (老土/老套) </p></li><li><p>pissed off (发火/发脾气) </p></li><li><p>it doesn&#39;t add up (这不合理) </p></li><li><p>rigged (存在作弊的) </p></li></ol><h1 id="句型"><a href="#句型" class="headerlink" title="句型"></a>句型</h1><ol><li><p>Are you about to __ or something?</p><p>你这是要去__之类的吗? </p><p>e.g. Are you about to go to work or something?</p></li><li><p>You know what I&#39;m saying?</p><p>你懂我意思吗？</p></li><li><p>I don&#39;t get it  = I don&#39;t understand</p><p>我不理解</p><p>e.g. I don&#39;t get why my girlfriend&#39;s parents are hella mean to me.</p><p>e.g. Did you understand what the teacher just taught us?</p></li><li><p>That&#39;s messed up</p><p>太离谱了</p></li><li><p>What&#39;s up / what up (哈喽) </p><p>回复：what&#39;s up/what&#39;s good/how&#39;s it going?/how (are) you doing?</p></li><li><p>Don&#39;t hesitate to</p><p>毫不犹豫去__</p><p>e.g. Since I&#39;m a really good student, I don&#39;t hesitate to study.</p><p>e.g. I really need to make some money, so I don&#39;t hesitate to go to work.</p><p>e.g. I don&#39;t really like that person so if I ever see him, I don&#39;t hesitate to go beat his ass.</p></li><li><p>I gotta go</p><p>我得先走了</p></li><li><p>You know the drill</p><p>你懂的</p></li><li><p>I can tell (我能看出来) / I can&#39;t tell (我看不出来) </p><p>You can tell (你能看出来) / you can&#39;t tell (你看不出来) </p><p>He can tell (他能看出来) / he can&#39;t tell (他看不出来) </p><p>e.g. He&#39;s so good at lying, you can&#39;t tell if he&#39;s being serious or not.</p></li><li><p>left __ for __</p><p>为了 __ 而离开 __</p><p>e.g. I left school for my rap career.</p></li><li><p>When it comes to </p><p>在__方面</p><p>e.g. When it comes to food, what&#39;s your favourite type of cuisine?</p><p>e.g. When it comes to dating, do you have a racial preference?</p></li><li><p>Have a good one</p><p>祝你好运</p></li><li><p>got __ on </p><p>比_<em>多了_</em></p><p>e.g. He&#39;s got ten years on me.</p><p>e.g. He&#39;s got 10 centimetres on me.</p></li><li><p>You don&#39;t look a day over__</p><p>你看起来最多__岁（多一天都不行），你看起来不像__多岁</p></li><li><p>the __ th __ in the world (可替换) </p><p>在 __ 方面是世界 (可替换) 第 __</p></li><li><p>It took you __</p><p>只花了你 __ (多长时间) </p></li><li><p>everyone be saying that</p><p>大家一直这么说</p></li><li><p>you look like a combination of __ and __</p><p>你看着像 __ (某人) 和 __ (某人) 的结合体</p></li><li><p>say it on your mom&#39;s life?</p><p>你发誓吗？ </p></li><li><p>Check this out / check it out</p><p>看看这个</p></li><li><p>I have it right here</p><p>东西就在这里</p></li><li><p>everything you ever wanted</p><p>你所想拥有的一切</p></li><li><p>I don&#39;t see __ when you could be __</p><p>我不理解为什么 __ 当你可以 __</p></li><li><p>The thing is __</p><p>问题是 __</p></li><li><p>What do you do for fun?</p><p>你喜欢干些什么？ </p><p>What do you do for a living?</p><p>你以什么为生？</p><p>What do you do for work?</p><p>你工作做什么的？</p></li><li><p>How did you get into __?</p><p>你是怎么喜欢上（做） __（事情）?</p></li><li><p>get to __</p><p>能够去 __</p></li><li><p>__free</p><p>没有__</p><p>e.g. Covid-free</p><p>e.g. Smoke-free area</p></li><li><p>__ for a living</p><p>做__为生</p></li><li><p>get that a lot / get that all the time</p><p>经常有人这么说</p></li><li><p>really good at __</p><p>非常擅长__</p></li><li><p>How am I supposed to __ when/if ___</p><p>我该如何_<em>当_</em></p><p>e.g. How am I supposed to come to the party when/if I&#39;m not even invited?</p><p>e.g. How am I supposed to go to the party when/if I don&#39;t even have a ride?</p><p>e.g. How am I supposed to save up money when/if I don&#39;t even have a job?</p></li><li><p>be tired of __</p><p>厌烦了做__</p></li><li><p>You need to be__ to be able to __</p><p>你得满了_<em>岁才能_</em></p><p>e.g. You need to be over 21 to be able to get into the clubs.</p><p>e.g. You need to be over 18 to be able to buy a pack of cigarette.</p></li><li><p>scare/beat the shit out of me/you/him/her/them</p><p>把我/你/他/她/他们的翔给吓/打出来了</p><p>e.g. Yo, if you don&#39;t leave me alone, Imma beat the shit outta you.</p></li><li><p>You got it going on</p><p>你看着真不错 (你穿搭很在线)</p></li><li><p>into something</p><p>对某某东西感兴趣</p></li><li><p>What&#39;s the point of __ if you __</p><p>做_<em>的意义是什么，如果你都_</em></p><p>e.g. What&#39;s the point of learning English, if you can&#39;t even speak the language?</p></li><li><p>The fact that __</p><p>__ 这件事情</p></li><li><p>nothing to do with __</p><p>跟__没有半点关系</p><p>e.g. Why you gotta blame this on me? It has nothing to do with me.</p></li><li><p>want __ so badly</p><p>超级想要__</p><p>e.g. I grew up with no friends so I wanted friendship so badly.</p></li><li><p>__fold</p><p>__倍</p></li><li><p>don&#39;t have to deal with __ any longer than I have to</p><p>再不需要再跟__打交道了</p><p>e.g. I&#39;m so glad that I quit my job, so I don&#39;t have to deal with my boss any longer than I have to.</p></li><li><p>As much as I can</p><p>尽我最大努力</p><p>e.g. I really wanna get an A on the exam, so I&#39;m gonna study as much as I can.</p></li><li><p>What&#39;s up with __?</p><p>__ 是什么情况?</p><p>e.g. She&#39;s been acting weird all day, what&#39;s up with her?</p></li><li><p>Keep doing something</p><p>有做这件事情的习惯</p></li><li><p>Keep on doing something</p><p>不停的做这件事情</p></li><li><p>when it comes to __</p><p>In terms of __</p><p>In regards to __</p><p>在__方面</p></li><li><p>Once in a while / occasionally</p><p>偶尔出现一次</p><p>e.g. My diet is usually pretty healthy, but once in a while, I&#39;ll eat ice cream or a hamburger.</p></li><li><p>__ for the rest of my life</p><p>__这件事做一辈子</p><p>e.g. I can&#39;t be a programmer/YouTuber/rapper for the rest of my life.</p></li><li><p>I hate to ask/interrupt/disrupt but __</p><p>很不好意思问/打断/中断，但是__</p><p>e.g. I hate to disrupt, but there is something urgent going on.</p><p>e.g. I hate to ask you this favour, but can you pls give me a ride home?</p></li><li><p>not to the point where __</p><p>还没到__的程度</p><p>e.g. not to the point where everybody wants to hang out with me.</p></li><li><p>as long as __</p><p>只要__</p><p>e.g. You can definitely pick up（掌握）English, as long as you spend enough time studying it.</p></li><li><p>__ in the first place</p><p>__从一开始</p></li><li><p>how does one decide to __ by __</p><p>你是怎么决定去通过__去__的</p></li><li><p>hold a candle to__</p><p>与__相提并论</p><p>e.g. You&#39;ll not be able to hold a candle to me.</p><p>e.g. Even though humans are smart, we cannot hold a candle to AI.</p></li><li><p>I&#39;d rather __ than __</p><p>我宁愿_<em>也不想要_</em></p><p>e.g. I&#39;d rather be broke and happy than rich and sad.</p></li><li><p>Are you ready for me to __？</p><p>你准备好我为你__了吗？</p></li><li><p>I have to resist the urge to __</p><p>我必须克制住__的冲动</p><p>e.g. I have to resist the urge to go ask for her phone number.</p></li><li><p>I&#39;ve been __ for __</p><p>我做__ (事情) 已经__ (时间) 了</p></li><li><p>What&#39;s your go to?</p><p>你的第一选择会是什么？</p></li><li><p>I&#39;ve been meaning to __</p><p>我一直想__来着</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;我关注邵艾伦Alan几年了，好像从19年二十万粉左右开始关注的，那个时候他会做一些和外国人聊天的视频，各种油管视频的reaction，我看得开心的同时也能学到英语。如今他的频道越做越大，已经两百万粉丝了，近期也在B站发布了自己教的美式口语视频课程，</summary>
      
    
    
    
    <category term="📕知识笔记" scheme="https://blog.harriswong.top/categories/%F0%9F%93%95%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="🔠英语" scheme="https://blog.harriswong.top/tags/%F0%9F%94%A0%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript基础笔记</title>
    <link href="https://blog.harriswong.top/posts/3f7cd15d/"/>
    <id>https://blog.harriswong.top/posts/3f7cd15d/</id>
    <published>2022-11-26T22:20:16.000Z</published>
    <updated>2023-03-06T18:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我很早学过，只是当时没有系统记录笔记，导致过一段时就容易忘记很多东西。本笔记主要参考<a href="https://web.qianguyihao.com/04-JavaScript%E5%9F%BA%E7%A1%80/00-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%AE%80%E4%BB%8B.html">JavaScript 基础-千古前端图文教程</a>，<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/">mdn web docs - JavaScript</a></p></blockquote><p>Web 前端有三层：</p><ul><li>HTML：从语义的角度，描述页面<strong>结构</strong></li><li>CSS：从审美的角度，描述<strong>样式</strong>（美化页面）</li><li>JavaScript（简称 JS）：从交互的角度，描述<strong>行为</strong>（实现业务逻辑和页面控制）</li></ul><h1 id="Date"><a href="#Date" class="headerlink" title="Date"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date">Date</a></h1><h2 id="Date-constructor"><a href="#Date-constructor" class="headerlink" title="Date() constructor"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date">Date() constructor</a></h2><p>The <code>Date()</code> constructor can create a <code>Date</code> instance or return a string representing the <u>current time</u>.</p><p><code>const date1 = new Date()</code></p><h2 id="getFullYear"><a href="#getFullYear" class="headerlink" title="getFullYear()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear">getFullYear()</a></h2><p>The <code>getFullYear()</code> method returns the <u>year of the specified date</u> according to local time.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> birthday = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;August 9, 2000 00:00:00&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(birthday.getFullYear()); <span class="comment">// Expected output: 2000</span></span><br></pre></td></tr></table></figure><h2 id="getMonth"><a href="#getMonth" class="headerlink" title="getMonth()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth">getMonth()</a></h2><p>The <code>getMonth()</code> method returns the <u>month on the specified date</u> according to local time, as a zero-based value (where zero indicates the first month of the year).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> birthday = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;August 9, 2000 00:00:00&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(birthday.getMonth()); <span class="comment">// Expected output: 6</span></span><br><span class="line"><span class="comment">// January - December : 0 - 11</span></span><br></pre></td></tr></table></figure><h2 id="getDate"><a href="#getDate" class="headerlink" title="getDate()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDate">getDate()</a></h2><p>The <code>getDate()</code> method returns <u>the day of the month</u> for the specified date according to local time.（几号）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> birthday = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;August 9, 2000 00:00:00&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(birthday.getDate()); <span class="comment">// Expected output: 9</span></span><br></pre></td></tr></table></figure><h2 id="getDay"><a href="#getDay" class="headerlink" title="getDay()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDay">getDay()</a></h2><p>The <code>getDay()</code> method returns the <u>day of the week</u> for the specified date according to local time, where 0 represents Sunday. （周几）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> birthday = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;August 9, 2000 00:00:00&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(birthday.getDay()); <span class="comment">// Expected output: 3</span></span><br><span class="line"><span class="comment">// Sunday - Saturday : 0 - 6</span></span><br></pre></td></tr></table></figure><h2 id="getHours"><a href="#getHours" class="headerlink" title="getHours()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getHours">getHours()</a></h2><p>The <code>getHours()</code> method returns the <u>hour for the specified date</u>, according to local time.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> birthday = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;August 9, 2000 00:00:00&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(birthday.getHours()); <span class="comment">// Expected output: 0</span></span><br></pre></td></tr></table></figure><h2 id="getMinutes"><a href="#getMinutes" class="headerlink" title="getMinutes()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMinutes">getMinutes()</a></h2><p>The <code>getMinutes()</code> method returns the <u>minutes on the specified date</u> according to local time.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> birthday = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;August 9, 2000 00:00:00&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(birthday.getMinutes(); <span class="comment">// Expected output: 0</span></span><br></pre></td></tr></table></figure><h2 id="getSeconds"><a href="#getSeconds" class="headerlink" title="getSeconds()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getSeconds">getSeconds()</a></h2><p>The <code>getSeconds()</code> method returns the <u>seconds in the specified date</u> according to local time.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> birthday = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;August 9, 2000 00:00:00&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(birthday.getSeconds(); <span class="comment">// Expected output: 0</span></span><br></pre></td></tr></table></figure><h2 id="getTime"><a href="#getTime" class="headerlink" title="getTime()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime">getTime()</a></h2><p>The <code>getTime()</code> method returns the <u>number of milliseconds</u> since the epoch, which is defined as the midnight at the beginning of January 1, 1970, UTC.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> DOB = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;2000/08/09 00:00:00&#x27;</span>);</span><br><span class="line"><span class="comment">// Milliseconds since Jan 1, 1970, 00:00:00.000 GMT</span></span><br><span class="line"><span class="built_in">console</span>.log(moonLanding.getTime()); <span class="comment">// Expected output: 965775600000</span></span><br></pre></td></tr></table></figure><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math">Math</a></h1><h2 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h2><h3 id="floor"><a href="#floor" class="headerlink" title="floor()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor">floor()</a></h3><p>The <code>Math.floor()</code> static method always <u>rounds down</u> and returns the largest integer less than or equal to a given number.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">5.95</span>)); <span class="comment">// Expected output: 5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">5.05</span>)); <span class="comment">// Expected output: 5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">5</span>)); <span class="comment">// Expected output: 5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(-<span class="number">5.05</span>)); <span class="comment">// Expected output: -6</span></span><br></pre></td></tr></table></figure><h3 id="ceil"><a href="#ceil" class="headerlink" title="ceil()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil">ceil()</a></h3><p>The <code>Math.ceil()</code> static method always <u>rounds up</u> and returns the smaller integer greater than or equal to a given number.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">.95</span>)); <span class="comment">// Expected output: 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">4</span>)); <span class="comment">// Expected output: 4</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">7.004</span>)); <span class="comment">// Expected output: 8</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(-<span class="number">7.004</span>)); <span class="comment">// Expected output: -7</span></span><br></pre></td></tr></table></figure><h3 id="round"><a href="#round" class="headerlink" title="round()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round">round()</a></h3><p>The <code>Math.round()</code> static method returns the value of a number rounded to the nearest integer.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">0.9</span>)); <span class="comment">// Expected output: 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">5.95</span>), <span class="built_in">Math</span>.round(<span class="number">5.5</span>), <span class="built_in">Math</span>.round(<span class="number">5.05</span>)); <span class="comment">// Expected output: 6 6 5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(-<span class="number">5.05</span>), <span class="built_in">Math</span>.round(-<span class="number">5.5</span>), <span class="built_in">Math</span>.round(-<span class="number">5.95</span>)); <span class="comment">// Expected output: -5 -5 -6</span></span><br></pre></td></tr></table></figure><h3 id="random"><a href="#random" class="headerlink" title="random()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random">random()</a></h3><p><code>Math.floor(Math.random() * y + x)</code> 👉 [x, y) 区间的随机整数</p><p><code>Math.ceil(Math.random() * y + x)</code> 👉 (x, y] 区间的随机整数</p><p><code>Math.round(Math.random() * y + x)</code> 👉 [x, y] 区间的随机整数</p><h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><h3 id="length"><a href="#length" class="headerlink" title="length"></a>length</h3><p>The <strong><code>length</code></strong> property of an <code>Array</code> object represents the number of elements in that array. The value is an unsigned, 32-bit integer that is always numerically greater than the highest index in the array.</p><p><strong>Try it</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> clothing = [<span class="string">&quot;shoes&quot;</span>, <span class="string">&quot;shirts&quot;</span>, <span class="string">&quot;socks&quot;</span>, <span class="string">&quot;sweaters&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(clothing.length); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h2 id="Methods-1"><a href="#Methods-1" class="headerlink" title="Methods"></a>Methods</h2><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach">forEach()</a></h3><p>The <code>forEach()</code> method executes a provided function once for each array element.</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">array1.forEach(<span class="function"><span class="params">element</span> =&gt;</span> <span class="built_in">console</span>.log(element));</span><br><span class="line"><span class="comment">// Expected output: &quot;a&quot;</span></span><br><span class="line"><span class="comment">// Expected output: &quot;b&quot;</span></span><br><span class="line"><span class="comment">// Expected output: &quot;c&quot;</span></span><br></pre></td></tr></table></figure><h3 id="push"><a href="#push" class="headerlink" title="push()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push">push()</a></h3><p>The <code>push()</code> method <u>adds one or more elements to the end</u> of an array and <u>returns the new length</u> of the array.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> animals = [<span class="string">&#x27;pigs&#x27;</span>, <span class="string">&#x27;goats&#x27;</span>, <span class="string">&#x27;sheep&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> count = animals.push(<span class="string">&#x27;cows&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(count); <span class="comment">// Expected output: 4</span></span><br><span class="line"><span class="built_in">console</span>.log(animals); <span class="comment">// Expected output: Array [&quot;pigs&quot;, &quot;goats&quot;, &quot;sheep&quot;, &quot;cows&quot;]</span></span><br><span class="line"></span><br><span class="line">animals.push(<span class="string">&#x27;chickens&#x27;</span>, <span class="string">&#x27;cats&#x27;</span>, <span class="string">&#x27;dogs&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(animals);</span><br><span class="line"><span class="comment">// Expected output: Array [&quot;pigs&quot;, &quot;goats&quot;, &quot;sheep&quot;, &quot;cows&quot;, &quot;chickens&quot;, &quot;cats&quot;, &quot;dogs&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="every"><a href="#every" class="headerlink" title="every()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every">every()</a></h3><p>The <strong><code>every()</code></strong> method tests whether all elements in the array pass the test implemented by the provided function. It returns a <u>Boolean</u> value.</p><p>人话说就是如果所有元素满足条件，就返回 true，反之。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">30</span>, <span class="number">39</span>, <span class="number">29</span>, <span class="number">10</span>, <span class="number">13</span>];</span><br><span class="line"><span class="keyword">const</span> isBelowThreshold = <span class="function">(<span class="params">currentValue</span>) =&gt;</span> currentValue &lt; <span class="number">40</span>;</span><br><span class="line"><span class="built_in">console</span>.log(array1.every(isBelowThreshold)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="some"><a href="#some" class="headerlink" title="some()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some">some()</a></h3><p>The <code>some()</code> method tests whether at least one element in the array passes the test implemented by the provided function. It returns true if, in the array, it finds an element for which the provided function returns true; otherwise it returns false. It doesn&#39;t modify the array.</p><p>人话说就是如果至少有一个元素满足条件，就返回 true，反之。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// Checks whether an element is even</span></span><br><span class="line"><span class="keyword">const</span> even = <span class="function">(<span class="params">element</span>) =&gt;</span> element % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(array.some(even)); <span class="comment">// Expected output: true</span></span><br></pre></td></tr></table></figure><h3 id="includes"><a href="#includes" class="headerlink" title="includes()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes">includes()</a></h3><p><code>includes()</code> 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 <code>true</code>，否则返回 <code>false</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(array1.includes(<span class="number">2</span>)); <span class="comment">// Expected output: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pets = [<span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;bat&#x27;</span>]; </span><br><span class="line"><span class="built_in">console</span>.log(pets.includes(<span class="string">&#x27;cat&#x27;</span>)); <span class="comment">// Expected output: true</span></span><br><span class="line"><span class="built_in">console</span>.log(pets.includes(<span class="string">&#x27;at&#x27;</span>)); <span class="comment">// Expected output: false</span></span><br></pre></td></tr></table></figure><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf">indexOf()</a></h3><p>The <code>indexOf()</code> method returns the <u>first index</u> at which a given element can be found in the array, or <u>-1 if it is not present</u>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> beasts = [<span class="string">&#x27;ant&#x27;</span>, <span class="string">&#x27;bison&#x27;</span>, <span class="string">&#x27;camel&#x27;</span>, <span class="string">&#x27;duck&#x27;</span>, <span class="string">&#x27;bison&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(beasts.indexOf(<span class="string">&#x27;bison&#x27;</span>)); <span class="comment">// Expected output: 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Start from index 2</span></span><br><span class="line"><span class="built_in">console</span>.log(beasts.indexOf(<span class="string">&#x27;bison&#x27;</span>, <span class="number">2</span>)); <span class="comment">// Expected output: 4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(beasts.indexOf(<span class="string">&#x27;giraffe&#x27;</span>)); <span class="comment">// Expected output: -1</span></span><br></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">filter()</a></h3><p>The <code>filter()</code> method creates a <a href="https://developer.mozilla.org/en-US/docs/Glossary/Shallow_copy">shallow copy</a> of a portion of a given array, filtered down to just the elements from the given array that pass the test implemented by the provided function.</p><p>人话说就是返回满足条件的元素新数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> words = [<span class="string">&quot;spray&quot;</span>, <span class="string">&quot;limit&quot;</span>, <span class="string">&quot;elite&quot;</span>, <span class="string">&quot;exuberant&quot;</span>, <span class="string">&quot;destruction&quot;</span>, <span class="string">&quot;present&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> result = words.filter(<span class="function">(<span class="params">word</span>) =&gt;</span> word.length &gt; <span class="number">6</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// Array [&quot;exuberant&quot;, &quot;destruction&quot;, &quot;present&quot;]</span></span><br></pre></td></tr></table></figure><blockquote><p> <code>filter()</code> 可以用来移除数组里对应值的元素。返回一个新数组，条件设为不等于某个值即可。</p></blockquote><h3 id="find"><a href="#find" class="headerlink" title="find()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find">find()</a></h3><p>The <code>find()</code> method returns the <u>first element</u> in the provided array that satisfies the provided testing function. If no values satisfy the testing function, <code>undefined</code> is returned.</p><p>人话说就是返回第一个满足条件的元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>];</span><br><span class="line"><span class="keyword">const</span> found = array1.find(<span class="function"><span class="params">element</span> =&gt;</span> element &gt; <span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(found); <span class="comment">// Expected output: 12</span></span><br></pre></td></tr></table></figure><h3 id="join"><a href="#join" class="headerlink" title="join()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join">join()</a></h3><p>The <code>join()</code> method creates and returns a new string by concatenating（连接） all of the elements in an array (or an <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#working_with_array-like_objects">array-like object</a>), separated by commas or a specified separator string. If the array has only one item, then that item will be returned without using the separator.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> elements = [<span class="string">&#x27;Fire&#x27;</span>, <span class="string">&#x27;Air&#x27;</span>, <span class="string">&#x27;Water&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(elements.join()); <span class="comment">// Expected output: &quot;Fire,Air,Water&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(elements.join(<span class="string">&#x27;&#x27;</span>)); <span class="comment">// Expected output: &quot;FireAirWater&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(elements.join(<span class="string">&#x27;-&#x27;</span>)); <span class="comment">// Expected output: &quot;Fire-Air-Water&quot;</span></span><br></pre></td></tr></table></figure><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse">reverse()</a></h3><p><code>reverse()</code> 方法将数组中元素的位置颠倒，并返回该数组。数组的第一个元素会变成最后一个，数组的最后一个元素变成第一个。<u>该方法会改变原数组</u>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;two&#x27;</span>, <span class="string">&#x27;three&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;array1:&#x27;</span>, array1); <span class="comment">// Expected output: &quot;array1:&quot; Array [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reversed = array1.reverse();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;reversed:&#x27;</span>, reversed); <span class="comment">// Expected output: &quot;reversed:&quot; Array [&quot;three&quot;, &quot;two&quot;, &quot;one&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Careful: reverse is destructive -- it changes the original array.</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;array1:&#x27;</span>, array1); <span class="comment">// Expected output: &quot;array1:&quot; Array [&quot;three&quot;, &quot;two&quot;, &quot;one&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice">slice()</a></h3><p><code>slice()</code> 方法返回一个新的数组对象，这一对象是一个由 <code>begin</code> 和 <code>end</code> 决定的原数组的<strong>浅拷贝</strong>（包括 <code>begin</code>，不包括<code>end</code>）。原始数组不会被改变。（左闭右开）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> animals = [<span class="string">&#x27;ant&#x27;</span>, <span class="string">&#x27;bison&#x27;</span>, <span class="string">&#x27;camel&#x27;</span>, <span class="string">&#x27;duck&#x27;</span>, <span class="string">&#x27;elephant&#x27;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(animals.slice(<span class="number">2</span>)); <span class="comment">// Expected output: Array [&quot;camel&quot;, &quot;duck&quot;, &quot;elephant&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(animals.slice(<span class="number">2</span>, <span class="number">4</span>)); <span class="comment">// Expected output: Array [&quot;camel&quot;, &quot;duck&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(animals.slice(<span class="number">1</span>, <span class="number">10</span>)); <span class="comment">// Expected output: Array [&quot;bison&quot;, &quot;camel&quot;, &quot;duck&quot;, &quot;elephant&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(animals.slice(-<span class="number">2</span>)); <span class="comment">// Expected output: Array [&quot;duck&quot;, &quot;elephant&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(animals.slice(<span class="number">2</span>, -<span class="number">1</span>)); <span class="comment">// Expected output: Array [&quot;camel&quot;, &quot;duck&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(animals.slice()); <span class="comment">// Expected output: Array [&quot;ant&quot;, &quot;bison&quot;, &quot;camel&quot;, &quot;duck&quot;, &quot;elephant&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift">unshift()</a></h3><p>The <code>unshift()</code> method adds one or more elements to the <u>beginning</u> of an array and returns the new length of the array.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array1.unshift(<span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line"><span class="comment">// expected output: 5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array1);</span><br><span class="line"><span class="comment">// expected output: Array [4, 5, 1, 2, 3]</span></span><br></pre></td></tr></table></figure><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="Properties-1"><a href="#Properties-1" class="headerlink" title="Properties"></a>Properties</h2><h3 id="length-1"><a href="#length-1" class="headerlink" title="length"></a>length</h3><p>The <code>length</code> method returns the length of a specified string.</p><p><strong>Note:</strong> The length of an empty string is 0.</p><p><strong>Try it</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> txt = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;</span><br><span class="line">System.out.println(txt.length);<span class="comment">//26</span></span><br></pre></td></tr></table></figure><h2 id="Methods-2"><a href="#Methods-2" class="headerlink" title="Methods"></a>Methods</h2><h3 id="slice-1"><a href="#slice-1" class="headerlink" title="slice()"></a>slice()</h3><p>The <code>slice()</code> method extracts a section of a string and returns it as a new string, without modifying the original string.</p><p><u>左闭右开</u></p><p><strong>Try it</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;The quick brown fox jumps over the lazy dog.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">31</span>));</span><br><span class="line"><span class="comment">// expected output: &quot;the lazy dog.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">4</span>, <span class="number">19</span>));</span><br><span class="line"><span class="comment">// expected output: &quot;quick brown fox&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(-<span class="number">4</span>));</span><br><span class="line"><span class="comment">// expected output: &quot;dog.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(-<span class="number">9</span>, -<span class="number">5</span>));</span><br><span class="line"><span class="comment">// expected output: &quot;lazy&quot;</span></span><br></pre></td></tr></table></figure><h3 id="substring"><a href="#substring" class="headerlink" title="substring()"></a>substring()</h3><p>The <code>substring()</code> method returns the part of the <code>string</code> between the start and end indexes, or to the end of the string.（用法和<code>slice()</code>相似，看例子知用法）</p><p><u>左闭右开</u></p><p><strong>Try it</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> anyString = <span class="string">&quot;Mozilla&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(anyString.substring(<span class="number">0</span>, <span class="number">1</span>)); <span class="comment">// &#x27;M&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(anyString.substring(<span class="number">1</span>, <span class="number">0</span>)); <span class="comment">// &#x27;M&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(anyString.substring(<span class="number">0</span>, <span class="number">6</span>)); <span class="comment">// &#x27;Mozill&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(anyString.substring(<span class="number">4</span>)); <span class="comment">// &#x27;lla&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(anyString.substring(<span class="number">4</span>, <span class="number">7</span>)); <span class="comment">// &#x27;lla&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(anyString.substring(<span class="number">7</span>, <span class="number">4</span>)); <span class="comment">// &#x27;lla&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(anyString.substring(<span class="number">0</span>, <span class="number">7</span>)); <span class="comment">// &#x27;Mozilla&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(anyString.substring(<span class="number">0</span>, <span class="number">10</span>)); <span class="comment">// &#x27;Mozilla&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h3><p>The <code>split()</code> method takes a pattern and divides a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String">String</a> into an ordered list of substrings by searching for the pattern, puts these substrings into an array, and returns the array.</p><p><strong>Try it</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;The quick brown fox jumps over the lazy dog.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> words = str.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(words[<span class="number">3</span>]);</span><br><span class="line"><span class="comment">// expected output: &quot;fox&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chars = str.split(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(chars[<span class="number">8</span>]);</span><br><span class="line"><span class="comment">// expected output: &quot;k&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> strCopy = str.split();</span><br><span class="line"><span class="built_in">console</span>.log(strCopy);</span><br><span class="line"><span class="comment">// expected output: Array [&quot;The quick brown fox jumps over the lazy dog.&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="startsWith"><a href="#startsWith" class="headerlink" title="startsWith()"></a>startsWith()</h3><p>The <code>startsWith()</code> method determines whether a string begins with the characters of a specified string, returning <code>true</code> or <code>false</code> as appropriate.</p><p><strong>Syntax</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">startsWith(searchString);</span><br><span class="line">startsWith(searchString, position);</span><br></pre></td></tr></table></figure><p><code>searchString</code>: The characters to be searched for at the start of this string. Cannot be a regex（正则表达式）.</p><p><code>position</code> (optional): The start position at which <code>searchString</code> is expected to be found (the index of <code>searchString</code>&#39;s first character). Defaults to <code>0</code>.</p><p><strong>Try it</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;To be, or not to be, that is the question.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">&quot;To be&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">&quot;not to be&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(str.startsWith(<span class="string">&quot;not to be&quot;</span>, <span class="number">10</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="endsWith"><a href="#endsWith" class="headerlink" title="endsWith()"></a>endsWith()</h3><p>The <strong><code>endsWith()</code></strong> method determines whether a string ends with the characters of a specified string, returning <code>true</code> or <code>false</code> as appropriate.（用法和<code>starsWith()</code>相似，不多说）</p><p><strong>Try it</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str1 = <span class="string">&quot;Cats are the best!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str1.endsWith(<span class="string">&quot;best!&quot;</span>));</span><br><span class="line"><span class="comment">// expected output: true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str1.endsWith(<span class="string">&quot;best&quot;</span>, <span class="number">17</span>));</span><br><span class="line"><span class="comment">// expected output: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> str2 = <span class="string">&quot;Is this a question?&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str2.endsWith(<span class="string">&quot;question&quot;</span>));</span><br><span class="line"><span class="comment">// expected output: false</span></span><br></pre></td></tr></table></figure><h3 id="trim"><a href="#trim" class="headerlink" title="trim()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim">trim()</a></h3><p>The <code>trim()</code> method <u>removes whitespace from both ends</u> of a string and returns a new string, without modifying the original string.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> greeting = <span class="string">&#x27;   Hello world!   &#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(greeting);</span><br><span class="line"><span class="comment">// Expected output: &quot;   Hello world!   &quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(greeting.trim());</span><br><span class="line"><span class="comment">// Expected output: &quot;Hello world!&quot;;</span></span><br></pre></td></tr></table></figure><h3 id="filter-1"><a href="#filter-1" class="headerlink" title="filter()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">filter()</a></h3><p>The <code>filter()</code> method creates a <a href="https://developer.mozilla.org/en-US/docs/Glossary/Shallow_copy">shallow copy</a> of a portion of a given array, filtered down to just the elements from the given array that pass the test implemented by the provided function.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> words = [<span class="string">&#x27;spray&#x27;</span>, <span class="string">&#x27;limit&#x27;</span>, <span class="string">&#x27;elite&#x27;</span>, <span class="string">&#x27;exuberant&#x27;</span>, <span class="string">&#x27;destruction&#x27;</span>, <span class="string">&#x27;present&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = words.filter(<span class="function"><span class="params">word</span> =&gt;</span> word.length &gt; <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// Expected output: Array [&quot;exuberant&quot;, &quot;destruction&quot;, &quot;present&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="replace"><a href="#replace" class="headerlink" title="replace()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace">replace()</a></h3><p><code>replace()</code> 根据规则将字符串中某部分替换成新内容，并返回新字符串。</p><p>语法：<code>replace(substr|regexp, newSubStr|function)</code></p><p>第一个参数是要被替换的老字符串，或者正则表达式，记得用斜线 / 围上，后面可以加 g 或者 i 或者 gi，代表全局匹配、忽略大小写。</p><p>第二个参数是新字符串，或者函数，该函数返回着将替换掉第一个参数匹配到对结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="string">&#x27;The quick brown fox jumps over the lazy dog. If the dog reacted, was it really lazy?&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(p.replace(<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;monkey&#x27;</span>));</span><br><span class="line"><span class="comment">// Expected output: &quot;The quick brown fox jumps over the lazy monkey. If the dog reacted, was it really lazy?&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/Dog/gi</span>;</span><br><span class="line"><span class="built_in">console</span>.log(p.replace(regex, <span class="string">&#x27;ferret&#x27;</span>));</span><br><span class="line"><span class="comment">// Expected output: &quot;The quick brown fox jumps over the lazy ferret. If the dog reacted, was it really lazy?&quot;</span></span><br></pre></td></tr></table></figure><h1 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h1><h2 id="Methods-3"><a href="#Methods-3" class="headerlink" title="Methods"></a>Methods</h2><h3 id="querySelector"><a href="#querySelector" class="headerlink" title="querySelector()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector">querySelector()</a></h3><p>The <code>Document</code> method <code>querySelector()</code> returns the first <code>Element</code> within the document that matches the specified selector, or group of selectors. If no matches are found, <code>null</code> is returned.</p><p>例如：</p><p><code>const el = document.querySelector(&quot;.myclass&quot;);</code></p><h3 id="querySelectorAll"><a href="#querySelectorAll" class="headerlink" title="querySelectorAll()"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll">querySelectorAll()</a></h3><p>The Document method <code>querySelectorAll()</code> returns a static (not live) <code>NodeList</code> representing a list of the document&#39;s elements that match the specified group of selectors.</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> matches1 = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;p&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> matches2 = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;div.note, div.alert&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>后者是返回所有满足 .note 或者 .alert 的元素列表</p></blockquote><h1 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h1><h2 id="Properties-2"><a href="#Properties-2" class="headerlink" title="Properties"></a>Properties</h2><h3 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a><a href="https://www.w3schools.com/jsref/prop_html_innerhtml.asp">innerHTML</a></h3><p>The <code>Element</code> property <code>innerHTML</code> <u>gets</u> or <u>sets</u> the HTML or XML markup contained within the element.</p><h4 id="get-HTML"><a href="#get-HTML" class="headerlink" title="get HTML"></a>get HTML</h4><p>Reading <code>innerHTML</code> causes the user agent to serialize the HTML or XML fragment comprised of the element&#39;s descendants. The resulting <u>string</u> is returned.</p><p><code>let contents = element.innerHTML;</code></p><h4 id="set-HTML"><a href="#set-HTML" class="headerlink" title="set HTML"></a>set HTML</h4><p><code>element.innerHTML = contents;</code></p><h3 id="innerText"><a href="#innerText" class="headerlink" title="innerText"></a><a href="https://www.w3schools.com/jsref/prop_node_innertext.asp">innerText</a></h3><p><code>innerText</code> 属性表示一个节点及其后代的“渲染”文本内容。</p><h4 id="get-Text"><a href="#get-Text" class="headerlink" title="get Text"></a>get Text</h4><p><code>let text = element.innerText;</code></p><h4 id="set-Text"><a href="#set-Text" class="headerlink" title="set Text"></a>set Text</h4><p><code>element.innerText = text</code></p><h3 id="textContent"><a href="#textContent" class="headerlink" title="textContent"></a>textContent</h3><p>DITTO</p><p>但 <code>textContent</code> 和 <code>innerText</code> 区别是：</p><p><code>innerText</code> 属性是一个非标准属性，它返回元素及其子元素中的渲染文本内容，它不考虑样式的影响并忽略空白符号。由于这个属性是非标准的，因此不是所有浏览器都支持它，也可能在将来被废弃。</p><p><code>textContent</code> 属性返回元素及其子元素中的所有文本内容，包括空白字符和隐藏元素中的文本，但不考虑样式的影响。这个属性在所有现代浏览器中都得到支持，并且是标准属性。</p><h1 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h1><h2 id="Properties-3"><a href="#Properties-3" class="headerlink" title="Properties"></a>Properties</h2><h3 id="scrollY"><a href="#scrollY" class="headerlink" title="scrollY"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY">scrollY</a></h3><p>The read-only <code>scrollY</code> property of the <code>Window</code> interface returns the number of pixels that the <u>document is currently scrolled vertically</u>.</p><p><strong>Syntax</strong>: <code>window.scrollY</code></p><h3 id="scrollX"><a href="#scrollX" class="headerlink" title="scrollX"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollX">scrollX</a></h3><p>DITTO</p><h3 id="innerHeight"><a href="#innerHeight" class="headerlink" title="innerHeight"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight">innerHeight</a></h3><p>The read-only <code>innerHeight</code> property of the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window"><code>Window</code></a> interface returns the <u>interior height of the window</u> in pixels, including the height of the horizontal scroll bar, if present.</p><h3 id="innerwidth"><a href="#innerwidth" class="headerlink" title="innerwidth"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth">innerwidth</a></h3><p>DITTO</p><h3 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h3><p>The <strong>localStorage</strong> read-only property of the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window">window</a> interface allows you to access a <a href="https://developer.mozilla.org/en-US/docs/Web/API/Storage">Storage</a> object for the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document">Document</a>&#39;s <a href="https://developer.mozilla.org/en-US/docs/Glossary/Origin">origin</a>; the stored data is saved across browser sessions.</p><p><code>localStorage</code> is similar to <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage">sessionStorage</a>, except that while <code>localStorage</code> data has no expiration time, <code>sessionStorage</code> data gets cleared when the page session ends — that is when the page is closed. (<code>localStorage</code> data for a document loaded in a &quot;private browsing&quot; or &quot;incognito&quot;（无痕浏览） session is cleared when the last &quot;private&quot; tab is closed.)</p><h4 id="setItem"><a href="#setItem" class="headerlink" title="setItem()"></a>setItem()</h4><p>The following snippet accesses the current domain&#39;s local <a href="https://developer.mozilla.org/en-US/docs/Web/API/Storage">Storage</a> object and adds a data item to it using <a href="https://developer.mozilla.org/en-US/docs/Web/API/Storage/setItem">Storage.setItem()</a>.</p><p><code>localStorage.setItem(&#39;key&#39;, value);</code></p><blockquote><p><strong>Note</strong>:</p><p><strong>value</strong> must be a <u>string</u>, so if you have a more complex value like an <u>array</u> or <u>object</u> to save, you&#39;ll need to use: <code>JSON.stringify(value)</code></p><p>It can turn that array or object into a stringified version or rather a JSON version that can be saved in local storage.</p><p>On the contrary, we can use <code>JSON.parse()</code> to turn the stringified array back into a real JS array.</p></blockquote><h4 id="getItem"><a href="#getItem" class="headerlink" title="getItem()"></a>getItem()</h4><p>The syntax for reading the <code>localStorage</code> item is as follows:</p><p><code>const cat = localStorage.getItem(&#39;key&#39;);</code></p><h4 id="removeItem"><a href="#removeItem" class="headerlink" title="removeItem()"></a>removeItem()</h4><p>The syntax for removing the <code>localStorage</code> item is as follows:</p><p><code>localStorage.removeItem(&#39;key&#39;);</code></p><h4 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h4><p>The syntax for removing all the <code>localStorage</code> items is as follows:</p><p><code>localStorage.clear();</code></p><h2 id="Methods-4"><a href="#Methods-4" class="headerlink" title="Methods"></a>Methods</h2><h3 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval()"></a><a href="https://www.w3schools.com/jsref/met_win_setinterval.asp">setInterval()</a></h3><p>The <code>setInterval()</code> method calls a function at specified intervals (in milliseconds).</p><p>The <code>setInterval()</code> method continues calling the function until <code>clearInterval()</code> is called, or the window is closed.</p><p><strong>Syntax</strong>: <code>setInterval(function, milliseconds, param1, param2, ...)</code></p><p><code>param</code> is optional, which can be passed to the function.</p><p>The <strong>return value</strong> of <code>setInterval()</code> is the Id of the timer. We can use <code>clearInterval(Id)</code> to cancel the timer.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myInterval = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;demo&quot;</span>).innerHTML = date.toLocaleTimeString();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="built_in">clearInterval</span>(myInterval);</span><br></pre></td></tr></table></figure><h3 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout()"></a><a href="https://www.w3schools.com/jsref/met_win_settimeout.asp">setTimeout()</a></h3><p>The <code>setTimeout()</code> method calls a function after a number of milliseconds.</p><p><strong>Syntax</strong>: <code>setTimeout(function, milliseconds, param1, param2, ...)</code></p><p><code>param</code> is optional, which can be passed to the function.</p><p>The <strong>return value</strong> of <code>setTimeout()</code> is also the Id of the timer.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myTimeout = <span class="built_in">setTimeout</span>(myGreeting, <span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">clearTimeout</span>(myTimeout);</span><br></pre></td></tr></table></figure><h3 id="scrollTo"><a href="#scrollTo" class="headerlink" title="scrollTo()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/scrollTo">scrollTo()</a></h3><p>The <code>scrollTo()</code> method scrolls the document to specified coordinates（坐标）.</p><p><strong>Syntax</strong>: scrollTo(x-coord, y-coord)</p><ul><li><code>x-coord</code> 是文档中的横轴坐标。</li><li><code>y-coord</code> 是文档中的纵轴坐标。</li></ul><p><strong>Syntax</strong>: scrollTo(options)</p><p><code>options</code> 是一个包含三个属性的对象：</p><ol><li><code>top</code> 等同于 <code>y-coord</code></li><li><code>left</code> 等同于 <code>x-coord</code></li><li><code>behavior</code> 类型 String，表示滚动行为，支持参数 smooth(平滑滚动),instant(瞬间滚动),默认值 auto</li></ol><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">element.scrollTo(<span class="number">0</span>, <span class="number">1000</span>);</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">element.scrollTo(&#123;</span><br><span class="line">  top: <span class="number">100</span>,</span><br><span class="line">  left: <span class="number">100</span>,</span><br><span class="line">  behavior: <span class="string">&#x27;smooth&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><div style="text-align:center;background:var(--harris-card-bg);border-radius:12px"><p style="color:#ce6a28;font-size:24px;display:inline-block;margin:6px 0">☕欲知后事如何，</p><p style="color:#a8c212;font-size:24px;display:inline-block;margin:6px 0">且听下回分解🍵</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;我很早学过，只是当时没有系统记录笔记，导致过一段时就容易忘记很多东西。本笔记主要参考&lt;a href=&quot;https://web.qianguyihao.com/04-JavaScript%E5%9F%BA%E7%A1%80/00-%E7%BC%96%</summary>
      
    
    
    
    <category term="📕知识笔记" scheme="https://blog.harriswong.top/categories/%F0%9F%93%95%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="📝前端" scheme="https://blog.harriswong.top/tags/%F0%9F%93%9D%E5%89%8D%E7%AB%AF/"/>
    
    <category term="📐JavaScript" scheme="https://blog.harriswong.top/tags/%F0%9F%93%90JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS学习笔记</title>
    <link href="https://blog.harriswong.top/posts/1822a0ce/"/>
    <id>https://blog.harriswong.top/posts/1822a0ce/</id>
    <published>2022-11-22T20:00:00.000Z</published>
    <updated>2023-03-06T18:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我很早学过，只是当时没有系统记录笔记，导致过一段时就容易忘记很多东西。本笔记主要参考 <a href="https://web.qianguyihao.com/02-CSS%E5%9F%BA%E7%A1%80/01-CSS%E5%B1%9E%E6%80%A7%EF%BC%9A%E5%AD%97%E4%BD%93%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%87%E6%9C%AC%E5%B1%9E%E6%80%A7.html#%E6%9C%AC%E6%96%87%E9%87%8D%E8%A6%81%E5%86%85%E5%AE%B9">CSS 基础&amp;进阶-千古前端图文教程</a>，<a href="https://www.w3schools.com/css/">W3C School - CSS</a>，<a href="https://developer.mozilla.org/en-US/docs/Web/CSS">MDN web docs - CSS</a></p></blockquote><h1 id="Selectors-选择器"><a href="#Selectors-选择器" class="headerlink" title="Selectors 选择器"></a>Selectors 选择器</h1><h2 id="Basic-selectors"><a href="#Basic-selectors" class="headerlink" title="Basic selectors"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors#basic_selectors">Basic selectors</a></h2><h3 id="Universal-selector"><a href="#Universal-selector" class="headerlink" title="Universal selector"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Universal_selectors">Universal selector</a></h3><p>Syntax: *</p><h3 id="Type-selector"><a href="#Type-selector" class="headerlink" title="Type selector"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors">Type selector</a></h3><p>Syntax: elementname</p><h3 id="Class-selector"><a href="#Class-selector" class="headerlink" title="Class selector"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Class_selectors">Class selector</a></h3><p>Syntax: .classname</p><h3 id="ID-selector"><a href="#ID-selector" class="headerlink" title="ID selector"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/ID_selectors">ID selector</a></h3><p>Syntax: #idname</p><h3 id="Attribute-selector"><a href="#Attribute-selector" class="headerlink" title="Attribute selector"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors">Attribute selector</a></h3><p>Syntax: [attr]、[attr=value]、[attr~=value]、[attr|=value]、[attr^=value]、[attr$=value]、[attr*=value]</p><h2 id="Grouping-selectors"><a href="#Grouping-selectors" class="headerlink" title="Grouping selectors"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors#grouping_selectors">Grouping selectors</a></h2><h3 id="Selector-list"><a href="#Selector-list" class="headerlink" title="Selector list"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Selector_list">Selector list</a></h3><p>Syntax: A, B</p><h3 id="Child-combinator"><a href="#Child-combinator" class="headerlink" title="Child combinator"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Child_combinator">Child combinator</a></h3><p>Syntax: A &gt; B</p><h3 id="General-sibling-combinator"><a href="#General-sibling-combinator" class="headerlink" title="General sibling combinator"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/General_sibling_combinator">General sibling combinator</a></h3><p>Syntax: A ~ B</p><h3 id="Adjacent-sibling-combinator"><a href="#Adjacent-sibling-combinator" class="headerlink" title="Adjacent sibling combinator"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Adjacent_sibling_combinator">Adjacent sibling combinator</a></h3><p>Syntax: A + B</p><h1 id="Value-值"><a href="#Value-值" class="headerlink" title="Value 值"></a>Value 值</h1><h2 id="max-content"><a href="#max-content" class="headerlink" title="max-content"></a>max-content</h2><p>The <code>max-content</code> sizing keyword represents the intrinsic maximum width or height of the content. For text content this means that the content will not wrap at all even if it causes overflows. 人话说就是内容的最大宽度。</p><h1 id="Property-属性"><a href="#Property-属性" class="headerlink" title="Property 属性"></a>Property 属性</h1><h2 id="background"><a href="#background" class="headerlink" title="background"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background">background</a></h2><p>This property is a shorthand for the following CSS properties:</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-attachment">background-attachment</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip">background-clip</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-color">background-color</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-image">background-image</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-origin">background-origin</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-position">background-position</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat">background-repeat</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-size">background-size</a></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-color</span>: &lt;<span class="selector-tag">color</span>&gt;;</span><br><span class="line">background-image: none | &lt;url&gt;;</span><br><span class="line">background-repeat: repeat | repeat-x | repeat-y | no-repeat;</span><br><span class="line">background-position: center center | top left | top center | top right | center left | center right | bottom left | bottom center | bottom right | &lt;percentage&gt; &lt;percentage&gt; | &lt;length&gt; &lt;length&gt;;</span><br><span class="line">background-size: auto | cover | contain | &lt;percentage&gt; &lt;percentage&gt; | &lt;length&gt; &lt;length&gt; | &lt;length&gt; auto | auto &lt;length&gt; | &lt;length&gt;;</span><br><span class="line">background-attachment: scroll | fixed | local;</span><br><span class="line">background-clip: border-box | padding-box | content-box;</span><br><span class="line">background-origin: border-box | padding-box | content-box;</span><br></pre></td></tr></table></figure><p><strong>Syntax</strong>: <code>background: [color] [image] [repeat] [attachment] [position] / [size] [origin] [clip];</code></p><p><strong>Example</strong>: <code>background: #f1f1f1 url(&quot;img_hotgirl.png&quot;) no-repeat right top / 150px 100px content-box border-box;</code></p><h2 id="inset"><a href="#inset" class="headerlink" title="inset"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/inset">inset</a></h2><p>The <code>inset</code> CSS property is a <strong>shorthand</strong> that corresponds to the <code>top</code>, <code>right</code>, <code>bottom</code>, and/or <code>left</code> properties. It has the same multi-value syntax of the margin shorthand.</p><h2 id="text-align"><a href="#text-align" class="headerlink" title="text-align"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/text-align">text-align</a></h2><p>The <code>text-align</code> CSS property sets the horizontal alignment of the inline-level content inside a block element or table-cell box. This means it works like <code>vertical-align</code> but in a horizontal direction.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">text-align</span>: <span class="selector-tag">start</span>;</span><br><span class="line"><span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>;</span><br><span class="line"><span class="selector-tag">text-align</span>: <span class="selector-tag">end</span>;</span><br><span class="line"><span class="selector-tag">text-align</span>: <span class="selector-tag">justify</span>; <span class="comment">/* 两端对齐 */</span></span><br></pre></td></tr></table></figure><h2 id="text-transform"><a href="#text-transform" class="headerlink" title="text-transform"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/text-transform">text-transform</a></h2><p>The <code>text-transform</code> CSS property specifies how to capitalize an element&#39;s text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">text-transform</span>: <span class="selector-tag">capitalize</span>;</span><br><span class="line"><span class="selector-tag">text-transform</span>: <span class="selector-tag">uppercase</span>;</span><br><span class="line"><span class="selector-tag">text-transform</span>: <span class="selector-tag">lowercase</span>;</span><br></pre></td></tr></table></figure><h2 id="resize"><a href="#resize" class="headerlink" title="resize"></a>resize</h2><p>可以用resize来控制 textarea 的缩放行为。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">resize</span>: vertical;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Pseudo-classes-伪类"><a href="#Pseudo-classes-伪类" class="headerlink" title="Pseudo-classes 伪类"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes">Pseudo-classes 伪类</a></h1><p>A CSS <strong>pseudo-class</strong> is a keyword added to a selector that specifies a <u>special state</u> of the selected element(s). For example, the pseudo-class <code>:hover</code> can be used to select a button when a user&#39;s pointer hovers over the button and this selected button can then be styled.</p><h2 id="focus"><a href="#focus" class="headerlink" title=":focus"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:focus">:focus</a></h2><p>The <code>:focus</code> represents an element (such as a form input) that has received focus. It is generally triggered when the user clicks or taps on an element or selects it with the keyboard&#39;s Tab key.</p><h1 id="Pseudo-elements-伪元素"><a href="#Pseudo-elements-伪元素" class="headerlink" title="Pseudo-elements 伪元素"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements">Pseudo-elements 伪元素</a></h1><p>A CSS <strong>pseudo-element</strong> is a keyword added to a selector that lets you style a <u>specific part</u> of the selected element(s). For example, <code>::first-line</code> can be used to change the font of the first line of a paragraph.</p><h2 id="after"><a href="#after" class="headerlink" title="::after"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::after">::after</a></h2><p><code>::after</code> creates a pseudo-element that is the <u>last child of the selected element</u>. It is often used to add cosmetic content（装饰性内容）to an element with the <code>content</code> property. It is inline by default.</p><p>比如下例就是给一段文字右侧加上一个好的标志：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.good-text</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot; &lt;- GOOD!&quot;</span>;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="before"><a href="#before" class="headerlink" title="::before"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::before">::before</a></h2><p>同上，一般常见用法是在链接前加上一个🔗符号。</p><h1 id="At-rules"><a href="#At-rules" class="headerlink" title="At-rules @"></a>At-rules @</h1><h2 id="media"><a href="#media" class="headerlink" title="@media"></a>@media</h2><p>The <code>@media</code> rule is used in media queries to apply different styles for different media types/devices.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">900px</span>) &#123;</span><br><span class="line">  ...;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">320px</span>) <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">480px</span>) &#123;</span><br><span class="line">  ...;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (height &gt; <span class="number">600px</span>) &#123;</span><br><span class="line">  ...;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="number">400px</span> &lt;= width &lt;= <span class="number">700px</span>) &#123;</span><br><span class="line">  ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Units-单位"><a href="#Units-单位" class="headerlink" title="Units 单位"></a>Units 单位</h1><h2 id="rem-em"><a href="#rem-em" class="headerlink" title="rem, em"></a><a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units#:~:text=what%20you%20get.-,ems%20and%20rems,-em%20and%20rem">rem, em</a></h2><p><code>em</code> and <code>rem</code> are the two relative lengths you are likely to encounter most frequently when sizing anything from boxes to text.</p><p>The <code>em</code> unit means &quot;my <strong>parent</strong> element&#39;s font-size&quot;. Each successive level of nesting gets progressively larger, as each has its font size set to <code>1.3em</code> — 1.3 times its parent&#39;s font size.</p><p>The <code>rem</code> unit means &quot;The <strong>root</strong> element&#39;s font-size&quot;. This means that each successive level of nesting does not keep getting larger.</p><p>However, if you change the <code>&lt;html&gt;</code> element&#39;s <code>font-size</code> in the CSS you will see that everything else changes relative to it — both <code>rem</code>- and <code>em</code>-sized text.</p><p>简而言之，em 是父亲元素的相对大小，rem 是根结点元素的相对大小。</p><h2 id="fr"><a href="#fr" class="headerlink" title="fr"></a>fr</h2><p>这个单位专门为 grid 设计。The new <code>fr</code> unit represents a fraction of the available space in the grid container.</p><p>The following grid definition would create three equal-width tracks that grow and shrink according to the available space.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>One<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Three<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Four<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Five<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Flex"><a href="#Flex" class="headerlink" title="Flex"></a>Flex</h1><h2 id="Flex-Container"><a href="#Flex-Container" class="headerlink" title="Flex Container"></a>Flex Container</h2><p>The flex container becomes flexible by setting the <code>display</code> property to <code>flex</code>:</p><p><strong>Example</strong>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The flex container properties are:</p><table><thead><tr><th align="left">Property</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3schools.com/cssref/css3_pr_flex-direction.asp">flex-direction</a></td><td align="left">Specifies the direction of the flexible items inside a flex container</td></tr><tr><td align="left"><a href="https://www.w3schools.com/cssref/css3_pr_flex-wrap.asp">flex-wrap</a></td><td align="left">Specifies whether the flex items should wrap or not, if there is not enough room for them on one flex line</td></tr><tr><td align="left"><a href="https://www.w3schools.com/cssref/css3_pr_flex-flow.asp">flex-flow</a></td><td align="left">A shorthand property for flex-direction and flex-wrap</td></tr><tr><td align="left"><a href="https://www.w3schools.com/cssref/css3_pr_justify-content.asp">justify-content</a></td><td align="left">Horizontally aligns the flex items when the items do not use all available space on the main-axis</td></tr><tr><td align="left"><a href="https://www.w3schools.com/cssref/css3_pr_align-items.asp">align-items</a></td><td align="left">Vertically aligns the flex items when the items do not use all available space on the cross-axis</td></tr><tr><td align="left"><a href="https://www.w3schools.com/cssref/css3_pr_align-content.asp">align-content</a></td><td align="left">Modifies the behavior of the flex-wrap property. It is similar to align-items, but instead of aligning flex items, it aligns flex lines</td></tr><tr><td align="left"><a href="https://www.w3schools.com/cssref/pr_class_display.asp">display</a></td><td align="left">Specifies the type of box used for an HTML element</td></tr></tbody></table><h3 id="Property-flex-direction"><a href="#Property-flex-direction" class="headerlink" title="Property: flex-direction"></a>Property: flex-direction</h3><p>The <code>flex-direction</code> property defines in which direction the container wants to stack（堆叠） the flex items.</p><h4 id="Value-column"><a href="#Value-column" class="headerlink" title="Value: column"></a>Value: column</h4><p>The <code>column</code> value stacks the flex items vertically (from top to bottom)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Value-column-reverse"><a href="#Value-column-reverse" class="headerlink" title="Value: column-reverse"></a>Value: column-reverse</h4><p>The <code>column-reverse</code> value stacks the flex items vertically (but from bottom to top)</p><h4 id="Value-row-default"><a href="#Value-row-default" class="headerlink" title="Value: row (default)"></a>Value: row (default)</h4><p>The <code>row</code> value stacks the flex items horizontally (from left to right)</p><h4 id="Value-row-reverse"><a href="#Value-row-reverse" class="headerlink" title="Value: row-reverse"></a>Value: row-reverse</h4><p>The <code>row-reverse</code> value stacks the flex items horizontally (but from right to left)</p><h3 id="Property-flex-wrap"><a href="#Property-flex-wrap" class="headerlink" title="Property: flex-wrap"></a>Property: flex-wrap</h3><p>The <code>flex-wrap</code> property specifies whether the flex items should wrap or not.</p><h4 id="Value-wrap"><a href="#Value-wrap" class="headerlink" title="Value: wrap"></a>Value: wrap</h4><p>The <code>wrap</code> value specifies that the flex items will wrap if necessary:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Value-nowrap-default"><a href="#Value-nowrap-default" class="headerlink" title="Value: nowrap (default)"></a>Value: nowrap (default)</h4><p>The <code>nowrap</code> value specifies that the flex items will not wrap (this is default)</p><h4 id="Value-wrap-reverse"><a href="#Value-wrap-reverse" class="headerlink" title="Value: wrap-reverse"></a>Value: wrap-reverse</h4><p>The <code>wrap-reverse</code> value specifies that the flexible items will wrap if necessary, in reverse order.</p><h3 id="Property-flex-flow"><a href="#Property-flex-flow" class="headerlink" title="Property: flex-flow"></a>Property: flex-flow</h3><p>The <code>flex-flow</code> property is a shorthand（速记，简单表达方式） property for setting both the <code>flex-direction</code> and <code>flex-wrap</code> properties.</p><p><strong>Example</strong>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-flow</span>: row wrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Property-justify-content"><a href="#Property-justify-content" class="headerlink" title="Property: justify-content"></a>Property: justify-content</h3><p>The <code>justify-content</code> property is used to align the flex items <strong>horizontally</strong>.</p><h4 id="Value-center"><a href="#Value-center" class="headerlink" title="Value: center"></a>Value: center</h4><p>The <code>center</code> value aligns the flex items at the center of the container:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Value-flex-start-default"><a href="#Value-flex-start-default" class="headerlink" title="Value: flex-start (default)"></a>Value: flex-start (default)</h4><p>The <code>flex-start</code> value aligns the flex items at the beginning of the container (this is default)</p><h4 id="Value-flex-end"><a href="#Value-flex-end" class="headerlink" title="Value: flex-end"></a>Value: flex-end</h4><p>The <code>flex-end</code> value aligns the flex items at the end of the container</p><h4 id="Value-space-around"><a href="#Value-space-around" class="headerlink" title="Value: space-around"></a>Value: space-around</h4><p>The <code>space-around</code> value displays the flex items with space before, between, and after the lines.</p><h4 id="Value-space-between"><a href="#Value-space-between" class="headerlink" title="Value: space-between"></a>Value: space-between</h4><p>The <code>space-between</code> value displays the flex items with space between the lines.</p><h3 id="Property-align-items"><a href="#Property-align-items" class="headerlink" title="Property: align-items"></a>Property: align-items</h3><p>The <code>align-items</code> property is used to align（对齐，使成一条线） the flex items <strong>vertically</strong>.</p><h4 id="Value-center-1"><a href="#Value-center-1" class="headerlink" title="Value: center"></a>Value: center</h4><p>The <code>center</code> value aligns the flex items in the middle of the container:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在 Flex 容器里的图片尺寸会有点拉伸，加上<code>align-items: center;</code>即可</p></blockquote><h4 id="Value-flex-start"><a href="#Value-flex-start" class="headerlink" title="Value: flex-start"></a>Value: flex-start</h4><p>The <code>flex-start</code> value aligns the flex items at the top of the container.</p><h4 id="Value-flex-end-1"><a href="#Value-flex-end-1" class="headerlink" title="Value: flex-end"></a>Value: flex-end</h4><p>The <code>flex-end</code> value aligns the flex items at the bottom of the container.</p><h4 id="Value-stretch"><a href="#Value-stretch" class="headerlink" title="Value: stretch"></a>Value: stretch</h4><p>The <code>stretch</code> value stretches the flex items to fill the container (this is default). If you set it a height, it won&#39;t fill the container.</p><h4 id="Value-baseline"><a href="#Value-baseline" class="headerlink" title="Value: baseline"></a>Value: baseline</h4><p>The <code>baseline</code> value aligns the flex items such as their baselines aligns.</p><h3 id="Property-align-content"><a href="#Property-align-content" class="headerlink" title="Property: align-content"></a>Property: align-content</h3><p>The <code>align-content</code> property is used to align the flex lines.</p><h4 id="Value-space-between-1"><a href="#Value-space-between-1" class="headerlink" title="Value: space-between"></a>Value: space-between</h4><p>The <code>space-between</code> value displays the flex lines with equal space between them:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">align-content</span>: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Value-space-around-1"><a href="#Value-space-around-1" class="headerlink" title="Value: space-around"></a>Value: space-around</h4><p>The <code>space-around</code> value displays the flex lines with space before, between, and after them.</p><h4 id="Value-stretch-1"><a href="#Value-stretch-1" class="headerlink" title="Value: stretch"></a>Value: stretch</h4><p>The <code>stretch</code> value stretches the flex lines to take up the remaining space (this is default).</p><h4 id="Value-center-2"><a href="#Value-center-2" class="headerlink" title="Value: center"></a>Value: center</h4><p>The <code>center</code> value displays display the flex lines in the middle of the container.</p><h4 id="Value-flex-start-1"><a href="#Value-flex-start-1" class="headerlink" title="Value: flex-start"></a>Value: flex-start</h4><p>The <code>flex-start</code> value displays the flex lines at the start of the container.</p><h4 id="Value-flex-end-2"><a href="#Value-flex-end-2" class="headerlink" title="Value: flex-end"></a>Value: flex-end</h4><p>The <code>flex-end</code> value displays the flex lines at the end of the container.</p><h2 id="Flex-Items"><a href="#Flex-Items" class="headerlink" title="Flex Items"></a>Flex Items</h2><p>The following table lists all the CSS Flexbox Items properties:</p><table><thead><tr><th align="left">Property</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3schools.com/cssref/css3_pr_order.asp">order</a></td><td align="left">Specifies the order of the flex items inside the same container</td></tr><tr><td align="left"><a href="https://www.w3schools.com/cssref/css3_pr_flex-grow.asp">flex-grow</a></td><td align="left">Specifies how much a flex item will grow relative to the rest of the flex items inside the same container</td></tr><tr><td align="left"><a href="https://www.w3schools.com/cssref/css3_pr_flex-shrink.asp">flex-shrink</a></td><td align="left">Specifies how much a flex item will shrink relative to the rest of the flex items inside the same container</td></tr><tr><td align="left"><a href="https://www.w3schools.com/cssref/css3_pr_flex-basis.asp">flex-basis</a></td><td align="left">Specifies the initial length of a flex item</td></tr><tr><td align="left"><a href="https://www.w3schools.com/cssref/css3_pr_flex.asp">flex</a></td><td align="left">A shorthand property for the flex-grow, flex-shrink, and the flex-basis properties</td></tr><tr><td align="left"><a href="https://www.w3schools.com/cssref/css3_pr_align-self.asp">align-self</a></td><td align="left">Specifies the alignment for a flex item (overrides the flex container&#39;s align-items property)</td></tr></tbody></table><h3 id="Property-order"><a href="#Property-order" class="headerlink" title="Property: order"></a>Property: order</h3><p>The <code>order</code> property specifies the order of the flex items.</p><p>The order value must be a <strong>number</strong>, default value is <strong>0</strong>.</p><p><strong>Example</strong>:</p><p>The <code>order</code> property can change the order of the flex items:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;flex-container&quot;&gt;</span><br><span class="line">  &lt;div style=&quot;order: 3&quot;&gt;1&lt;/div&gt;</span><br><span class="line">  &lt;div style=&quot;order: 2&quot;&gt;2&lt;/div&gt;</span><br><span class="line">  &lt;div style=&quot;order: 4&quot;&gt;3&lt;/div&gt;</span><br><span class="line">  &lt;div style=&quot;order: 1&quot;&gt;4&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="Property-flex-grow"><a href="#Property-flex-grow" class="headerlink" title="Property: flex-grow"></a>Property: flex-grow</h3><p>The <code>flex-grow</code> property specifies how much a flex item will grow relative to the rest of the flex items.（相当于给 item 加上宽度权重，权重越大，宽度等比变大）</p><p>The value must be a <strong>number</strong>, default value is <strong>0</strong>.（inc. percentage）</p><p><strong>Example</strong>:</p><p>Make the third flex item grow eight times faster than the other flex items:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;flex-container&quot;&gt;</span><br><span class="line">  &lt;div style=&quot;flex-grow: 1&quot;&gt;1&lt;/div&gt;</span><br><span class="line">  &lt;div style=&quot;flex-grow: 1&quot;&gt;2&lt;/div&gt;</span><br><span class="line">  &lt;div style=&quot;flex-grow: 8&quot;&gt;3&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="Property-flex-shrink"><a href="#Property-flex-shrink" class="headerlink" title="Property: flex-shrink"></a>Property: flex-shrink</h3><p>The <code>flex-shrink</code> property specifies how much a flex item will shrink relative to the rest of the flex items.</p><p>The value must be a <strong>number</strong>, default value is <strong>1</strong>.</p><p><strong>Example</strong>:</p><p>Do not let the third flex item shrink as much as the other flex items:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;flex-container&quot;&gt;</span><br><span class="line">  &lt;div&gt;1&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;2&lt;/div&gt;</span><br><span class="line">  &lt;div style=&quot;flex-shrink: 0&quot;&gt;3&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;4&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;5&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;6&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;7&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;8&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;9&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;10&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="Property-flex-basis"><a href="#Property-flex-basis" class="headerlink" title="Property: flex-basis"></a>Property: flex-basis</h3><p>The <code>flex-basis</code> property specifies the <u>initial length</u> of a flex item.（这只是初始长度，但随着 items 变多，宽度也会受到一定压缩）</p><p><strong>Example</strong>:</p><p>Set the initial length of the third flex item to 200 pixels:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;flex-container&quot;&gt;</span><br><span class="line">  &lt;div&gt;1&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;2&lt;/div&gt;</span><br><span class="line">  &lt;div style=&quot;flex-basis: 200px&quot;&gt;3&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;4&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="Property-flex"><a href="#Property-flex" class="headerlink" title="Property: flex"></a>Property: flex</h3><p>The <code>flex</code> property is a shorthand property for the <code>flex-grow</code>, <code>flex-shrink</code>, and <code>flex-basis</code> properties.</p><p><strong>Example</strong>:</p><p>Make the third flex item not growable (0), not shrinkable (0), and with an initial length of 200 pixels:（不伸长，也不缩短，始终保持 200px 的宽度）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;flex-container&quot;&gt;</span><br><span class="line">  &lt;div&gt;1&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;2&lt;/div&gt;</span><br><span class="line">  &lt;div style=&quot;flex: 0 0 200px&quot;&gt;3&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;4&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="Property-align-self"><a href="#Property-align-self" class="headerlink" title="Property: align-self"></a>Property: align-self</h3><p>The <code>align-self</code> property specifies the alignment for the selected item inside the flexible container.（针对某个 item，而不是全部）</p><p>The <code>align-self</code> property overrides the default alignment set by the container&#39;s <code>align-items</code> property.</p><p><strong>Example</strong>:</p><p>Align the third flex item in the middle of the container:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;flex-container&quot;&gt;</span><br><span class="line">  &lt;div&gt;1&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;2&lt;/div&gt;</span><br><span class="line">  &lt;div style=&quot;align-self: center&quot;&gt;3&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;4&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="Flex-Responsive-弹性响应"><a href="#Flex-Responsive-弹性响应" class="headerlink" title="Flex Responsive 弹性响应"></a>Flex Responsive 弹性响应</h2><p>For example, if you want to create a two-column layout for most screen sizes, and a one-column layout for small screen sizes (such as phones and tablets), you can change the <code>flex-direction</code> from <code>row</code> to <code>column</code> at a specific breakpoint (800px in the example below):</p><p><strong>Example</strong>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Responsive layout - makes a one column layout instead of a two-column layout */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width:</span> <span class="number">800px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Another way is to change the percentage of the <code>flex</code> property of the flex items to create different layouts for different screen sizes. Note that we also have to include <code>flex-wrap: wrap;</code> on the flex container for this example to work:</p><p><strong>Example</strong>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.flex-item-left</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.flex-item-right</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Responsive layout - makes a one column layout instead of a two-column layout */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width:</span> <span class="number">800px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.flex-item-right</span>,</span><br><span class="line">  <span class="selector-class">.flex-item-left</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Grid"><a href="#Grid" class="headerlink" title="Grid"></a>Grid</h1><p>The CSS Grid Layout Module offers a grid-based layout system, with rows and columns, making it easier to design web pages without having to use floats and positioning.</p><p><strong>All CSS Grid Properties</strong>:</p><table><thead><tr><th align="left">Property</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3schools.com/cssref/css3_pr_column-gap.asp">column-gap</a></td><td align="left">Specifies the gap between the columns</td></tr><tr><td align="left"><a href="https://www.w3schools.com/cssref/css3_pr_gap.asp">gap</a></td><td align="left">A shorthand property for the <em>row-gap</em> and the <em>column-gap</em> properties</td></tr><tr><td align="left"><a href="https://www.w3schools.com/cssref/pr_grid.asp">grid</a></td><td align="left">A shorthand property for the <em>grid-template-rows, grid-template-columns, grid-template-areas, grid-auto-rows, grid-auto-columns</em>, and the <em>grid-auto-flow</em> properties</td></tr><tr><td align="left"><a href="https://www.w3schools.com/cssref/pr_grid-area.asp">grid-area</a></td><td align="left">Either specifies a name for the grid item, or this property is a shorthand property for the <em>grid-row-start</em>, <em>grid-column-start</em>, <em>grid-row-end</em>, and <em>grid-column-end</em> properties</td></tr><tr><td align="left"><a href="https://www.w3schools.com/cssref/pr_grid-auto-columns.asp">grid-auto-columns</a></td><td align="left">Specifies a default column size</td></tr><tr><td align="left"><a href="https://www.w3schools.com/cssref/pr_grid-auto-flow.asp">grid-auto-flow</a></td><td align="left">Specifies how auto-placed items are inserted in the grid</td></tr><tr><td align="left"><a href="https://www.w3schools.com/cssref/pr_grid-auto-rows.asp">grid-auto-rows</a></td><td align="left">Specifies a default row size</td></tr><tr><td align="left"><a href="https://www.w3schools.com/cssref/pr_grid-column.asp">grid-column</a></td><td align="left">A shorthand property for the <em>grid-column-start</em> and the <em>grid-column-end</em> properties</td></tr><tr><td align="left"><a href="https://www.w3schools.com/cssref/pr_grid-column-end.asp">grid-column-end</a></td><td align="left">Specifies where to end the grid item</td></tr><tr><td align="left"><a href="https://www.w3schools.com/cssref/pr_grid-column-gap.asp">grid-column-gap</a></td><td align="left">Specifies the size of the gap between columns</td></tr><tr><td align="left"><a href="https://www.w3schools.com/cssref/pr_grid-column-start.asp">grid-column-start</a></td><td align="left">Specifies where to start the grid item</td></tr><tr><td align="left"><a href="https://www.w3schools.com/cssref/pr_grid-gap.asp">grid-gap</a></td><td align="left">A shorthand property for the <em>grid-row-gap</em> and <em>grid-column-gap</em> properties</td></tr><tr><td align="left"><a href="https://www.w3schools.com/cssref/pr_grid-row.asp">grid-row</a></td><td align="left">A shorthand property for the <em>grid-row-start</em> and the <em>grid-row-end</em> properties</td></tr><tr><td align="left"><a href="https://www.w3schools.com/cssref/pr_grid-row-end.asp">grid-row-end</a></td><td align="left">Specifies where to end the grid item</td></tr><tr><td align="left"><a href="https://www.w3schools.com/cssref/pr_grid-row-gap.asp">grid-row-gap</a></td><td align="left">Specifies the size of the gap between rows</td></tr><tr><td align="left"><a href="https://www.w3schools.com/cssref/pr_grid-row-start.asp">grid-row-start</a></td><td align="left">Specifies where to start the grid item</td></tr><tr><td align="left"><a href="https://www.w3schools.com/cssref/pr_grid-template.asp">grid-template</a></td><td align="left">A shorthand property for the <em>grid-template-rows</em>, <em>grid-template-columns</em> and <em>grid-areas</em> properties</td></tr><tr><td align="left"><a href="https://www.w3schools.com/cssref/pr_grid-template-areas.asp">grid-template-areas</a></td><td align="left">Specifies how to display columns and rows, using named grid items</td></tr><tr><td align="left"><a href="https://www.w3schools.com/cssref/pr_grid-template-columns.asp">grid-template-columns</a></td><td align="left">Specifies the size of the columns, and how many columns in a grid layout</td></tr><tr><td align="left"><a href="https://www.w3schools.com/cssref/pr_grid-template-rows.asp">grid-template-rows</a></td><td align="left">Specifies the size of the rows in a grid layout</td></tr><tr><td align="left"><a href="https://www.w3schools.com/cssref/css3_pr_row-gap.asp">row-gap</a></td><td align="left">Specifies the gap between the grid rows</td></tr></tbody></table><h2 id="Grid-Intro"><a href="#Grid-Intro" class="headerlink" title="Grid Intro"></a>Grid Intro</h2><p>A grid layout consists of a parent element, with one or more child elements. And all direct children of the grid container automatically become <em>grid items</em>.</p><p>An HTML element becomes a grid container when its <code>display</code> property is set to <code>grid</code> or <code>inline-grid</code>.</p><p>Example:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid-container</span> &#123;</span><br><span class="line">  <span class="comment">/*display: grid;*/</span></span><br><span class="line">  <span class="attribute">display</span>: inline-grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Properties-row-gap-column-gap-gap"><a href="#Properties-row-gap-column-gap-gap" class="headerlink" title="Properties: row-gap, column-gap, gap"></a>Properties: row-gap, column-gap, gap</h3><p><strong>Rows</strong>: The horizontal lines of grid items.</p><p><strong>Columns</strong>: The vertical lines of grid items.</p><p><strong>Gaps</strong>: The spaces between each column/row.</p><p>You can adjust the gap size by using one of the following properties:</p><ul><li><code>row-gap</code></li><li><code>column-gap</code></li><li><code>gap</code>: shorthand property for the <code>row-gap</code> and the <code>column-gap</code> properties</li></ul><p><strong>Example</strong>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid-container1</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">row-gap</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grid-container2</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">column-gap</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grid-container3</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">50px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Properties-grid-row-start-grid-row-end-grid-column-start-grid-column-end"><a href="#Properties-grid-row-start-grid-row-end-grid-column-start-grid-column-end" class="headerlink" title="Properties: grid-row-start, grid-row-end, grid-column-start, grid-column-end"></a>Properties: grid-row-start, grid-row-end, grid-column-start, grid-column-end</h3><p><strong>Row lines</strong>: The lines between rows.</p><p><strong>Column lines</strong>: The lines between columns.</p><p>Refer to line numbers when placing a grid item in a grid container.</p><p><strong>Example</strong>:</p><p>Place a grid item at row line 1 and column line 1, and let it end on row line 3 and column line 3:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-row-start</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-row-end</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Grid-Container"><a href="#Grid-Container" class="headerlink" title="Grid Container"></a>Grid Container</h2><h3 id="Property-grid-template-columns"><a href="#Property-grid-template-columns" class="headerlink" title="Property: grid-template-columns"></a>Property: grid-template-columns</h3><p>The <code>grid-template-columns</code> property defines the number of columns in your grid layout, and it can define the width of each column.（定义 多少列 + 各列宽度）</p><p>The value is a space-separated-list（以空格分隔的列表）, where each value defines the width of the respective column.</p><p><strong>Example</strong>:</p><p>If you want your grid layout to contain 4 columns, specify the width of the 4 columns, or <code>auto</code> if all columns should have the same width.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: auto auto auto auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Note:</strong> If you have more than 4 items in a 4 columns grid, the grid will automatically add a new row to put the items in.</p></blockquote><p>The <code>grid-template-columns</code> property can also be used to specify the <u>size (width)</u> of the columns.</p><p><strong>Example</strong>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">80px</span> <span class="number">200px</span> auto <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Property-grid-template-rows"><a href="#Property-grid-template-rows" class="headerlink" title="Property: grid-template-rows"></a>Property: grid-template-rows</h3><p>The <code>grid-template-rows</code> property defines the height of each row.</p><p>The value is a space-separated-list, where each value defines the height of the respective row:</p><p><strong>Example</strong>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">80px</span> <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Property-justify-content-1"><a href="#Property-justify-content-1" class="headerlink" title="Property: justify-content"></a>Property: justify-content</h3><p>The <code>justify-content</code> property is used to align the whole grid inside the container <strong>horizontally</strong>.</p><blockquote><p><strong>Note:</strong> The grid&#39;s total width has to be less than the container&#39;s width for the <code>justify-content</code> property to have any effect.</p></blockquote><h4 id="Value-space-evenly"><a href="#Value-space-evenly" class="headerlink" title="Value: space-evenly"></a>Value: space-evenly</h4><p>The value <code>space-evenly</code> will give the columns <u>equal amount of space between, and around them</u>.</p><p><strong>Example</strong>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-evenly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Value-space-around-2"><a href="#Value-space-around-2" class="headerlink" title="Value: space-around"></a>Value: space-around</h4><p>The value <code>space-around</code> will give the columns <u>equal amount of space around them</u>.</p><h4 id="Value-space-between-2"><a href="#Value-space-between-2" class="headerlink" title="Value: space-between"></a>Value: space-between</h4><p>The value <code>space-between</code> will give the columns <u>equal amount of space between them</u>.</p><h4 id="Value-center-3"><a href="#Value-center-3" class="headerlink" title="Value: center"></a>Value: center</h4><p>The value <code>center</code> will align the grid in the middle of the container.</p><h4 id="Value-start"><a href="#Value-start" class="headerlink" title="Value: start"></a>Value: start</h4><p>The value <code>start</code> will align the grid at the beginning of the container.</p><h4 id="Value-end"><a href="#Value-end" class="headerlink" title="Value: end"></a>Value: end</h4><p>The value <code>end</code> will align the grid at the end of the container.</p><h3 id="Property-align-content-1"><a href="#Property-align-content-1" class="headerlink" title="Property: align-content"></a>Property: align-content</h3><p>The <code>align-content</code> property is used to align the whole grid inside the container <strong>vertically</strong>.</p><blockquote><p><strong>Note:</strong> The grid&#39;s total height has to be less than the container&#39;s height for the <code>align-content</code> property to have any effect.</p></blockquote><h4 id="Value-space-evenly-1"><a href="#Value-space-evenly-1" class="headerlink" title="Value: space-evenly"></a>Value: space-evenly</h4><h4 id="Value-space-around-3"><a href="#Value-space-around-3" class="headerlink" title="Value: space-around"></a>Value: space-around</h4><h4 id="Value-space-between-3"><a href="#Value-space-between-3" class="headerlink" title="Value: space-between"></a>Value: space-between</h4><h4 id="Value-center-4"><a href="#Value-center-4" class="headerlink" title="Value: center"></a>Value: center</h4><h4 id="Value-start-1"><a href="#Value-start-1" class="headerlink" title="Value: start"></a>Value: start</h4><h4 id="Value-end-1"><a href="#Value-end-1" class="headerlink" title="Value: end"></a>Value: end</h4><h3 id="Property-grid-auto-rows"><a href="#Property-grid-auto-rows" class="headerlink" title="Property: grid-auto-rows"></a>Property: grid-auto-rows</h3><p>It can specifies a default row size.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">grid-auto-rows</span>: <span class="selector-tag">minmax</span>(50<span class="selector-tag">px</span>, <span class="selector-tag">auto</span>);</span><br><span class="line"><span class="selector-tag">grid-auto-rows</span>: 50<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><blockquote><p>Note: <code>minmax(min, max)</code> 是 CSS Grid 布局中的一个函数，它可以让我们设置一个长度范围，这个函数可以用于定义网格项目的大小，尤其是在我们不知道网格项目具体大小时非常有用。</p></blockquote><h3 id="Property-grid-auto-columns"><a href="#Property-grid-auto-columns" class="headerlink" title="Property: grid-auto-columns"></a>Property: grid-auto-columns</h3><p>同上</p><h2 id="Grid-Item"><a href="#Grid-Item" class="headerlink" title="Grid Item"></a>Grid Item</h2><h3 id="Property-grid-row"><a href="#Property-grid-row" class="headerlink" title="Property: grid-row"></a>Property: grid-row</h3><p>The <code>grid-row</code> property defines on which row to place an item.</p><p>The <code>grid-row</code> property is a shorthand property for the <code>grid-row-start</code> and the <code>grid-row-end</code> properties.</p><p>To place an item, you can refer to <u>line numbers</u>, or use the keyword &quot;span&quot; to define <u>how many rows the item will span</u>:</p><p><strong>Example</strong>:</p><p>Make &quot;item1&quot; start on row-line 1 and end on row-line 4:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span> / <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Make &quot;item1&quot; start on row 1 and span 2 rows:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span> / span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Property-grid-column"><a href="#Property-grid-column" class="headerlink" title="Property: grid-column"></a>Property: grid-column</h3><p>The <code>grid-column</code> property defines on which column(s) to place an item.</p><p>The <code>grid-column</code> property is a shorthand property for the <code>grid-column-start</code> and the <code>grid-column-end</code> properties.</p><p>To place an item, you can refer to <u>line numbers</u>, or use the keyword &quot;span&quot; to define <u>how many columns the item will span</u>.</p><p><strong>Example</strong>:</p><p>Make &quot;item1&quot; start on column 1 and end before column 5:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Make &quot;item1&quot; start on column 1 and span 3 columns:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / span <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="⭐Property-grid-area"><a href="#⭐Property-grid-area" class="headerlink" title="⭐Property: grid-area"></a>⭐Property: grid-area</h3><p>The <code>grid-area</code> property can be used as a shorthand property for the <code>grid-row-start</code>, <code>grid-column-start</code>, <code>grid-row-end</code> and the <code>grid-column-end</code> properties.</p><p><strong>Example</strong>:</p><p>Make &quot;item8&quot; start on row-line 1 and column-line 2, and end on row-line 5 and column line 6:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item8</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">1</span> / <span class="number">2</span> / <span class="number">5</span> / <span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Make &quot;item8&quot; start on row-line 2 and column-line 1, and span 2 rows and 3 columns:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item8</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">2</span> / <span class="number">1</span> / span <span class="number">2</span> / span <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Property-grid-template-areas"><a href="#Property-grid-template-areas" class="headerlink" title="Property: grid-template-areas"></a>Property: grid-template-areas</h3><p>The <code>grid-area</code> property can also be used to assign names to grid items.</p><p><strong>Example</strong>:</p><p>Item1 gets the name &quot;myArea&quot; and spans all five columns in a five columns grid layout:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: myArea;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grid-container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>: <span class="string">&quot;myArea myArea myArea myArea myArea&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Let &quot;myArea&quot; span two columns in a five columns grid layout:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: myArea;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grid-container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>: <span class="string">&quot;myArea myArea . . .&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Note:</strong> A period sign represents a grid item with no name.</p></blockquote><p>To define two rows, define the column of the second row inside another set of apostrophes（撇号）:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid-container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>: <span class="string">&quot;myArea myArea . . .&quot;</span> <span class="string">&quot;myArea myArea . . .&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Name all items, and make a ready-to-use webpage template:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: header;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item2</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: menu;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item3</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: main;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item4</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item5</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: footer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grid-container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">&quot;header header header header right right&quot;</span></span><br><span class="line">    <span class="string">&quot;menu main main main right right&quot;</span></span><br><span class="line">    <span class="string">&quot;menu footer footer footer footer footer&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由此可知，<code>grid-template-areas</code>可以用于<u>形象化显示</u>每个 item 的占位</p></blockquote><h1 id="Animations"><a href="#Animations" class="headerlink" title="Animations"></a><a href="https://www.w3schools.com/css/css3_animations.asp">Animations</a></h1><p>An animation lets an element gradually change from one style to another.</p><p>To use CSS animation, you must first specify some keyframes for the animation.</p><p>Keyframes hold what styles the element will have at certain times.</p><h2 id="keyframes、animation-name、animation-duration"><a href="#keyframes、animation-name、animation-duration" class="headerlink" title="@keyframes、animation-name、animation-duration"></a>@keyframes、animation-name、animation-duration</h2><p>To get an animation to work, you must bind the animation to an element.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* The animation code */</span></span><br><span class="line"><span class="keyword">@keyframes</span> example &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;<span class="attribute">background-color</span>: red;&#125;</span><br><span class="line">  <span class="selector-tag">to</span> &#123;<span class="attribute">background-color</span>: yellow;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* The element to apply the animation to */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">animation-name</span>: example;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">4s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It&#39;s also possible to use <strong>percent</strong>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> example &#123;</span><br><span class="line">  0%   &#123;<span class="attribute">background-color</span>: red;&#125;</span><br><span class="line">  25%  &#123;<span class="attribute">background-color</span>: yellow;&#125;</span><br><span class="line">  50%  &#123;<span class="attribute">background-color</span>: blue;&#125;</span><br><span class="line">  100% &#123;<span class="attribute">background-color</span>: green;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If you like to add more than one style:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> example &#123;</span><br><span class="line">  0%   &#123;<span class="attribute">background-color</span>:red; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</span><br><span class="line">  25%  &#123;<span class="attribute">background-color</span>:yellow; <span class="attribute">left</span>:<span class="number">200px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</span><br><span class="line">  50%  &#123;<span class="attribute">background-color</span>:blue; <span class="attribute">left</span>:<span class="number">200px</span>; <span class="attribute">top</span>:<span class="number">200px</span>;&#125;</span><br><span class="line">  75%  &#123;<span class="attribute">background-color</span>:green; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">200px</span>;&#125;</span><br><span class="line">  100% &#123;<span class="attribute">background-color</span>:red; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Property-animation-delay"><a href="#Property-animation-delay" class="headerlink" title="Property: animation-delay"></a>Property: animation-delay</h2><p>The <code>animation-delay</code> property specifies a delay for the start of an animation.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">animation-name</span>: example;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">4s</span>;</span><br><span class="line">  <span class="attribute">animation-delay</span>: <span class="number">2s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Negative values are also allowed. If using negative values, the animation will start as if it had already been playing for <em>N</em> seconds. 一般没有人会用负数吧，好不容易写好的动画，你搁这直接跳过几秒？</p><h2 id="Property-animation-iteration-count"><a href="#Property-animation-iteration-count" class="headerlink" title="Property: animation-iteration-count"></a>Property: animation-iteration-count</h2><p>The <code>animation-iteration-count</code> property specifies the number of times an animation should run.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">animation-name</span>: example;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">4s</span>;</span><br><span class="line">  <span class="attribute">animation-iteration-count</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You can also use the value &quot;infinite&quot; to make the animation continue forever.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="selector-tag">animation-iteration-count</span>: <span class="selector-tag">infinite</span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Property-animation-direction"><a href="#Property-animation-direction" class="headerlink" title="Property: animation-direction"></a>Property: animation-direction</h2><p>The <code>animation-direction</code> property specifies whether an animation should be played forwards, backwards or in alternate cycles.</p><p>The animation-direction property can have the following values:</p><ul><li><code>normal</code> - The animation is played as normal (forwards). This is default</li><li><code>reverse</code> - The animation is played in reverse direction (backwards)</li><li><code>alternate</code>- The animation is played forwards first, then backwards</li><li><code>alternate-reverse</code> - The animation is played backwards first, then forwards</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="selector-tag">animation-direction</span>: <span class="selector-tag">reverse</span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Property-animation-timing-function"><a href="#Property-animation-timing-function" class="headerlink" title="Property: animation-timing-function"></a>Property: animation-timing-function</h2><p>The <code>animation-timing-function</code> property specifies the <u>speed curve</u> of the animation.</p><p>The animation-timing-function property can have the following values:</p><ul><li><code>ease</code> - Specifies an animation with a slow start, then fast, then end slowly (this is <strong>default</strong>)</li><li><code>linear</code> - Specifies an animation with the same speed from start to end</li><li><code>ease-in</code> - Specifies an animation with a slow start</li><li><code>ease-out</code> - Specifies an animation with a slow end</li><li><code>ease-in-out</code> - Specifies an animation with a slow start and end</li><li><code>cubic-bezier(n,n,n,n)</code> - Lets you define your own values in a cubic-bezier function</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#div1</span> &#123;<span class="attribute">animation-timing-function</span>: linear;&#125;</span><br><span class="line"><span class="selector-id">#div2</span> &#123;<span class="attribute">animation-timing-function</span>: ease;&#125;</span><br></pre></td></tr></table></figure><h2 id="Property-animation-fill-mode"><a href="#Property-animation-fill-mode" class="headerlink" title="Property: animation-fill-mode"></a>Property: animation-fill-mode</h2><p><code>animation-fill-mode</code>将指定目标元素在动画播放前/后/两者都保持的样式。</p><p>The animation-fill-mode property can have the following values:</p><ul><li><code>none</code> - Default value. Animation will not apply any styles to the element before or after it is executing</li><li><code>forwards</code> - The element will retain the style values that is set by the last keyframe (depends on animation-direction and animation-iteration-count)</li><li><code>backwards</code> - The element will get the style values that are set by the first keyframe (depends on animation-direction), and retain this during the animation-delay period</li><li><code>both</code> - The animation will follow the rules for both forwards and backwards, extending the animation properties in both directions</li></ul><p>下面例子指的是 div 元素保持动画后的样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="selector-tag">animation-fill-mode</span>: <span class="selector-tag">forwards</span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Animation-Shorthand-Property"><a href="#Animation-Shorthand-Property" class="headerlink" title="Animation Shorthand Property"></a>Animation Shorthand Property</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">animation-name</span>: example;</span><br><span class="line">  <span class="attribute">animation-duration</span>: <span class="number">5s</span>;</span><br><span class="line">  <span class="attribute">animation-timing-function</span>: linear;</span><br><span class="line">  <span class="attribute">animation-delay</span>: <span class="number">2s</span>;</span><br><span class="line">  <span class="attribute">animation-iteration-count</span>: infinite;</span><br><span class="line">  <span class="attribute">animation-direction</span>: alternate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The same animation effect as above can be achieved by using the shorthand <code>animation</code> property:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: example <span class="number">5s</span> linear <span class="number">2s</span> infinite alternate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Property-animation-play-state"><a href="#Property-animation-play-state" class="headerlink" title="Property: animation-play-state"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-play-state">Property: animation-play-state</a></h1><p>The <code>animation-play-state</code> CSS property sets whether an animation <u>is running or paused</u>.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">animation-play-state</span>: <span class="selector-tag">paused</span>;</span><br><span class="line"><span class="selector-tag">animation-play-state</span>: <span class="selector-tag">running</span>;</span><br></pre></td></tr></table></figure><div style="text-align:center;background:var(--harris-card-bg);border-radius:12px"><p style="color:#ce6a28;font-size:24px;display:inline-block;margin:6px 0">☕欲知后事如何，</p><p style="color:#a8c212;font-size:24px;display:inline-block;margin:6px 0">且听下回分解🍵</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;我很早学过，只是当时没有系统记录笔记，导致过一段时就容易忘记很多东西。本笔记主要参考 &lt;a href=&quot;https://web.qianguyihao.com/02-CSS%E5%9F%BA%E7%A1%80/01-CSS%E5%B1%9E%E6%</summary>
      
    
    
    
    <category term="📕知识笔记" scheme="https://blog.harriswong.top/categories/%F0%9F%93%95%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="📝前端" scheme="https://blog.harriswong.top/tags/%F0%9F%93%9D%E5%89%8D%E7%AB%AF/"/>
    
    <category term="🌺CSS" scheme="https://blog.harriswong.top/tags/%F0%9F%8C%BACSS/"/>
    
  </entry>
  
  <entry>
    <title>博客二周年纪念</title>
    <link href="https://blog.harriswong.top/posts/5d729eca/"/>
    <id>https://blog.harriswong.top/posts/5d729eca/</id>
    <published>2022-11-13T00:00:00.000Z</published>
    <updated>2022-11-18T23:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>时间都去哪了？明明才写完《一周年纪念》怎么第二年这么快到了。。。本篇文章就用意识流来写（<del>实在没空去精修文字表达</del>）</p></blockquote><h1 id="回顾去年"><a href="#回顾去年" class="headerlink" title="回顾去年"></a>回顾去年</h1><p>第二年呢，其实在博客上花的时间比去年较少，以前的我可能和博客的样式杠上了，成天没日没夜地美化魔改，可能现在新鲜感过了吧，目前我看到哪个地方有些小不和谐，我心想：凑合着用用算了，目前我的心态发生了一些变化，也挺好，博客确实文章更重要。对于我来说，博客更新速度和我的学习成果有一定联系，我发现如果学习不做笔记的话，我一定会把知识忘得一干二净，像 HTML、CSS、JavaScript，我明明2020年左右的时候在网上自学过，但是用起来发现，大多数都忘记了，所以我不得不额外花时间去重新记笔记，何况我现在在留学，这里的时间可谓是一寸光阴十寸金，在这待一天，你会发现，我晕，一千人民币又干没了。无论如何，大家学习的时候一定要记得做笔记。作为学计算机的，我发现我的 iPad Pro 2020 貌似用不出它大部分的价值，以前想着做做笔记，打打草稿，现在发现博客基本就够了，iPad 最多是打草稿和看上课 PPT 的，于是真就<del>买前生产力，买后爱奇艺</del>，我有时索性直接用 iPhone 看视频，因为iPad有些重不方便拿哈哈。话说回来，今年情况不尽人意，博客文章产出不多，我的原计划是每个月至少 5 篇文章，当然我对自己也是有一些隐性标准，比如：</p><ol><li>每篇尽量至少 1k 字。</li><li>学习一门科目，或者一门开发框架的时候，尽量不要将每一章节作为一篇文章，或者一个小问题大谈特谈。</li></ol><p>大概如此，其实没有好坏之分，每个人想法不同，我目前是这么潜在要求自己，其实水文章也很好水，随便转载一篇好文章很省事，但我太懒了也不想经常这么做，我还是想多写点对我自己也对路过的朋友有帮助的文章，比如各种前端知识、找工作方面的事情等等。</p><p>截止目前网站的<strong>数据统计</strong>（与去年对比）：</p><table><thead><tr><th></th><th>去年（2021.11.13）</th><th>今年（2022.11.13）</th></tr></thead><tbody><tr><td>文章数目</td><td>55</td><td>84</td></tr><tr><td>本站总字数</td><td>113.4k</td><td>224.6k</td></tr><tr><td>本站访客数</td><td>3906</td><td>14511</td></tr><tr><td>本站总访问量</td><td>14667</td><td>47042</td></tr></tbody></table><p>看了数据后，我还是挺惊讶的，有点无心插柳柳成荫，但文章数目我不太满意，我这一年确实比较懒，然后依旧效率低下，知识类文章产出比较少。</p><p>还记得曾经自己想过，博客我先写它个十年再说，但是随着时间的推移，有时候有一丝放弃的想法，但是一想到我现在如果不写博客的话，我学过的东西一定会容易忘记，于是我不得不坚持写博客，我好像依赖上它了。此外，一想到曾经在大学课也不上就在那里两眼放空地思考如何让博客更加好看，设计更得体，就不忍心放弃自己缝缝补补东拼西凑了两年的博客，就像自己的孩子一样，已经两岁啦，舍不得丢。</p><h1 id="展望未来"><a href="#展望未来" class="headerlink" title="展望未来"></a>展望未来</h1><p>未来我应该是不会再继续更 Butterfly 主题相关的魔改美化了，可能已经过了那个热情，就算写也不会太保姆，比如要改哪个文件，因为前端技术、主题版本更新迭代太快了，教程很容易过期，更多的我希望给路过的盆友一些灵感，就比如要实现一个时钟的组件，我可能会给出实现思路，或者进一步给出HTML、CSS、JS 代码，但是要适配你的网站就要靠你自己修改部分代码了，毕竟经历一次确实能锻炼到自己，也越能把网站定制成你想要的样子。</p><p>未来我依然对自己有着与往年相同的要求，尽量每个月写5篇及以上有质量的博文，不断学习，无限进步。多学技术，多做点项目，希望明年能找到一个不错的前端工作。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;时间都去哪了？明明才写完《一周年纪念》怎么第二年这么快到了。。。本篇文章就用意识流来写（&lt;del&gt;实在没空去精修文字表达&lt;/del&gt;）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;回顾去年&quot;&gt;&lt;a href=&quot;#回顾去年&quot; class=&quot;h</summary>
      
    
    
    
    <category term="💬茶余饭后" scheme="https://blog.harriswong.top/categories/%F0%9F%92%AC%E8%8C%B6%E4%BD%99%E9%A5%AD%E5%90%8E/"/>
    
    
    <category term="🦋Butterfly" scheme="https://blog.harriswong.top/tags/%F0%9F%A6%8BButterfly/"/>
    
  </entry>
  
  <entry>
    <title>HTML学习笔记</title>
    <link href="https://blog.harriswong.top/posts/a0ca7bc4/"/>
    <id>https://blog.harriswong.top/posts/a0ca7bc4/</id>
    <published>2022-10-27T20:21:20.000Z</published>
    <updated>2023-03-08T19:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我很早学过，只是当时没有系统记录笔记，导致过一段时就容易忘记很多东西。本笔记参考了<a href="https://web.qianguyihao.com/01-HTML/01-%E8%AE%A4%E8%AF%86Web%E5%92%8CWeb%E6%A0%87%E5%87%86.html">HTML-千古前端图文教程</a>和<a href="https://www.w3schools.com/html">w3school - HTML</a></p></blockquote><h1 id="Tags"><a href="#Tags" class="headerlink" title="Tags"></a>Tags</h1><h2 id="lt-a-gt"><a href="#lt-a-gt" class="headerlink" title="&lt;a&gt;"></a>&lt;a&gt;</h2><h3 id="mailto"><a href="#mailto" class="headerlink" title="mailto:"></a><a href="mailto:">mailto:</a></h3><p>可以用来发邮件，例如：</p><p><code>&lt;a href=&quot;mailto:email@example.com&quot;&gt;Send Email&lt;/a&gt;</code></p><p>点击该链接可以向 <code>email@example.com</code> 发送邮件</p><h4 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h4><ul><li><strong>subject</strong> - for the subject line（主题）</li><li><strong>cc</strong> - for sending a carbon copy（抄送）</li><li><strong>bcc</strong> - for sending a blind carbon copy（密送）</li><li><strong>body</strong> - for the message&#39;s body text（正文）</li></ul><p>例如：<code>&lt;a href=&quot;mailto:email@example.com?cc=secondemail@example.com, anotheremail@example.com, &amp;bcc=lastemail@example.com&amp;subject=Mail from our Website&amp;body=Some body text here&quot;&gt;Send Email&lt;/a&gt;</code></p><h2 id="lt-button-gt"><a href="#lt-button-gt" class="headerlink" title="&lt;button&gt;"></a><a href="https://www.w3schools.com/tags/tag_button.asp">&lt;button&gt;</a></h2><p><code>&lt;button type=&quot;button&quot;&gt;Click Me!&lt;/button&gt;</code></p><p>Inside a <code>&lt;button&gt;</code> element you can put text (and tags like <code>&lt;i&gt;</code>, <code>&lt;b&gt;</code>, <code>&lt;strong&gt;</code>, <code>&lt;br&gt;</code>, <code>&lt;img&gt;</code>, etc.).</p><p>This is not possible with a button created with the <code>&lt;input&gt;</code> element!</p><p><strong>Tip:</strong> Always specify the <code>type</code> attribute for a <code>&lt;button&gt;</code> element, to tell browsers what type of button it is.</p><h2 id="lt-nav-gt"><a href="#lt-nav-gt" class="headerlink" title="&lt;nav&gt;"></a><a href="https://www.w3schools.com/tags/tag_nav.asp">&lt;nav&gt;</a></h2><blockquote><p>The <code>&lt;nav&gt;</code> tag defines a set of navigation links.</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/html/&quot;</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">a</span>&gt;</span> | <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/css/&quot;</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">a</span>&gt;</span> |</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/js/&quot;</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">a</span>&gt;</span> |</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/python/&quot;</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="lt-header-gt"><a href="#lt-header-gt" class="headerlink" title="&lt;header&gt;"></a><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header">&lt;header&gt;</a></h2><blockquote><p>The <code>&lt;header&gt;</code> element represents a container for introductory content or a set of navigational links.</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>A heading here<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Posted by Harris<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Some additional information here<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="lt-article-gt"><a href="#lt-article-gt" class="headerlink" title="&lt;article&gt;"></a><a href="https://www.w3schools.com/tags/tag_article.asp">&lt;article&gt;</a></h2><blockquote><p>The <code>&lt;article&gt;</code> tag specifies independent, self-contained content.</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Google Chrome<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Google Chrome is a web browser developed by Google, released in 2008. Chrome is the world&#x27;s most popular web browser today!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="lt-footer-gt"><a href="#lt-footer-gt" class="headerlink" title="&lt;footer&gt;"></a><a href="https://www.w3schools.com/tags/tag_footer.asp">&lt;footer&gt;</a></h2><blockquote><p>The <code>&lt;footer&gt;</code> tag defines a footer for a document or section.</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Author: Hege Refsnes<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:123@qq.com&quot;</span>&gt;</span>123@qq.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="lt-pre-gt"><a href="#lt-pre-gt" class="headerlink" title="&lt;pre&gt;"></a>&lt;pre&gt;</h2><blockquote><p><strong>Preformatted text 预格式化的文本</strong></p><p>Text in a <code>&lt;pre&gt;</code> element is displayed in a fixed-width font, and the text preserves both spaces and line breaks. The text will <strong>be displayed exactly as written</strong> in the HTML source code.</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">Text in a pre element</span><br><span class="line">is displayed in a fixed-width</span><br><span class="line">font, and it preserves</span><br><span class="line">both      spaces and</span><br><span class="line">line breaks</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编译后的文本还是保持写的那样，回车空格等</p><h2 id="lt-input-gt"><a href="#lt-input-gt" class="headerlink" title="&lt;input&gt;"></a><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input">&lt;input&gt;</a></h2><p>The HTML <code>&lt;input&gt;</code> element is the most used form element.</p><p>An <code>&lt;input&gt;</code> element can be displayed in many ways, depending on the <code>type</code> attribute.</p><p>Here are some examples:</p><table><thead><tr><th align="left">Type</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">&lt;input type=&quot;text&quot;&gt;</td><td align="left">Displays a single-line text input field</td></tr><tr><td align="left">&lt;input type=&quot;radio&quot;&gt;</td><td align="left">Displays a radio button (for selecting one of many choices)</td></tr><tr><td align="left">&lt;input type=&quot;checkbox&quot;&gt;</td><td align="left">Displays a checkbox (for selecting zero or more of many choices)</td></tr><tr><td align="left">&lt;input type=&quot;submit&quot;&gt;</td><td align="left">Displays a submit button (for submitting the form)</td></tr><tr><td align="left">&lt;input type=&quot;button&quot;&gt;</td><td align="left">Displays a clickable button</td></tr></tbody></table><h3 id="lt-input-type-quot-text-quot-gt"><a href="#lt-input-type-quot-text-quot-gt" class="headerlink" title="&lt;input type=&quot;text&quot;&gt;"></a>&lt;input type=&quot;text&quot;&gt;</h3><blockquote><p>The <code>&lt;input type=&quot;text&quot;&gt;</code> defines a single-line input field for text input.</p></blockquote><p><strong>Example</strong>:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  &lt;label <span class="keyword">for</span>=<span class="string">&quot;fname&quot;</span>&gt;First name:&lt;/label&gt;&lt;br&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;fname&quot;</span> name=<span class="string">&quot;fname&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">  &lt;label <span class="keyword">for</span>=<span class="string">&quot;lname&quot;</span>&gt;Last name:&lt;/label&gt;&lt;br&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;lname&quot;</span> name=<span class="string">&quot;lname&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h3 id="lt-label-gt"><a href="#lt-label-gt" class="headerlink" title="&lt;label&gt;"></a>&lt;label&gt;</h3><blockquote><p>The <code>&lt;label&gt;</code> tag defines a label for many form elements.</p></blockquote><p>Notice the use of the <code>&lt;label&gt;</code> element in the example above.</p><p>The <code>&lt;label&gt;</code> element also help users who have difficulty clicking on very small regions (such as radio buttons or checkboxes)</p><p>The <code>for</code> attribute of the <code>&lt;label&gt;</code> tag should be equal to the <code>id</code> attribute of the <code>&lt;input&gt;</code> element to bind them together.</p><h3 id="lt-input-type-quot-radio-quot-gt"><a href="#lt-input-type-quot-radio-quot-gt" class="headerlink" title="&lt;input type=&quot;radio&quot;&gt;"></a>&lt;input type=&quot;radio&quot;&gt;</h3><blockquote><p>The <code>&lt;input type=&quot;radio&quot;&gt;</code> defines a radio button.</p></blockquote><p>Radio buttons let a user select ONE of a limited number of choices.</p><p><strong>Example</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Choose your favorite Web language:&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;form&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;radio&quot;</span> id=<span class="string">&quot;html&quot;</span> name=<span class="string">&quot;fav_language&quot;</span> value=<span class="string">&quot;HTML&quot;</span>&gt;</span><br><span class="line">  &lt;label <span class="keyword">for</span>=<span class="string">&quot;html&quot;</span>&gt;HTML&lt;/label&gt;&lt;br&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;radio&quot;</span> id=<span class="string">&quot;css&quot;</span> name=<span class="string">&quot;fav_language&quot;</span> value=<span class="string">&quot;CSS&quot;</span>&gt;</span><br><span class="line">  &lt;label <span class="keyword">for</span>=<span class="string">&quot;css&quot;</span>&gt;CSS&lt;/label&gt;&lt;br&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;radio&quot;</span> id=<span class="string">&quot;javascript&quot;</span> name=<span class="string">&quot;fav_language&quot;</span> value=<span class="string">&quot;JavaScript&quot;</span>&gt;</span><br><span class="line">  &lt;label <span class="keyword">for</span>=<span class="string">&quot;javascript&quot;</span>&gt;JavaScript&lt;/label&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h3 id="lt-input-type-quot-checkbox-quot-gt"><a href="#lt-input-type-quot-checkbox-quot-gt" class="headerlink" title="&lt;input type=&quot;checkbox&quot;&gt;"></a>&lt;input type=&quot;checkbox&quot;&gt;</h3><blockquote><p>The <code>&lt;input type=&quot;checkbox&quot;&gt;</code> defines a <strong>checkbox</strong>.</p></blockquote><p>Checkboxes let a user select ZERO or MORE options of a limited number of choices.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;checkbox&quot;</span> id=<span class="string">&quot;vehicle1&quot;</span> name=<span class="string">&quot;vehicle1&quot;</span> value=<span class="string">&quot;Bike&quot;</span>&gt;</span><br><span class="line">  &lt;label <span class="keyword">for</span>=<span class="string">&quot;vehicle1&quot;</span>&gt; I have a bike&lt;/label&gt;&lt;br&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;checkbox&quot;</span> id=<span class="string">&quot;vehicle2&quot;</span> name=<span class="string">&quot;vehicle2&quot;</span> value=<span class="string">&quot;Car&quot;</span>&gt;</span><br><span class="line">  &lt;label <span class="keyword">for</span>=<span class="string">&quot;vehicle2&quot;</span>&gt; I have a car&lt;/label&gt;&lt;br&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;checkbox&quot;</span> id=<span class="string">&quot;vehicle3&quot;</span> name=<span class="string">&quot;vehicle3&quot;</span> value=<span class="string">&quot;Boat&quot;</span>&gt;</span><br><span class="line">  &lt;label <span class="keyword">for</span>=<span class="string">&quot;vehicle3&quot;</span>&gt; I have a motorbike&lt;/label&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h3 id="lt-input-type-quot-submit-quot-gt"><a href="#lt-input-type-quot-submit-quot-gt" class="headerlink" title="&lt;input type=&quot;submit&quot;&gt;"></a>&lt;input type=&quot;submit&quot;&gt;</h3><blockquote><p>The <code>&lt;input type=&quot;submit&quot;&gt;</code> defines a button for submitting the form data to a form-handler.</p></blockquote><h3 id="The-Name-Attribute-for-lt-input-gt"><a href="#The-Name-Attribute-for-lt-input-gt" class="headerlink" title="The Name Attribute for &lt;input&gt;"></a>The Name Attribute for &lt;input&gt;</h3><p>Notice that each input field <strong>must have a</strong> <code>name</code> <strong>attribute</strong> to be submitted.</p><p><strong>Tip</strong>: If the <code>name</code> attribute is omitted（省略）, the input field&#39;s value will not be sent at all.</p><h1 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h1><h2 id="Form-Tags"><a href="#Form-Tags" class="headerlink" title="Form Tags"></a>Form Tags</h2><blockquote><p>An HTML form is used to collect user input. The user input is most often sent to a server for processing.</p></blockquote><h3 id="lt-form-gt"><a href="#lt-form-gt" class="headerlink" title="&lt;form&gt;"></a>&lt;form&gt;</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span>...<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The <code>&lt;form&gt;</code> element is a container for different types of input elements, such as: text fields, checkboxes, radio buttons, submit buttons, etc.</p><h3 id="lt-textarea-gt"><a href="#lt-textarea-gt" class="headerlink" title="&lt;textarea&gt;"></a>&lt;textarea&gt;</h3><blockquote><p>The <code>&lt;textarea&gt;</code> tag defines a multi-line text input control.</p></blockquote><p>The <code>&lt;textarea&gt;</code> element is often used in a form, to collect user inputs like comments or reviews.</p><p>The size of a text area is specified by the <code>cols</code> and <code>rows</code> attributes (or with CSS).</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;abc&quot;</span> <span class="attr">name</span>=<span class="string">&quot;abc&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;4&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;50&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Form-Attributes-表单属性"><a href="#Form-Attributes-表单属性" class="headerlink" title="Form Attributes 表单属性"></a>Form Attributes 表单属性</h2><h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><blockquote><p>The <code>action</code> attribute defines the action to be performed when the form is submitted.</p><p>Usually, the form data is sent to a file on the server when the user clicks on the submit button.</p></blockquote><p><strong>Example</strong>:</p><p>On submit, send form data to &quot;action_page.php&quot;:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/action_page.php&quot;</span>&gt;</span><br><span class="line">  &lt;label <span class="keyword">for</span>=<span class="string">&quot;fname&quot;</span>&gt;First name:&lt;/label&gt;&lt;br&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;fname&quot;</span> name=<span class="string">&quot;fname&quot;</span> value=<span class="string">&quot;John&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">  &lt;label <span class="keyword">for</span>=<span class="string">&quot;lname&quot;</span>&gt;Last name:&lt;/label&gt;&lt;br&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;lname&quot;</span> name=<span class="string">&quot;lname&quot;</span> value=<span class="string">&quot;Doe&quot;</span>&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;Submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p><strong>Tip:</strong> If the <code>action</code> attribute is omitted, the action is set to the current page.</p><h3 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h3><blockquote><p>The <code>target</code> attribute specifies where to display the response that is received after submitting the form.</p></blockquote><p>The <code>target</code> attribute can have one of the following values:</p><table><thead><tr><th align="left">Value</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">_blank</td><td align="left">The response is displayed in a new window or tab</td></tr><tr><td align="left">_self</td><td align="left">The response is displayed in the current window</td></tr><tr><td align="left">_parent</td><td align="left">The response is displayed in the parent frame</td></tr><tr><td align="left">_top</td><td align="left">The response is displayed in the full body of the window</td></tr><tr><td align="left"><em>framename</em></td><td align="left">The response is displayed in a named iframe</td></tr></tbody></table><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><blockquote><p>The <code>method</code> attribute specifies the HTTP method to be used when submitting the form data.</p><p>The form-data can be sent as URL variables (with <code>method=&quot;get&quot;</code>) or as HTTP post transaction (with <code>method=&quot;post&quot;</code>).</p></blockquote><p>默认值：<code>method=&quot;get&quot;</code></p><p><strong>Example</strong>: <code>&lt;form action=&quot;/action_page.php&quot; method=&quot;get&quot;&gt;</code></p><p><strong>Notes on GET:</strong></p><ul><li>Appends the form data to the URL, in name/value pairs</li><li><strong>NEVER use GET to send sensitive data</strong>! (the submitted form data is visible in the URL!)</li><li>The length of a URL is limited (2048 characters)</li><li>GET is good for <strong>non-secure data</strong>, like query strings in Google</li><li>Useful for form submissions where a user wants to bookmark the result</li></ul><p><strong>Notes on POST:</strong></p><ul><li>Appends the form data inside the body of the HTTP request (the submitted form data is not shown in the URL)</li><li>POST has no size limitations, and can be used to <strong>send large amounts of data</strong>.</li><li>Form submissions with POST cannot be bookmarked</li><li>Always use POST if the form data contains sensitive or personal information!</li></ul><h3 id="Autocomplete-自动补全"><a href="#Autocomplete-自动补全" class="headerlink" title="Autocomplete 自动补全"></a>Autocomplete 自动补全</h3><blockquote><p>The <code>autocomplete</code> attribute specifies whether a form should have autocomplete on or off.</p><p>When autocomplete is on, the browser automatically complete values based on values that <strong>the user has entered before</strong>.</p></blockquote><p>默认值：<code>autocomplete=&quot;on&quot;</code></p><p><strong>Example</strong>: <code>&lt;form action=&quot;/action_page.php&quot; autocomplete=&quot;on&quot;&gt;</code></p><h3 id="Novalidate"><a href="#Novalidate" class="headerlink" title="Novalidate"></a>Novalidate</h3><blockquote><p>The <code>novalidate</code> attribute is a <strong>boolean</strong> attribute.</p><p>When present, it specifies that the form-data (input) should not be validated when submitted.</p></blockquote><p><strong>Example</strong>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/action_page.php&quot;</span> novalidate&gt;</span><br><span class="line">  &lt;label <span class="keyword">for</span>=<span class="string">&quot;email&quot;</span>&gt;Enter your email:&lt;/label&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;email&quot;</span> id=<span class="string">&quot;email&quot;</span> name=<span class="string">&quot;email&quot;</span>&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><blockquote><p>该例子中，email 格式错了不会被验证</p></blockquote><h1 id="Attributes-属性"><a href="#Attributes-属性" class="headerlink" title="Attributes 属性"></a>Attributes 属性</h1><h2 id="disabled"><a href="#disabled" class="headerlink" title="disabled"></a>disabled</h2><blockquote><p>The Boolean <code>disabled</code> attribute, when present, makes the element not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.</p></blockquote><p>If the <code>disabled</code> attribute is specified on a <strong>form</strong> control, the element and its form control descendants do not participate in constraint validation. Often browsers grey out such controls and it won&#39;t receive any browsing events, like mouse clicks or focus-related ones.</p><p><code>input name=&quot;Date&quot; type=&quot;date&quot; disabled&gt;</code></p><div style="text-align:center;background:var(--harris-card-bg);border-radius:12px"><p style="color:#ce6a28;font-size:24px;display:inline-block;margin:6px 0">☕欲知后事如何，</p><p style="color:#a8c212;font-size:24px;display:inline-block;margin:6px 0">且听下回分解🍵</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;我很早学过，只是当时没有系统记录笔记，导致过一段时就容易忘记很多东西。本笔记参考了&lt;a href=&quot;https://web.qianguyihao.com/01-HTML/01-%E8%AE%A4%E8%AF%86Web%E5%92%8CWeb%E</summary>
      
    
    
    
    <category term="📕知识笔记" scheme="https://blog.harriswong.top/categories/%F0%9F%93%95%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="📝前端" scheme="https://blog.harriswong.top/tags/%F0%9F%93%9D%E5%89%8D%E7%AB%AF/"/>
    
    <category term="🏚HTML" scheme="https://blog.harriswong.top/tags/%F0%9F%8F%9AHTML/"/>
    
  </entry>
  
  <entry>
    <title>记一次Win10换Macbook，内附常用Mac软件下载链接</title>
    <link href="https://blog.harriswong.top/posts/50798c86/"/>
    <id>https://blog.harriswong.top/posts/50798c86/</id>
    <published>2022-10-18T01:47:00.000Z</published>
    <updated>2023-02-10T16:52:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>背景</strong>：</p><p>（2022.10.18）我把妹妹的旧 MacBook Air 拿过来耍了耍，正好上课的时候可以用来做做笔记，我的 Dell 笔记本电池容量已经掉到了40%以下，满血续航撑不过一小时。妹妹的 MacBook 使用起来我感觉还不错，虽然它已经被用了三年，但其续航依然令我感到惊讶，够我连续使用四节课，尽管我只是用来编辑 Markdown 文档。</p><p>（2022.11.30）妹妹的MBA相当于我的一个过渡期吧，最后我咬咬牙还是买了英版 MacBook Air 2022。我用了两三天都没有充电，居然还能用，续航太恐怖了。</p><p>本篇呢，就记录一下使用 MacBook 过程中遇到的种种问题，还将附上一些常用Mac软件的下载链接。</p></blockquote><h1 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h1><blockquote><p>在网络上找科学下载方法的时候找到几个不错的提供方，在此分享下：</p><ul><li>公众号：苹果软件库</li><li>网站：<a href="https://foxirj.com/">佛系软件</a></li></ul></blockquote><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><ul><li><input checked="" disabled="" type="checkbox"> Chrome</li></ul><h2 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h2><ul><li><input checked="" disabled="" type="checkbox"> VSCode</li><li><input checked="" disabled="" type="checkbox"> SniPaste</li><li><input checked="" disabled="" type="checkbox"> Homebrew（专门用来下 Node 和 Git）</li><li><input checked="" disabled="" type="checkbox"> Node</li><li><input checked="" disabled="" type="checkbox"> Git</li><li><input checked="" disabled="" type="checkbox"> Hexo</li></ul><h2 id="办公、效率、工具"><a href="#办公、效率、工具" class="headerlink" title="办公、效率、工具"></a>办公、效率、工具</h2><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://www.macfz.com/a/Typora.html">Typora</a></li><li><input checked="" disabled="" type="checkbox"> <a href="https://foxirj.com/xmind-2022">Xmind</a></li><li><input checked="" disabled="" type="checkbox"> Grammaly</li><li><input checked="" disabled="" type="checkbox"> DeepL</li><li><input checked="" disabled="" type="checkbox"> 有道词典</li><li><input checked="" disabled="" type="checkbox"> Imagine</li></ul><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><ul><li><input checked="" disabled="" type="checkbox"> OmniPlayer</li></ul><h2 id="Adobe-系列"><a href="#Adobe-系列" class="headerlink" title="Adobe 系列"></a>Adobe 系列</h2><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://foxirj.com/adobe-acrobat-pro-2022">Adobe Acrobat</a></li><li><input disabled="" type="checkbox"> Adobe After Effects</li><li><input disabled="" type="checkbox"> Adobe Audition</li><li><input disabled="" type="checkbox"> Adobe Illustrator</li><li><input disabled="" type="checkbox"> Adobe Media Encoder</li><li><input disabled="" type="checkbox"> Adobe Photoshop</li><li><input disabled="" type="checkbox"> Adobe Premiere Pro</li></ul><h2 id="Apple系列"><a href="#Apple系列" class="headerlink" title="Apple系列"></a>Apple系列</h2><ul><li><input checked="" disabled="" type="checkbox"> Final cut pro</li><li><input checked="" disabled="" type="checkbox"> Logic Pro</li></ul><h2 id="MicroSoft系列"><a href="#MicroSoft系列" class="headerlink" title="MicroSoft系列"></a>MicroSoft系列</h2><ul><li><input checked="" disabled="" type="checkbox"> <a href="https://foxirj.com/microsoft-office-2021">Office 全套软件</a>（<code>苹果软件库</code>公众号也有）<ul><li><input checked="" disabled="" type="checkbox"> OneNote</li><li><input checked="" disabled="" type="checkbox"> To Do </li></ul></li></ul><h2 id="通讯"><a href="#通讯" class="headerlink" title="通讯"></a>通讯</h2><ul><li><input checked="" disabled="" type="checkbox"> 微信</li><li><input checked="" disabled="" type="checkbox"> QQ</li><li><input checked="" disabled="" type="checkbox"> 腾讯会议</li><li><input checked="" disabled="" type="checkbox"> Zoom.us</li></ul><h2 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h2><ul><li><input disabled="" type="checkbox"> 搜狗输入法</li></ul><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><blockquote><p>随性记录一些常用快捷键。我发现<code>command</code>在很多场景下和 Windows 下的<code>ctrl</code>一样</p></blockquote><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td><code>fn + E</code></td><td>表情和符号（得自己设置）</td></tr><tr><td><code>opt + cmd + U</code></td><td>查看网页源代码</td></tr><tr><td><code>cmd + W</code></td><td>关闭App，但后台不退出</td></tr><tr><td><code>cmd + Q</code></td><td>退出App</td></tr></tbody></table><h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><h2 id="拆字法"><a href="#拆字法" class="headerlink" title="拆字法"></a>拆字法</h2><blockquote><p>一些生僻字找半天找不到，这时可以用拆字法，比如 昳，直接拆分成日和失，输入<code>ri + shi</code>和<code>shift + space</code>命令即可</p></blockquote><p><code>拆字拼音 + shift + space</code></p><h2 id="显示访达隐藏文件-夹"><a href="#显示访达隐藏文件-夹" class="headerlink" title="显示访达隐藏文件(夹)"></a>显示访达隐藏文件(夹)</h2><p><code>command + shift + .</code></p><h2 id="修改默认打开应用"><a href="#修改默认打开应用" class="headerlink" title="修改默认打开应用"></a>修改默认打开应用</h2><p>右键该文件 👉 显示简介 👉 打开方式</p><h2 id="剪切文件"><a href="#剪切文件" class="headerlink" title="剪切文件"></a>剪切文件</h2><p>先复制 <code>cmd + c</code>，再粘贴 <code>opt + cmd + v</code>，这样能达到剪切作用。如果直接 <code>cmd + v</code>，那么相当于复制了一个文件过去。</p><h1 id="如何在Mac和Windows之间轻松传输文件"><a href="#如何在Mac和Windows之间轻松传输文件" class="headerlink" title="如何在Mac和Windows之间轻松传输文件"></a>如何在Mac和Windows之间轻松传输文件</h1><blockquote><p>测试失败，估计我的 win10 太逊了，我还是老老实实用U盘传输。</p></blockquote><p>参考文章：</p><ol><li><p><a href="https://support.apple.com/zh-cn/HT204087">将数据从 Windows PC 转移至 Mac - Apple官网</a></p></li><li><p><a href="https://www.cyclonis.com/zh-hans/how-to-easily-transfer-files-between-mac-windows/">如何在Mac和Windows之间轻松传输文件 (cyclonis.com)</a></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;背景&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;（2022.10.18）我把妹妹的旧 MacBook Air 拿过来耍了耍，正好上课的时候可以用来做做笔记，我的 Dell 笔记本电池容量已经掉到了40%以下，满血续航撑不过一小时。妹妹的 M</summary>
      
    
    
    
    <category term="🤗干货分享" scheme="https://blog.harriswong.top/categories/%F0%9F%A4%97%E5%B9%B2%E8%B4%A7%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="👓Win10" scheme="https://blog.harriswong.top/tags/%F0%9F%91%93Win10/"/>
    
    <category term="🍎苹果产品" scheme="https://blog.harriswong.top/tags/%F0%9F%8D%8E%E8%8B%B9%E6%9E%9C%E4%BA%A7%E5%93%81/"/>
    
  </entry>
  
  <entry>
    <title>怎么用英语打电话和接电话？</title>
    <link href="https://blog.harriswong.top/posts/fdaf3758/"/>
    <id>https://blog.harriswong.top/posts/fdaf3758/</id>
    <published>2022-10-12T23:13:48.000Z</published>
    <updated>2022-10-12T23:13:48.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文为转载内容，来自 B 站 UP 主<code>和Helen学英语</code></p><p>原文地址：<a href="https://www.bilibili.com/video/BV1Et4y1w7ET/">怎么用英语打电话和接电话（常用的打电话英文）</a></p><p><a href="/cc">版权协议</a></p><p>还没和老外正儿八经打过电话，提前练一练。</p></blockquote><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?aid=986007000&bvid=BV1Et4y1w7ET&cid=848342300&page=1&as_wide=1&high_quality=1&danmaku=1" frameborder="no" scrolling="no" allowfullscreen="true"> </iframe></div><h1 id="你好，我是-Harris"><a href="#你好，我是-Harris" class="headerlink" title="你好，我是 Harris"></a>你好，我是 Harris</h1><ul><li>Hello, this is Harris.</li><li>Hello, this is Harris calling.</li><li>Hello, it&#39;s Harris.</li><li>Hello, my name is Harris.</li></ul><h1 id="Violetta-在吗？"><a href="#Violetta-在吗？" class="headerlink" title="Violetta 在吗？"></a>Violetta 在吗？</h1><ul><li>Is Violetta available?</li><li>Is Violetta free?</li><li>Is Violetta there?</li><li>is Violetta in?</li><li>Could I speak to Violetta, please?</li></ul><h1 id="我就是-Violetta"><a href="#我就是-Violetta" class="headerlink" title="我就是 Violetta"></a>我就是 Violetta</h1><ul><li>Violetta speaking.</li><li>This is Violetta.</li><li>This is her.</li><li>Speaking.</li></ul><h1 id="Violetta-不在"><a href="#Violetta-不在" class="headerlink" title="Violetta 不在"></a>Violetta 不在</h1><ul><li>I&#39;m sorry, Violetta is not here right now.</li><li>I&#39;m sorry, Violetta is not available at the moment.</li></ul><h1 id="我打电话是为了"><a href="#我打电话是为了" class="headerlink" title="我打电话是为了____"></a>我打电话是为了____</h1><ul><li>I&#39;m calling about __</li><li>I&#39;m calling for __</li></ul><h1 id="请问你是谁？"><a href="#请问你是谁？" class="headerlink" title="请问你是谁？"></a>请问你是谁？</h1><ul><li>Who&#39;s this?</li><li>May I ask who&#39;s calling?</li><li>Who am I speaking to?</li></ul><h1 id="请稍等"><a href="#请稍等" class="headerlink" title="请稍等"></a>请稍等</h1><ul><li>Can I put you on hold?</li><li>Would you mind holding for a moment?</li><li>I&#39;m going to put you on hold for a second.</li></ul><p>简单说法：</p><ul><li>One moment, please.</li><li>Just a moment.</li><li>Hang on a second.</li></ul><h1 id="我可以给她留个言吗？"><a href="#我可以给她留个言吗？" class="headerlink" title="我可以给她留个言吗？"></a>我可以给她留个言吗？</h1><ul><li>Can I leave her a message?</li><li>Could you pass on a message to me?</li></ul><h1 id="你想给她留个言吗？"><a href="#你想给她留个言吗？" class="headerlink" title="你想给她留个言吗？"></a>你想给她留个言吗？</h1><ul><li>Would you like to leave a message?</li><li>Can I take a message for her?</li><li>Should I give her a message?</li></ul><h1 id="没听清楚"><a href="#没听清楚" class="headerlink" title="没听清楚"></a>没听清楚</h1><ul><li>I&#39;m sorry, I didn&#39;t get that.</li><li>I&#39;m sorry, I didn&#39;t catch that.</li><li>Sorry, I didn&#39;t quite understand.</li></ul><h1 id="能再说一遍吗？"><a href="#能再说一遍吗？" class="headerlink" title="能再说一遍吗？"></a>能再说一遍吗？</h1><ul><li>Could you say that again?</li><li>Could you say that one more time?</li><li>Could you repeat that please?</li></ul><p>熟人之间可以这么简说：</p><ul><li>What did you say?</li><li>What was that?</li><li>Sorry, say that again?</li></ul><h1 id="说慢点"><a href="#说慢点" class="headerlink" title="说慢点"></a>说慢点</h1><ul><li>Would you mind slowing down a little?</li></ul><h1 id="说大声点"><a href="#说大声点" class="headerlink" title="说大声点"></a>说大声点</h1><ul><li>Would you mind speaking up a bit?</li></ul><h1 id="这个词是怎么拼写的？"><a href="#这个词是怎么拼写的？" class="headerlink" title="这个词是怎么拼写的？"></a>这个词是怎么拼写的？</h1><ul><li>Can you spell it?</li><li>Could you spell that for me?</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文为转载内容，来自 B 站 UP 主&lt;code&gt;和Helen学英语&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;https://www.bilibili.com/video/BV1Et4y1w7ET/&quot;&gt;怎么用英语打电话和接电话（常用</summary>
      
    
    
    
    <category term="👍优质转载" scheme="https://blog.harriswong.top/categories/%F0%9F%91%8D%E4%BC%98%E8%B4%A8%E8%BD%AC%E8%BD%BD/"/>
    
    
    <category term="🔠英语" scheme="https://blog.harriswong.top/tags/%F0%9F%94%A0%E8%8B%B1%E8%AF%AD/"/>
    
    <category term="🔡情景英语" scheme="https://blog.harriswong.top/tags/%F0%9F%94%A1%E6%83%85%E6%99%AF%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>计算机专业英语词汇短语</title>
    <link href="https://blog.harriswong.top/posts/62a3a0d6/"/>
    <id>https://blog.harriswong.top/posts/62a3a0d6/</id>
    <published>2022-10-09T23:42:14.000Z</published>
    <updated>2023-03-05T21:08:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在国外上课是真的听不懂，在提升自己英文能力的同时，计算机专业词汇也不要落下。</p></blockquote><h1 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h1><table><thead><tr><th>En</th><th>中</th></tr></thead><tbody><tr><td>camel case</td><td>驼峰式大小写</td></tr><tr><td>invoke</td><td>（函数、API）调用</td></tr><tr><td>memory utilisation</td><td>内存利用率</td></tr><tr><td>processing time</td><td>处理时间</td></tr><tr><td>regex</td><td>正则表达式</td></tr><tr><td>responsiveness</td><td>响应能力</td></tr><tr><td>stakeholders</td><td>利益相关者</td></tr><tr><td>syntax</td><td>（计算机语言的）句法规则，语法</td></tr><tr><td>ternary expression</td><td>三元表达式</td></tr></tbody></table><h1 id="拓展-数学"><a href="#拓展-数学" class="headerlink" title="拓展 - 数学"></a>拓展 - 数学</h1><table><thead><tr><th>En</th><th>中</th></tr></thead><tbody><tr><td>decimals</td><td>小数</td></tr><tr><td>exponential</td><td>指数的，增长越来越快的</td></tr><tr><td>modular</td><td>模数的，（取模）</td></tr><tr><td>remainder</td><td>余数</td></tr></tbody></table><h1 id="拓展-标点符号"><a href="#拓展-标点符号" class="headerlink" title="拓展 - 标点符号"></a>拓展 - 标点符号</h1><blockquote><p>在学习期间我慢慢接触到了一些非计算机词汇，但也很常用，例如括号、破折号等等。如果这些掌握了，是对英文环境下的学习是有帮助的。</p></blockquote><table><thead><tr><th>En</th><th>中</th></tr></thead><tbody><tr><td>ampersand</td><td>和、与，&amp;</td></tr><tr><td>angle brackets/braces</td><td>尖括号，&lt; &gt;</td></tr><tr><td>asterisk</td><td>星号，*</td></tr><tr><td>backticks</td><td>反引号，`</td></tr><tr><td>comma</td><td>逗号，,</td></tr><tr><td>colon</td><td>冒号，:</td></tr><tr><td>cross</td><td>叉叉，❌</td></tr><tr><td>curly brackets/braces</td><td>花括号，{ }</td></tr><tr><td>dash</td><td>破折号，杠，-</td></tr><tr><td>dot, period</td><td>点，句号，.</td></tr><tr><td>exclamation mark</td><td>感叹号，!</td></tr><tr><td>hash tag/key</td><td>井字号，#</td></tr><tr><td>parentheses<br />brackets</td><td>括号，( )</td></tr><tr><td>question mark</td><td>问号，?</td></tr><tr><td>quotation mark</td><td>引号，&quot; &quot;</td></tr><tr><td>square brackets/braces</td><td>方括号、中括号，[ ]</td></tr><tr><td>slash</td><td>斜线号，/</td></tr><tr><td>space</td><td>空格，</td></tr><tr><td>tick</td><td>对勾，✔</td></tr><tr><td>underline<br />underscore</td><td>下划线，_</td></tr></tbody></table><div style="text-align:center;background:var(--harris-card-bg);border-radius:12px"><p style="color:#ce6a28;font-size:24px;display:inline-block;margin:6px 0">☕欲知后事如何，</p><p style="color:#a8c212;font-size:24px;display:inline-block;margin:6px 0">且听下回分解🍵</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在国外上课是真的听不懂，在提升自己英文能力的同时，计算机专业词汇也不要落下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;计算机&quot;&gt;&lt;a href=&quot;#计算机&quot; class=&quot;headerlink&quot; title=&quot;计算机&quot;&gt;&lt;/a&gt;计算机&lt;</summary>
      
    
    
    
    <category term="📕知识笔记" scheme="https://blog.harriswong.top/categories/%F0%9F%93%95%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="🔠英语" scheme="https://blog.harriswong.top/tags/%F0%9F%94%A0%E8%8B%B1%E8%AF%AD/"/>
    
    <category term="🔡情景英语" scheme="https://blog.harriswong.top/tags/%F0%9F%94%A1%E6%83%85%E6%99%AF%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>如何写英语邮件</title>
    <link href="https://blog.harriswong.top/posts/31996b8c/"/>
    <id>https://blog.harriswong.top/posts/31996b8c/</id>
    <published>2022-10-05T14:32:26.000Z</published>
    <updated>2022-10-30T01:49:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>到了英国我发现不得不经常写邮件，这是和他人或者部门机构沟通的必备技能，除非自己口语非常厉害，否则还是老老实实把邮件写好。本篇文章将整合自己摸索出来的经验以及互联网上的文章。</p></blockquote><p>大致结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(问候语)</span><br><span class="line"></span><br><span class="line">(主体部分)</span><br><span class="line"></span><br><span class="line">[祝福语]</span><br><span class="line">(署名)</span><br></pre></td></tr></table></figure><h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><blockquote><p>按照邮件结构来讲解如何写每个部分</p></blockquote><h2 id="问候语"><a href="#问候语" class="headerlink" title="问候语"></a>问候语</h2><h2 id="主体部分"><a href="#主体部分" class="headerlink" title="主体部分"></a>主体部分</h2><h3 id="问候语、祝福语（可选）"><a href="#问候语、祝福语（可选）" class="headerlink" title="问候语、祝福语（可选）"></a>问候语、祝福语（可选）</h3><ul><li>I hope you&#39;re well!</li><li>I hope all is well with you.</li><li>I hope this email finds you well.</li><li>Hope you are fine.</li><li>Wish everything is well with you.</li><li>Wish you have a nice day!</li><li>Good morning! Hope you have got a wonderful weekend!</li></ul><h2 id="祝福语（可选）"><a href="#祝福语（可选）" class="headerlink" title="祝福语（可选）"></a>祝福语（可选）</h2><ul><li>Best wishes,</li><li>Best regards,</li><li>Kind regards,</li><li>Warmest regards,</li><li>Yours faithfully,</li><li>Sincerely,</li></ul><h2 id="署名"><a href="#署名" class="headerlink" title="署名"></a>署名</h2><h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><blockquote><p>按照不同主题的邮件来讲解如何写。</p></blockquote><div style="text-align:center;background:var(--harris-card-bg);border-radius:12px"><p style="color:#ce6a28;font-size:24px;display:inline-block;margin:6px 0">☕欲知后事如何，</p><p style="color:#a8c212;font-size:24px;display:inline-block;margin:6px 0">且听下回分解🍵</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;到了英国我发现不得不经常写邮件，这是和他人或者部门机构沟通的必备技能，除非自己口语非常厉害，否则还是老老实实把邮件写好。本篇文章将整合自己摸索出来的经验以及互联网上的文章。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大致结构：&lt;/p&gt;
&lt;figur</summary>
      
    
    
    
    <category term="📕知识笔记" scheme="https://blog.harriswong.top/categories/%F0%9F%93%95%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="🔠英语" scheme="https://blog.harriswong.top/tags/%F0%9F%94%A0%E8%8B%B1%E8%AF%AD/"/>
    
    <category term="🔡情景英语" scheme="https://blog.harriswong.top/tags/%F0%9F%94%A1%E6%83%85%E6%99%AF%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>如何催促老外回邮件？</title>
    <link href="https://blog.harriswong.top/posts/dac487c5/"/>
    <id>https://blog.harriswong.top/posts/dac487c5/</id>
    <published>2022-09-19T12:24:50.000Z</published>
    <updated>2022-10-30T01:48:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>九月租房的时候，房东老是拖延，于是我在网上搜索并整理了下一般催人技巧。</p><p>以下是以外贸商和客户为案例进行讲解。</p></blockquote><blockquote><p>分析下原因，再写封追踪信给Ta：</p></blockquote><p>Hope you are fine, my friend.</p><p><strong>It is regret that I haven&#39;t received any information from your side</strong>. May I have your idea about our offer? We will try to satisfy you upon receipt of your reply. As we don&#39;t want to lose a good customer like you!</p><p><strong>If there is anything we can do for you, we shall be more than pleased to do so</strong>. Hope we can build good cooperation with you.</p><blockquote><p>如果客人还没有回信，一周后再问客人不回信的真实原因。（一般情况，70%的客人会告诉你他的原因）</p></blockquote><p>Glad to contact you again!</p><p><strong>Have you kindly check my offer?</strong> Hope they are workable for your market! <strong>Sorry that we still don&#39;t receive any information from you</strong>. I would appreciate for your any comment about our offer, including price, quality, and service. No matter if it is a positive answer, It is a great help for us to meet your requirement.</p><p>Waiting for your favourable reply soon!</p><blockquote><p>之后的日子里，可以尝试新产品的报价，刺激下客人的神经，通常可以这样写的：</p></blockquote><p>Good day!</p><p>My quotation of the digital photo frame you might have received and considered. <strong>Could you kindly advise your comments at your earlier convenience?</strong></p><p>If the products are not what you are expecting, pls advise me of your details requirement, and I will re-offer ASAP.</p><p>I am of service at any time!</p><blockquote><p>但是，不同的客人，我会变换着写邮件，让客人知道我们公司，产品的存在。我不会把客人缠得太紧，约十来天给他一封邮件我通常这样回复的：</p></blockquote><p>Dear XXX,</p><p>Wish you have a nice day!</p><p><strong>May I ask whether you have received my quotation? Now I am sending it again if you have any other ideas.</strong> Please feel free to contact me. We will do much better if you can give us any advice to us.</p><p>I am waiting for your reply ASAP.</p><p>Best regards</p><p>Wennie.</p><blockquote><p>但是，想成功可不是容易的事情。</p></blockquote><p>Dear Sir/Madam,</p><p><strong>Have you received our quotation of ...</strong>, if you have any further questions, please don&#39;t hesitate to contact us. <strong>We are waiting for</strong> your comment about our quotation.</p><p>We hope to establish a good business relationship with you soon.</p><p>Your prompt reply will be appreciated.</p><blockquote><p>回复A：直接去函敦促</p></blockquote><p>Wish everything is well with you and your esteemed company! We receive your letter dated Aug 10, and as requested was expressed you 3 catalogues for our refrigeration goods. We hope they will reach you in due course and will help you in making your selection. Wish we will promote the business as well as friendship!</p><blockquote><p>回复B： 先写邮件问清情况。本人觉得先写邮件问清情况，简单的询问，如HAVE YOU RECEIVED MY P/I, IS THERE ANY QUESTION OR PROBLEM WITH YOU? 再问何时开L/C 或汇订金过来.....如客户没回复，那你应该(很有必要)打个电话过去问清情况。是价格问题还是临时发生改变? 客户是中间商，还在等最终客户的确认？还是其它问题？然后根据情况做一些措施看能否挽回这一张订单。 </p></blockquote><p>Dear Sir,</p><p>Good morning! Hope you have got a wonderful weekend! <strong>For several days no news from you</strong>, my friend. <strong>Now I am writing for reminding you about</strong> our offer for an item dated XX XX XX according to your relative inquiry. Have you got (or checked) the prices or not? ( You can add some words to introduce the advantage of your product or something else to attract the customer). Any comments by return will be much appreciated. It will be our big pleasure if we have opportunities to be of service to you in near future. Looking forward to your prompt response. </p><p>Thanks and best regards. </p><p>Yours Faithfully,</p><p>Harris</p><blockquote><p>回复C：如果仍然没有回音的话，可以在一两个月后再写一封信。</p></blockquote><p>Dear Sir,</p><p><strong>Now I am writing for keeping in touch with you for</strong> further business. If you have any new inquiries, welcome here and I will try my best to satisfy you well with competitive prices as per your request. By the way, how about your order (or business) with item XXX? If still pending I would like to offer our latest prices to promote an opportunity to cooperate. </p><p>Thanks and best regards,</p><p>Harris</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;九月租房的时候，房东老是拖延，于是我在网上搜索并整理了下一般催人技巧。&lt;/p&gt;
&lt;p&gt;以下是以外贸商和客户为案例进行讲解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;分析下原因，再写封追踪信给Ta：&lt;/p&gt;
&lt;/block</summary>
      
    
    
    
    <category term="📕知识笔记" scheme="https://blog.harriswong.top/categories/%F0%9F%93%95%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="🔠英语" scheme="https://blog.harriswong.top/tags/%F0%9F%94%A0%E8%8B%B1%E8%AF%AD/"/>
    
    <category term="🔡情景英语" scheme="https://blog.harriswong.top/tags/%F0%9F%94%A1%E6%83%85%E6%99%AF%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>情景英语——租房</title>
    <link href="https://blog.harriswong.top/posts/67705f7b/"/>
    <id>https://blog.harriswong.top/posts/67705f7b/</id>
    <published>2022-09-02T17:42:41.000Z</published>
    <updated>2022-10-14T15:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="词汇"><a href="#词汇" class="headerlink" title="词汇"></a>词汇</h1><blockquote><p>主要针对英国这边的租房</p></blockquote><table><thead><tr><th>En</th><th>中</th></tr></thead><tbody><tr><td>studio apartment</td><td>一房小公寓、套房（含厕所）</td></tr><tr><td>apartment/flat</td><td>美国/英国公寓中的单元</td></tr><tr><td>house</td><td>有草坪和后院的独栋房子，别墅</td></tr><tr><td>dormitory/dorm</td><td>大学宿舍</td></tr><tr><td>hostel / youth hostel / student hostel</td><td>青年公寓、学生公寓</td></tr><tr><td>home stay / family stay / host stay</td><td>寄宿家庭（指和房东住在一起，由房东提供食宿）</td></tr><tr><td>university accommodation</td><td>学校宿舍（住在大学提供的宿舍里）</td></tr><tr><td>private accommodation</td><td>私人住房</td></tr><tr><td>deposit</td><td>押金</td></tr><tr><td>holding fee/deposit</td><td>定金，持有押金</td></tr><tr><td>bill</td><td>生活杂费（一般是水电网）</td></tr><tr><td>council tax</td><td>市政税</td></tr><tr><td>guarantor</td><td>担保人</td></tr><tr><td>service charge</td><td>中介费</td></tr></tbody></table><h1 id="句子"><a href="#句子" class="headerlink" title="句子"></a>句子</h1><h2 id="准备看房"><a href="#准备看房" class="headerlink" title="准备看房"></a>准备看房</h2><p>I saw your advertisement for an apartment to rent and I’m very interested.</p><p>我看到了你的租房广告，很感兴趣。</p><p>Do you have any apartments for rent right now?</p><p>请问还有房子可以出租吗？</p><p>What kind of apartment do you have?</p><p>你们有什么样的公寓呢？</p><p>Would it be ok to look at the room now?</p><p>现在能看看房子吗？</p><p>When would it be convenient for me to view the room, please?</p><p>请问我什么时候去看房比较方便呢？</p><p>So can I visit the apartment this Friday morning?</p><p>那我这个礼拜五早上可以看看公寓吗？</p><p>“My name is… I saw your advertisement for a room/house/apartment to rent and am very interested.”</p><p>我的名字是...我看到你的租房广告，很感兴趣。</p><p>“When would it be convenient for me to view the room please?”</p><p>请问我什么时候去看房较方便呢？</p><p>“I’m sorry I am only able to view after 6 o’clock (or 6 p.m.) in the evening or at weekends due to my work commitments.”</p><p>不好意思，由于工作关系，我只能在晚上 6 点后或周末有时间看</p><p>“I could view the room in my lunch break between 12 and 2p.m.”</p><p>我可以在午餐休息时大约在 12 点到下午 2 点有时间。</p><p>“So that’s Wednesday evening at 6p.m? I look forward to meeting you.”</p><p>那么就在周三晚上 6 点吧？很期待见到你。</p><h2 id="询问细节"><a href="#询问细节" class="headerlink" title="询问细节"></a>询问细节</h2><p>Are the utilities included in the rent?</p><p>房租中包括水、电和煤气费吗？</p><p>How much does electricity cost?</p><p>电费多少钱？</p><p>Is there a fire extinguisher?</p><p>这里有灭火器吗？</p><p>I want to rent your apartment.</p><p>我想租你的公寓。</p><p>Are we allowed to keep pets?</p><p>可以养宠物吗？</p><p>When can we move in?</p><p>我们什么时候可以搬进来？</p><p>It&#39;s a nice apartment.</p><p>这套房子挺让人喜欢的。</p><p>Can I get it back when I move out?</p><p>当我搬走的时候，我的押金能取回来吗？</p><p>This faucet leaks day and night.</p><p>这个水龙头在不停地漏水。</p><p>Are there laundry facilities/air conditioners?</p><p>这里有洗衣设备/空调吗？</p><p>I&#39;d like an apartment with two bedrooms and one bath.</p><p>我想要两间式室带洗澡间的。</p><p>Do you still have a one-bedroom apartment for rent?</p><p>你们还有单间卧室出租吗?</p><p>I love the living room; it&#39;s huge and filled with sunshine.</p><p>我喜欢客厅，比较大，而且阳光充足。</p><p>I like the apartment. You can show me the lease.</p><p>我很喜欢这套公寓，你可以给我看看租约了。</p><p>Is there a telephone connection? I need to be able to get internet access.</p><p>这里可以通电话和网线吗？</p><p>Can I have a month-to-month lease? I only want to rent the apartment for five months.</p><p>我能按月租赁吗？我只想租 5 个月。</p><p>What kind of heater is the room equipped with, a gas or an electric one?</p><p>房子是用哪种热水器，瓦斯还是电热水器？</p><p>What&#39;s the house rent? When is the rent due? And how much security deposit do you require?</p><p>房租是多少？什么时候付房租？另外你们要求付多少保证金？</p><p>It&#39;s located in the suburbs? Well even though that sounds like a steal, I really want something downtown.</p><p>房子在郊区？嗯……虽然这房子听起来特别划算，我还是想租个在市区的房子。</p><p>“Does the rent include the costs for water and heating?”</p><p>房租包括水和暖气的费用吗？</p><p>“How much are the electricity/gas/water bills for a year?”</p><p>一年的水电气需要支付多少钱？</p><p>“Is there a telephone connection? I need to be able to get internet access.”</p><p>这里可以接通电话吗？ 我还需要网线。</p><p>“How many other rooms are let in the building?”</p><p>这幢房子里还有哪些房间允许进入？</p><p>“How many people share the bathroom/kitchen?”</p><p>多少人共用浴室或厨房？</p><p>“Is there a laundry room?”</p><p>有洗衣房吗？</p><p>“So this studio apartment has an open plan area which is for living, sleeping and cooking with a separate bathroom?”</p><p>那么这套公寓有敞开式的区域供居住，睡觉和烹饪，还有一间独立的浴室？</p><p>“So this apartment has an open plan living area with kitchenette, a separate bedroom and a bathroom?”</p><p>那么这套公寓有敞开式的居住区域有小厨房，独立的卧室和浴室？</p><p>“Do you have an apartment available with its own separate kitchen, bedroom and bathroom?”</p><p>你们这有可以拥有自己的独立厨房，卧室和浴室的公寓吗？</p><p>“Is there a washing machine/dishwasher in the kitchen?”</p><p>厨房里有洗衣机或洗碗碟的机器吗？</p><p>“Do any of the other tenants have children?”</p><p>其它的租客有孩子吗？</p><p>“Am I allowed to redecorate the rooms?”</p><p>我可以重新装修房子吗？</p><p>“How long is the rental lease for?”</p><p>契约期是多长？</p><p>“Do I have to pay a security deposit?”</p><p>我需要付押金吗？</p><p>“Have many other people viewed the room already?”</p><p>已经有多少人看过房了？</p><p>“When will you decide who gets the room?”</p><p>你什么时候能决定下来租给谁？</p><p>“When would I be able to move in?”</p><p>我什么时候可以搬进来？</p><p>“How much notice”</p><p>多少钱？</p><p>“Am I allowed to use the garden at the rear or does that belong to the ground floor apartment?”</p><p>我可以使用后边的花园吗？或者那个花园属于一楼的公寓吗？</p><h2 id="住后问题"><a href="#住后问题" class="headerlink" title="住后问题"></a>住后问题</h2><blockquote><p>一旦你搬进去，你可能会在房子里或公寓里出错误，虽然悲剧，但别着急！</p></blockquote><p>“The heating/air conditioning/washing machine/dishwasher isn’t working.”</p><p>暖气/空调/洗衣机/洗碗碟机坏了。</p><p>“I’m having a problem with my key and lock. It is difficult to unlock the door.”</p><p>我的锁和钥匙出问题了，锁很难打开。</p><p>“The timed light always goes out before I can reach the landing.”</p><p>定时感应灯通常还没等我走到楼下就熄灭了。</p><p>“Could you organize for it to be repaired please?”</p><p>你能抽时间修一下吗？</p><p>“I’m sorry but I have to complain about the neighbours upstairs/downstairs/on the other side of the hallway.”</p><p>不好意思，但是我得投诉楼上/楼下/走廊对面的邻居。</p><p>“They are very noisy.”</p><p>他们太吵了。</p><p>“They leave their garbage in the hallway which leaves an unpleasant smell and attracts cats, mice and rats.”</p><p>他们把垃圾堆在走廊里，味道很难闻，还把猫和老鼠都招来了。</p><p>“They leave bicycles in the hallway and it is difficult to open the door and get into the hallway.”</p><p>他们把自行车停在走廊里，这样很难开门，很难走到走廊上。</p><p>“The children leave toys on the stairs, which is very dangerous.”</p><p>小孩子把玩具丢在楼梯上，很危险的。</p><h1 id="我的小备注"><a href="#我的小备注" class="headerlink" title="我的小备注"></a>我的小备注</h1><blockquote><p>我在租房时写的备注</p></blockquote><p><strong>想问中介的问题</strong>：</p><ol><li>担保人 I don&#39;t have a guarantor, but I have financial documents</li><li>分期付款 instalment</li><li>我需要付款多少磅？（有无 hidden costs）</li><li>浴室。how many bathrooms are on this property?</li><li>室友。Can you introduce the roommate?</li><li>家具。Is there any damage to the furniture in this room</li></ol><p>退房：</p><ol><li><p>房租退租时需要打扫到什么程度？</p></li><li><p>非人为因素导致电器设施损坏，谁负责维修，以及是否收费？</p></li></ol><p><strong>结束语</strong>：</p><p>If I make any decisions, I&#39;ll let you know</p><p>Thanks for your sharing</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;词汇&quot;&gt;&lt;a href=&quot;#词汇&quot; class=&quot;headerlink&quot; title=&quot;词汇&quot;&gt;&lt;/a&gt;词汇&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;主要针对英国这边的租房&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;En</summary>
      
    
    
    
    <category term="📕知识笔记" scheme="https://blog.harriswong.top/categories/%F0%9F%93%95%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="🔠英语" scheme="https://blog.harriswong.top/tags/%F0%9F%94%A0%E8%8B%B1%E8%AF%AD/"/>
    
    <category term="🔡情景英语" scheme="https://blog.harriswong.top/tags/%F0%9F%94%A1%E6%83%85%E6%99%AF%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>打印机使用日记——吐槽蛋疼的加墨方式</title>
    <link href="https://blog.harriswong.top/posts/d5b87a06/"/>
    <id>https://blog.harriswong.top/posts/d5b87a06/</id>
    <published>2022-08-21T14:00:00.000Z</published>
    <updated>2022-08-21T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>这款是<strong>佳能腾彩 MG2580S</strong>打印机，从我哥家那借来的，他已几年没有使用，也忘了当初的一些使用过程，并且人在外地，所以我就不麻烦他了，打算自己查阅并摸索使用方法。</p><p>现在心情十分糟糕，因为我已经花了半天的时间在打印机上了，现在满手都是三四种颜色的墨水，其实它明明是一件看得着很简单的事情，这款打印机又不是打印店用的那种按钮特别多，需要一一弄清楚，但就是各种相关事情加起来能把我搞疯！</p><p>首先第一个挫折是，需要安装驱动，于是我在佳能官网找到了这款驱动，但是在安装过程中，显示 MP driver 还没有下载，于是乎我在百度找了半天，但都没有找到解决方案，最后阴差阳错在<a href="https://www.bilibili.com/video/BV1sF411E7QC">B 站的一个视频</a>里找到了解决方案，我可能在官网找错了驱动。第二个挫折就是，它的三个指示灯在亮，有时候三个全亮，有时候其中两个灯在亮，在网上查了后得知，分别有不同的意思以及不同的故障原因，例如：没有墨水了，墨盒接触不良，墨盒坏了等等，就接触不良这个原因，我来来回回安装/拆卸了十几次，然后墨水也加了很多次，第一次使用，没有经验，而且我只是打印几张纸而已，也别问为什么不在外面打印，我家附近没有专门的打印店，而且我一个工科生，总是要了解如何使用打印机的，有这个借的机会为何不把握呢？就这个加墨水的过程我得好好吐槽吐槽，我借来的东西还包括一个收纳盒，里边有四瓶墨水，颜色分别是黑红蓝黄，还有三支针管，为啥不直接把墨水往墨盒里倒啊？还要搞这么麻烦，需要用针把墨吸出来然后再挤到墨盒里。一开始没有经验，我把针管活塞拔了，然后往里倒墨水，我想着针头的孔小，应该有大气压的缘故可以使它不漏出来，结果倒进去的墨水直接从针头处全漏了，给我一种鼻血的感觉，没有任何水的张力，直接往下疯狂地掉，漏到我手上加桌子上，印子在手上还洗不掉，气 s 我了。最后思考一番，应该是要直接从墨水瓶里吸到注射器里，再注射到墨盒里，但这无法一人完成，于是我让我爸倾斜拿着墨水瓶，我用注射器吸，主要那个墨水瓶口小、瓶身高且墨水不多了，需要把瓶子倾斜着，我再左手捏着注射器，右手拉活塞将墨水吸进来，最后注射到墨水盒里，且不说我拔了活塞这件事导致我手上染了很多墨水，就算我正常操作，也会不由自主碰到墨水，例如，针管注射完了后，墨盒的进墨口周围多少会粘点墨，然后扭瓶盖的时候，也会有部分墨水溢出来，总而言之，给墨盒加墨水的整个操作非常不优雅不丝滑，浪费了我很多时间，而且还染了我一手五颜六色，在此敢问发明者，有没有更合适的加墨方案？？？</p><p>说到这，你以为完了？成功了？没有，打印机好不容易被调整到可以顺利执行打印操作的状态（因为墨水盒有问题的话，它是不会工作的），打印出来的纸张只有一丢丢墨水，无法观看，我已经加了很多次墨水了，还是没有用，我就差整瓶往里灌了，要知道往里加一次墨水很麻烦的，上一段已经吐槽过。最后，以失败告终，虽然很难受，但我至少比未使用过打印机的人多一些经验。这次失败，我推测是硬件问题，大概率是需要更换一个墨盒，<strong>我未来要买打印机的话，会额外看加墨方式是否优雅</strong>，我不希望在加墨过程中费时费力。</p><p>我真的是在某些方面勇于探索并且愿意拼搏到成功的那一刻，但天有不测风云，还得接受失败，也正好及时止损。</p><blockquote><p>对了，记录一个小技巧：<strong>长按“停止键”8 秒，可以刷新墨盒接触状态</strong>。</p><p>比如墨盒接触不良，你重新安装上去后，要执行以上操作，橙色指示灯状态才会刷新。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这款是&lt;strong&gt;佳能腾彩 MG2580S&lt;/strong&gt;打印机，从我哥家那借来的，他已几年没有使用，也忘了当初的一些使用过程，并且人在外地，所以我就不麻烦他了，打算自己查阅并摸索使用方法。&lt;/p&gt;
&lt;p&gt;现在心情十分糟糕，因为我已经花了半天的时间在打印机上了，现在满</summary>
      
    
    
    
    <category term="💬茶余饭后" scheme="https://blog.harriswong.top/categories/%F0%9F%92%AC%E8%8C%B6%E4%BD%99%E9%A5%AD%E5%90%8E/"/>
    
    
    <category term="🖨打印机" scheme="https://blog.harriswong.top/tags/%F0%9F%96%A8%E6%89%93%E5%8D%B0%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>React学习笔记</title>
    <link href="https://blog.harriswong.top/posts/a1605017/"/>
    <id>https://blog.harriswong.top/posts/a1605017/</id>
    <published>2022-07-11T15:31:38.000Z</published>
    <updated>2023-02-18T21:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我看的是<a href="https://scrimba.com/learn/learnreact/">React 教学视频 - Scrimba</a>，<a href="https://www.bilibili.com/video/BV14y4y1g7M4/">React 零基础入门好客租房项目实战</a></p></blockquote><h1 id="React-入门"><a href="#React-入门" class="headerlink" title="React 入门"></a>React 入门</h1><h2 id="Intro-介绍"><a href="#Intro-介绍" class="headerlink" title="Intro 介绍"></a>Intro 介绍</h2><h3 id="CDN、导包"><a href="#CDN、导包" class="headerlink" title="CDN、导包"></a>CDN、导包</h3><p>CDN：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">  <span class="attr">crossorigin</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@17/umd/react.development.js&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">  <span class="attr">crossorigin</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react-dom@17/umd/react-dom.development.js&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/babel-standalone@6/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>导包，无需使用 CDN：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li><p>Composable 可组合的</p><p>我们有一些小的代码碎片，我们可以把它们拼在一起，组成更大的东西。</p></li><li><p>Declarative 声明的</p><p>声明性意味着我可以告诉计算机要做什么，并期望它处理细节。</p></li></ol><h3 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h3><p><code>ReactDOM.render(&lt;html代码&gt;,&lt;在哪渲染&gt;)</code></p><p>例如：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Harris<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure><p>或者（React 18 新语法）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.createRoot(&lt;在哪渲染&gt;).render(</span><br><span class="line">&lt;代码&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom/client&quot;</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.createRoot(<span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>)).render(<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Harris<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>);</span><br></pre></td></tr></table></figure><p>如果将 &lt;html 代码&gt; 定义到变量里，最外层只能是父节点一个，可以是<code>&lt;div&gt; ... &lt;/div&gt;</code>也可以写成空标签<code>&lt;&gt; ... &lt;/&gt;</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> page = (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;html代码&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="JSX-内部的-JS"><a href="#JSX-内部的-JS" class="headerlink" title="JSX 内部的 JS"></a>JSX 内部的 JS</h3><p>括号() 里写 HTML 代码</p><p>花括号{} 里的代码可以写 JS 语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function App() &#123;</span><br><span class="line">    const firstName &#x3D; &quot;Harris&quot;</span><br><span class="line">    const lastName &#x3D; &quot;Wong&quot;</span><br><span class="line">    return (</span><br><span class="line">        &lt;h1&gt;Hello &#123;firstName&#125; &#123;lastName&#125;!&lt;&#x2F;h1&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Hello Harris Wong!</span><br></pre></td></tr></table></figure><blockquote><p>Note: 如果想在 HTML 里加入 JS 逻辑代码，可以加上花括号{}，但只能写表达式，不能写赋值等语句。</p></blockquote><h2 id="Component-function"><a href="#Component-function" class="headerlink" title="Component: function"></a>Component: function</h2><h3 id="Custom-Components-自定义组件"><a href="#Custom-Components-自定义组件" class="headerlink" title="Custom Components 自定义组件"></a>Custom Components 自定义组件</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TemporaryName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;html代码&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">TemporaryName</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>))</span><br></pre></td></tr></table></figure><p>更简洁的写法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> TemporaryName = <span class="function">() =&gt;</span> (</span><br><span class="line">  &lt;html代码&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>Note：组件名要大写</p><blockquote><p><strong>什么是 React 组件？</strong></p><p>返回 React 元素 的函数。（UI）</p></blockquote></blockquote><h3 id="Parent-Child-Components-父子组件"><a href="#Parent-Child-Components-父子组件" class="headerlink" title="Parent/Child Components 父子组件"></a>Parent/Child Components 父子组件</h3><p>形如：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Children</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;html代码&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;Children /&gt;</span><br><span class="line">            &lt;html代码&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Styling-with-Classes-修饰类"><a href="#Styling-with-Classes-修饰类" class="headerlink" title="Styling with Classes 修饰类"></a>Styling with Classes 修饰类</h3><p>类名不再是像 JS 里的 class 了，而是 <strong>className</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 className&#x3D;&quot;name&quot;&gt;Harris&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure><p>把 JSX 里的代码当做 HTML，CSS 代码直接在 .css 文件里写，和往常一样</p><h3 id="Organize-components-整理组件"><a href="#Organize-components-整理组件" class="headerlink" title="Organize components 整理组件"></a>Organize components 整理组件</h3><blockquote><p>除了将代码按功能或者区域拆分成许多代码块还不够，代码量更大的时候，会考虑分离出一个文件出来。那么这时如何创建“组件文件”呢？且如何引用组件呢？</p></blockquote><p>“组件文件”：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Header</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">html代码</span>&gt;</span>)</span></span><br><span class="line"><span class="xml">=======</span></span><br><span class="line"><span class="xml">    return (<span class="tag">&lt;<span class="name">代码</span>&gt;</span>)</span></span><br><span class="line"><span class="xml">&gt;&gt;&gt;&gt;&gt;&gt;&gt; 345954b736d625ffb8d340a541b4888b28ad6077</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">// 或者</span></span><br><span class="line"></span><br><span class="line"><span class="xml">import React from &quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">function Header() &#123;</span></span><br><span class="line">    return (&lt;html代码&gt;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Header</span><br></pre></td></tr></table></figure><p>引用组件：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span></span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">&quot;./Header&quot;</span> （可以不带上后缀.js）</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Page</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;Header /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Page</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>))</span><br></pre></td></tr></table></figure><h2 id="Props-属性"><a href="#Props-属性" class="headerlink" title="Props 属性"></a>Props 属性</h2><blockquote><p>为了完成组件之间数据的通信，引入了 Props 概念</p></blockquote><p>&quot;Props&quot; refers to the properties being passed into a component in order for it to work correctly, similar to how a function receives parameters: &quot;from above.&quot; A component receiving props is not allowed to modify those props. (l.e. they are &quot;immutable（不可变的）&quot;)</p><p>例如，下面是一个加法器案例：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Addition</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;props.a&#125; + &#123;props.b&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Addition a=<span class="string">&quot;1&quot;</span> b=<span class="string">&quot;2&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p>可以看到，引用组件的同时，a、b 属性值将被传到 Addition 函数里的 props 参数里，并以对象的方式保存。通过 <code>props.&lt;属性名&gt;</code>可以在函数里调用组件传来的值。</p><blockquote><ol><li><p>组件和函数里的 props 名称可以随意取，但函数里的参数最好还是写 props。</p></li><li><p>img 里的 src 可以像这样调用数据：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&#123;props.img&#125;/&gt;</span><br><span class="line">或类似于</span><br><span class="line">&lt;img src=&#123;<span class="string">`../images/<span class="subst">$&#123;props.img&#125;</span>`</span>&#125; /&gt;</span><br></pre></td></tr></table></figure><p><code>$&#123;&#125;</code>这个符号能使我们在字符串里传入变量</p></li><li><p>原生 HTML 标签的 style 可以这样调用数据：<code>&lt;p style=&#123;&#123;display: props.name ? "block" : "none"&#125;&#125;&gt;&#123;props.name&#125;&lt;/p&gt;</code>。这里注意是 2 个花括号，因为里面包含 JS 里的三元表达式（ternary expression），所以要再加一个花括号，当然了，style 里的值本身就是一个对象，所以需要花括号。</p></li></ol></blockquote><p><strong>Props 的作用</strong>：</p><p>What do props help us accomplish?</p><p>Make a component more reusable.</p><h3 id="另一种-props-取值方式"><a href="#另一种-props-取值方式" class="headerlink" title="另一种 props 取值方式"></a>另一种 props 取值方式</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Contact</span>(<span class="params">&#123;title, content&#125; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">return</span> (</span></span></span><br><span class="line"><span class="function"><span class="params">    &lt;div&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">      &lt;h1&gt;&#123;title&#125;&lt;/h1&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">      &lt;p&gt;&#123;content&#125;&lt;/p&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">    &lt;/div&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span></span></span><br></pre></td></tr></table></figure><h3 id="Passing-in-non-string-props-传入非字符串类的-Props"><a href="#Passing-in-non-string-props-传入非字符串类的-Props" class="headerlink" title="Passing in non-string props 传入非字符串类的 Props"></a>Passing in non-string props 传入非字符串类的 Props</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Student</span><br><span class="line">  name=<span class="string">&quot;Harris&quot;</span></span><br><span class="line">  DOB=&#123;<span class="number">2000.08</span>&#125;</span><br><span class="line">  isMale=&#123;<span class="literal">true</span>&#125;</span><br><span class="line">  grade=&#123;&#123; <span class="attr">Chinese</span>: <span class="number">88</span>, <span class="attr">Math</span>: <span class="number">96</span>, <span class="attr">English</span>: <span class="number">98</span> &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><blockquote><p>由此可见，传入非字符串需要用到花括号 {}</p></blockquote><h3 id="prop-key"><a href="#prop-key" class="headerlink" title="prop: key"></a>prop: key</h3><p>记得组件里得带上一个 key 属性，值一般是 id 之类唯一的值，否则控制台会有一个 warning</p><blockquote><p>推荐使用 nanoid 包，会随机产生一个 id</p></blockquote><h3 id="Pass-object-as-props"><a href="#Pass-object-as-props" class="headerlink" title="Pass object as props"></a>Pass object as props</h3><blockquote><p>这样不需要在调用组件时写太多数据传输的相关代码</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> students = data.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Students</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span> <span class="attr">item</span>=<span class="string">&#123;item&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Students</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//用props.item来调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spread-object-as-props-将对象作为-props-展开"><a href="#Spread-object-as-props-将对象作为-props-展开" class="headerlink" title="Spread object as props 将对象作为 props 展开"></a>Spread object as props 将对象作为 props 展开</h3><blockquote><p>这样写代码更简洁</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> students = data.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Students</span> <span class="attr">key</span>=<span class="string">&#123;item.id&#125;</span> &#123;<span class="attr">...item</span>&#125; /&gt;</span></span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Students</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line"><span class="comment">//还是用props来调用，但相比上一个例子，可少写props后面的“.item”</span></span><br><span class="line">=======</span><br><span class="line"><span class="comment">//还是用props来调用</span></span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; <span class="number">345954</span>b736d625ffb8d340a541b4888b28ad6077</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比一下之前的繁杂写法：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> students = data.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Students</span><br><span class="line">      key=&#123;item.id&#125;</span><br><span class="line">      name=&#123;item.name&#125;</span><br><span class="line">      age=&#123;item.age&#125;</span><br><span class="line">      sex=&#123;item.sex&#125;</span><br><span class="line">      ...</span><br><span class="line">      /&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="props-children"><a href="#props-children" class="headerlink" title="props.children"></a>props.children</h3><p>除了下面这种写法可以传值</p><p><code>&lt;Students name=&quot;Harris&quot;, sex=&quot;Male&quot;&gt;</code></p><p>还有如下方式，可以将 html 代码通过 <code>props.children</code>传入组件里</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Students&gt;</span><br><span class="line">  &lt;h1&gt;Harris&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;Male&lt;/h1&gt;</span><br><span class="line">&lt;/Students&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Students</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title=".map()"></a>.map()</h2><p>一般这里使用<code>.map()</code>是为了批量将数据加工成为可视化代码，例如：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> students = studentData.map(<span class="function">(<span class="params">student</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Student</span> <span class="attr">name</span>=<span class="string">&#123;student.name&#125;</span> <span class="attr">sex</span>=<span class="string">&#123;student.sex&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>小问答</strong>：</p><ol><li><p>What does the <code>.map()</code> array method do?<br>Returns a new array. Whatever gets returned from the callback function provided is placed at the same index in the new array. Usually, we take the items from the original array and modify them in some way.</p></li><li><p>What do we usually use <code>.map()</code> for in React?<br>Convert an array of raw data into an array of JSX elements that can be displayed on the page.</p></li><li><p>Why is using <code>.map()</code> better than just creating the components manually by typing them out?<br>It makes our code more &quot;self-sustaining&quot; - not requiring additional changes whenever the data changes.</p></li></ol><h2 id="Static-Web-Pages-静态-Web-页面"><a href="#Static-Web-Pages-静态-Web-页面" class="headerlink" title="Static Web Pages 静态 Web 页面"></a>Static Web Pages 静态 Web 页面</h2><ul><li><strong>Read-only,</strong> no changes to data</li><li>Examples<ul><li>Blogs</li><li>News sites</li><li>etc.</li></ul></li></ul><h2 id="Dynamic-Web-Apps-动态-Web-应用程序"><a href="#Dynamic-Web-Apps-动态-Web-应用程序" class="headerlink" title="Dynamic Web Apps 动态 Web 应用程序"></a>Dynamic Web Apps 动态 Web 应用程序</h2><ul><li><strong>Read-write</strong>: ability to change data</li><li>Highly interactive</li><li>Displays <strong>your</strong> data</li></ul><h2 id="Event-listeners-事件侦听器"><a href="#Event-listeners-事件侦听器" class="headerlink" title="Event listeners 事件侦听器"></a>Event listeners 事件侦听器</h2><p>An event listener is a procedure in JavaScript that waits for an event to occur. A simple example of an event is a user clicking the mouse or pressing a key on the keyboard.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;I was clicked!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;button onClick=&#123;handleClick&#125;&gt;Click me&lt;/button&gt;</span><br><span class="line">    &lt;/&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多：<a href="https://reactjs.org/docs/events.html#mouse-events">Mouse Events 鼠标事件</a>（95%的事件侦听事件都和 鼠标事件 有关）</p><h2 id="State-状态"><a href="#State-状态" class="headerlink" title="State 状态"></a>State 状态</h2><blockquote><p>我们编码时发现 function 运行后无法更改组件里的变量，这时需引入 state 概念。</p></blockquote><p>&quot;State&quot; refers to values that are managed by the component, similar to variables declared inside a function. Any time you have changing values that should be save/displayed, you&#39;ll likely be using state.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isMale = React.useState(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  &lt;div className=<span class="string">&quot;state&quot;</span>&gt;</span><br><span class="line">    &lt;div className=<span class="string">&quot;state--value&quot;</span>&gt;</span><br><span class="line">      &lt;h1&gt;&#123;isMale[<span class="number">0</span>]&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// isMale打印后：&#123;&quot;Yes&quot;, f()&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>f()</code>指的是一个 function，通过这个 function 咋们可以改变 state 的值</p></blockquote><p>用 Array destructuring 数组解构这种方式：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [isMale, func] = React.useState(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  &lt;div className=<span class="string">&quot;state&quot;</span>&gt;</span><br><span class="line">    &lt;div className=<span class="string">&quot;state--value&quot;</span>&gt;</span><br><span class="line">      &lt;h1&gt;&#123;isMale&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：是<code>[isMale, func]</code>而不是<code>&#123;isMale, func&#125;</code>，中括号[ ]！</p></blockquote><h3 id="Changing-state"><a href="#Changing-state" class="headerlink" title="Changing state"></a>Changing state</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [isMale, setIsMale] = React.useState(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setIsMale(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  &lt;div className=<span class="string">&quot;state&quot;</span>&gt;</span><br><span class="line">    &lt;div className=<span class="string">&quot;state--value&quot;</span> onClick=&#123;handleClick&#125;&gt;</span><br><span class="line">      &lt;h1&gt;&#123;isMale&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="Callback-function-回调函数"><a href="#Callback-function-回调函数" class="headerlink" title="Callback function 回调函数"></a>Callback function 回调函数</h4><blockquote><p>If you ever <u>need the old value of state to help you determine the new value of state</u>, you should pass a callback function to your state setter function instead of using state directly. This callback function will receive the old value of state as its parameter, which you can then use to determine your new value of state.</p><p>言简意赅，你若想更改 state 值，建议采用回调函数</p></blockquote><p>以加法函数为例，采用回调函数：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setCount(<span class="function">(<span class="params">prevCount</span>) =&gt;</span> prevCount + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Complex-state-arrays-数组"><a href="#Complex-state-arrays-数组" class="headerlink" title="Complex state: arrays 数组"></a>Complex state: arrays 数组</h4><blockquote><p>改数组有些麻烦</p></blockquote><p>以 To-do list 为例，这用到了 ES6 新语法：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [thingsArray, setThingsArray] = React.useState([<span class="string">&quot;Thing 1&quot;</span>, <span class="string">&quot;Thing 2&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addItem</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setThingsArray(<span class="function">(<span class="params">prevThingsArray</span>) =&gt;</span> [</span><br><span class="line">    ...prevThingsArray,</span><br><span class="line">    <span class="string">`Thing <span class="subst">$&#123;prevThingsArray.length&#125;</span>`</span>,</span><br><span class="line">  ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Complex-state-objects-对象"><a href="#Complex-state-objects-对象" class="headerlink" title="Complex state: objects 对象"></a>Complex state: objects 对象</h4><p>以学生信息为例：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [stuInfo, setStuInfo] = React.useState(&#123;</span><br><span class="line">  firstName: <span class="string">&quot;Harris&quot;</span>,</span><br><span class="line">  lastName: <span class="string">&quot;Wong&quot;</span>,</span><br><span class="line">  isMale: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleIsMale</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setContact(<span class="function">(<span class="params">prevStuInfo</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...prevStuInfo,</span><br><span class="line">      isMale: !prevStuInfo.isMale,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者，toggleIsMale()还可以这么写：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleIsMale</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setContact(<span class="function">(<span class="params">prevStuInfo</span>) =&gt;</span> (&#123;</span><br><span class="line">    ...prevStuInfo,</span><br><span class="line">    isMale: !prevStuInfo.isMale,</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>先将所有信息传入，再写要更改的属性。</p></blockquote><h3 id="Lazy-State-Initialization"><a href="#Lazy-State-Initialization" class="headerlink" title="Lazy State Initialization"></a>Lazy State Initialization</h3><blockquote><p>有时候 state 的不断改变，会导致整个组件重复被加载，有些代码可能加载一次很费网络资源，而且也不需要加载，这时候需要设置 Lazy State Initialization（惰性状态初始化）</p></blockquote><p>例如：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, setState] = React.useState(<span class="function">() =&gt;</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Lazy State Initialization&quot;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>也就是设置 callback function。像上面这个例子，控制台输出一次该语句，就不用再重复输出了。</p></blockquote><h2 id="Sharing-data-between-components-组件间共享数据"><a href="#Sharing-data-between-components-组件间共享数据" class="headerlink" title="Sharing data between components 组件间共享数据"></a>Sharing data between components 组件间共享数据</h2><blockquote><p>有时候子组件之间需要互传值怎么办？这时需要 raise state up to parent component.</p><p>在 React 里，数据只能从父组件下传到子组件，所以要想在子组件间共享某一个数值，则需要提前将该数据放在子组件<u>共有且最近的</u>父组件里。</p></blockquote><h2 id="Dynamic-styles-动态样式"><a href="#Dynamic-styles-动态样式" class="headerlink" title="Dynamic styles 动态样式"></a>Dynamic styles 动态样式</h2><blockquote><p>有时候一个组件或者元素的样式需要动态变化，那么需要做判断以决定用什么样式</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> styles = &#123;</span><br><span class="line">  backgroundColor: props.darkMode ? <span class="string">&quot;#222222&quot;</span> : <span class="string">&quot;#cccccc&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> squareElements = squares.map(<span class="function">(<span class="params">square</span>) =&gt;</span> (</span><br><span class="line">  &lt;div style=&#123;styles&#125; className=<span class="string">&quot;box&quot;</span> key=&#123;square.id&#125;&gt;&lt;/div&gt;</span><br><span class="line">));</span><br></pre></td></tr></table></figure><blockquote><p>这里要强调的是 style 里的属性不再是 CSS 里的那种，要写成驼峰式命名法 camel case</p></blockquote><h2 id="Conditional-rendering-条件渲染"><a href="#Conditional-rendering-条件渲染" class="headerlink" title="Conditional rendering 条件渲染"></a>Conditional rendering 条件渲染</h2><blockquote><p>顾名思义，就是满足特定条件了，才能渲染指定内容</p></blockquote><h3 id="amp-amp-logical-and-operator-逻辑与运算符"><a href="#amp-amp-logical-and-operator-逻辑与运算符" class="headerlink" title="&amp;&amp; logical and operator 逻辑与运算符"></a>&amp;&amp; logical and operator 逻辑与运算符</h3><blockquote><p>When you want to either display something or NOT display it</p></blockquote><p>以显示句子为例：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleShown</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setIsShown(<span class="function">(<span class="params">prevShown</span>) =&gt;</span> !prevShown);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;isShown &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;props.sentence&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#125;</span><br><span class="line">    &lt;button onClick=&#123;toggleShown&#125;&gt;Show Sentence&lt;/button&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="ternary-expression-三元表达式"><a href="#ternary-expression-三元表达式" class="headerlink" title="ternary expression 三元表达式"></a>ternary expression 三元表达式</h3><blockquote><p>When you need to decide which thing among 2 options to display</p></blockquote><p>例子同上：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;toggleShown&#125;&gt;&#123;isShown ? <span class="string">&quot;Hide&quot;</span> : <span class="string">&quot;Show&quot;</span>&#125; Sentence&lt;/button&gt;</span><br></pre></td></tr></table></figure><h3 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h3><blockquote><p>When you need to decide between &gt; 2 options on what to display</p><p>记住 return() 里的 {} 不能写 if else 语句，得在外边写</p></blockquote><h2 id="Form-表单"><a href="#Form-表单" class="headerlink" title="Form 表单"></a>Form 表单</h2><h3 id="onChange"><a href="#onChange" class="headerlink" title="onChange"></a>onChange</h3><blockquote><p>onChange：一个改变 value 就会触发的方法（表单常用）</p></blockquote><p>以表单输入学生信息为例：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleChange</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Changed!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  &lt;form&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> placeholder=<span class="string">&quot;First Name&quot;</span> onChange=&#123;handleChange&#125; /&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="event"><a href="#event" class="headerlink" title="event"></a>event</h3><blockquote><p>表单元素里方法被触发后，可以通过接受 event 参数 来获得表单里的值</p></blockquote><p>例子同上：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleChange</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(event.target.value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>event.target</code>里面除了 value 之外，还有其它常用属性：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleChange</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 我们可以像下面这样接收</span></span><br><span class="line">  <span class="keyword">const</span> &#123; name, value, type, checked &#125; = event.target;</span><br><span class="line">  setFormData(<span class="function">(<span class="params">prevFormData</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...prevFormData,</span><br><span class="line">      [name]: value,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="state-object"><a href="#state-object" class="headerlink" title="state object"></a>state object</h3><blockquote><p>有时候表单元素很多，一个一个写 handleChange 比较麻烦，这时候需要 object 来统一存储表单里的值</p></blockquote><p>例子同上：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [formData, setFormData] = React.useState(&#123; <span class="attr">firstName</span>: <span class="string">&quot;&quot;</span>, <span class="attr">lastName</span>: <span class="string">&quot;&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleChange</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, value &#125; = event.target;</span><br><span class="line">  setFormData(<span class="function">(<span class="params">prevFormData</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...prevFormData,</span><br><span class="line">      [name]: value,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  &lt;form&gt;</span><br><span class="line">    &lt;input</span><br><span class="line">      type=<span class="string">&quot;text&quot;</span></span><br><span class="line">      placeholder=<span class="string">&quot;First Name&quot;</span></span><br><span class="line">      onChange=&#123;handleChange&#125;</span><br><span class="line">      name=<span class="string">&quot;firstName&quot;</span></span><br><span class="line">      value=&#123;formData.firstName&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">    &lt;input</span><br><span class="line">      type=<span class="string">&quot;text&quot;</span></span><br><span class="line">      placeholder=<span class="string">&quot;Last Name&quot;</span></span><br><span class="line">      onChange=&#123;handleChange&#125;</span><br><span class="line">      name=<span class="string">&quot;lastName&quot;</span></span><br><span class="line">      value=&#123;formData.lastName&#125;</span><br><span class="line">    /&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="Application-Checkbox"><a href="#Application-Checkbox" class="headerlink" title="Application: Checkbox"></a>Application: Checkbox</h3><p>例子同上：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleChange</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;name, value, type, checked&#125; = event.target</span><br><span class="line">  setFormData(<span class="function"><span class="params">prevFormData</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...prevFormData,</span><br><span class="line">      [name]: type === <span class="string">&quot;checkbox&quot;</span> ? checked : value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;input</span><br><span class="line">  type=<span class="string">&quot;checkbox&quot;</span></span><br><span class="line">  id=<span class="string">&quot;isMale&quot;</span></span><br><span class="line">  checked=&#123;formData.isMale&#125;</span><br><span class="line">  onChange=&#123;handleChange&#125;</span><br><span class="line">  name=<span class="string">&quot;isMale&quot;</span></span><br><span class="line">  /&gt;</span><br><span class="line">&lt;label htmlFor=<span class="string">&quot;isMale&quot;</span>&gt;Are you male?&lt;/label&gt;</span><br></pre></td></tr></table></figure><blockquote><p>其中设置 id 是为了 htmlFor 能够定向到，即点击文字也可以选中按钮</p></blockquote><h3 id="Application-Radio-buttons"><a href="#Application-Radio-buttons" class="headerlink" title="Application: Radio buttons"></a>Application: Radio buttons</h3><p>例子同上：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleChange</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; name, value, type, checked &#125; = event.target;</span><br><span class="line">  setFormData(<span class="function">(<span class="params">prevFormData</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...prevFormData,</span><br><span class="line">      [name]: value,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;fieldset&gt;</span><br><span class="line">  &lt;legend&gt;Current employment status&lt;/legend&gt;</span><br><span class="line"></span><br><span class="line">  &lt;input</span><br><span class="line">    type=<span class="string">&quot;radio&quot;</span></span><br><span class="line">    id=<span class="string">&quot;unemployed&quot;</span></span><br><span class="line">    name=<span class="string">&quot;employment&quot;</span></span><br><span class="line">    value=<span class="string">&quot;unemployed&quot;</span></span><br><span class="line">    checked=&#123;formData.employment === <span class="string">&quot;unemployed&quot;</span>&#125;</span><br><span class="line">    onChange=&#123;handleChange&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">  &lt;label htmlFor=<span class="string">&quot;unemployed&quot;</span>&gt;Unemployed&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">  &lt;input</span><br><span class="line">    type=<span class="string">&quot;radio&quot;</span></span><br><span class="line">    id=<span class="string">&quot;employed&quot;</span></span><br><span class="line">    name=<span class="string">&quot;employment&quot;</span></span><br><span class="line">    value=<span class="string">&quot;employed&quot;</span></span><br><span class="line">    checked=&#123;formData.employment === <span class="string">&quot;employed&quot;</span>&#125;</span><br><span class="line">    onChange=&#123;handleChange&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">  &lt;label htmlFor=<span class="string">&quot;employed&quot;</span>&gt;Employed&lt;/label&gt;</span><br><span class="line">&lt;/fieldset&gt;;</span><br></pre></td></tr></table></figure><h3 id="Application-Select-amp-Option"><a href="#Application-Select-amp-Option" class="headerlink" title="Application: Select &amp; Option"></a>Application: Select &amp; Option</h3><p>例子同上：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;label htmlFor=<span class="string">&quot;favColor&quot;</span>&gt;What is your favorite subject?&lt;/label&gt;</span><br><span class="line">&lt;select</span><br><span class="line">  id=<span class="string">&quot;favSubject&quot;</span></span><br><span class="line">  value=&#123;formData.favSubject&#125;</span><br><span class="line">  onChange=&#123;handleChange&#125;</span><br><span class="line">  name=<span class="string">&quot;favSubject&quot;</span></span><br><span class="line">  &gt;</span><br><span class="line">  &lt;option value=<span class="string">&quot;&quot;</span>&gt;-- Choose --&lt;/option&gt;</span><br><span class="line">  &lt;option value=<span class="string">&quot;chinese&quot;</span>&gt;Chinese&lt;/option&gt;</span><br><span class="line">  &lt;option value=<span class="string">&quot;english&quot;</span>&gt;English&lt;/option&gt;</span><br><span class="line">  &lt;option value=<span class="string">&quot;math&quot;</span>&gt;<span class="built_in">Math</span>&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h3 id="Application-Submitting-the-form"><a href="#Application-Submitting-the-form" class="headerlink" title="Application: Submitting the form"></a>Application: Submitting the form</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleSubmit</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event.preventDefault();</span><br><span class="line">  <span class="built_in">console</span>.log(formData);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  &lt;form onSubmit=&#123;handleSubmit&#125;&gt;</span><br><span class="line">    [html代码]</span><br><span class="line">    &lt;button&gt;Sumbit&lt;/button&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><ol><li><code>&lt;button&gt;</code>默认是<code>type=&quot;submit&quot;</code>，故这里可省略。</li><li><code>event.preventDefault()</code> 作用是阻止页面刷新，这样我们就可以正常运行<code>handleSubmit</code>方法。你可以理解成这是提交表单信息时必写的句子。</li></ol></blockquote><h2 id="Side-effects-副作用"><a href="#Side-effects-副作用" class="headerlink" title="Side effects 副作用"></a>Side effects 副作用</h2><h3 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect()"></a>useEffect()</h3><blockquote><p>有时候我们希望一些方法在组件渲染后运行，这时可以将代码写进 <code>useEffect()</code> 里，这样可以消除无限循环调用的副作用。比如请求数据等。</p></blockquote><p><code>React.useEffect(func, [param1, parma2...])</code>有两个参数：</p><p><code>func</code> 是必填参数（方法），<code>params</code> 是可选参数（依赖，数组形式）</p><p>例如，当 <code>count</code> 的值变化了，则运行方法里的代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">React.useEffect(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Effect ran&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  [count]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p><strong>Note</strong>：</p><ol><li><p>如果依赖里留空，则在组件第一次加载完毕后运行一次，之后不再运行。</p><p>适合写 setInterval、请求数据等：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> intervalId = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setCount(<span class="function"><span class="params">prevCount</span> =&gt;</span> prevCount + <span class="number">1</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(intervalId)</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure></li><li><p>在某些情况下，我们可能需要在组件卸载时<u>清除副作用</u>，这时可以在 <code>useEffect</code> 中 return 一个函数，这个函数会在组件卸载时执行，用于清除在 <code>useEffect</code> 中设置的副作用，比如取消请求或取消订阅事件等。上例就能说明。</p></li><li><p><code>useEffect</code> 可以在一个组件里写多个。</p></li></ol></blockquote><h3 id="Using-an-async-function-inside-useEffect-Clone"><a href="#Using-an-async-function-inside-useEffect-Clone" class="headerlink" title="Using an async function inside useEffect (Clone)"></a>Using an async function inside useEffect (Clone)</h3><p>useEffect takes a function as its parameter. If that function returns something, it needs to be a cleanup function. Otherwise, it should return nothing. If we make it an async function, it automatically retuns a promise instead of a function or nothing. Therefore, if you want to use async operations inside of useEffect, you need to define the function separately inside of the callback function, as seen below:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">React.useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getMemes</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(<span class="string">&quot;https://api.imgflip.com/get_memes&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> res.json();</span><br><span class="line">    setAllMemes(data.data.memes);</span><br><span class="line">  &#125;</span><br><span class="line">  getMemes();</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><h2 id="Component-Class"><a href="#Component-Class" class="headerlink" title="Component: Class"></a>Component: Class</h2><blockquote><p>这是比较过时的概念，Bob Ziroll 希望我们也学习了解一下</p></blockquote><p>index.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> <span class="attr">type</span>=<span class="string">&quot;Class&quot;</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure><p>App.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// export default function App(props) &#123;</span></span><br><span class="line"><span class="comment">//     return (</span></span><br><span class="line"><span class="comment">//         &lt;h1&gt;&#123;props.type&#125; component&lt;/h1&gt;</span></span><br><span class="line"><span class="comment">//     )</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.props.type&#125; component<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>与 Function 组件 不同点是它多了一个<code>this.</code>，并且无需声明 props 参数 就可以直接通过<code>this.props</code>调用</p></blockquote><h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><p>看以下两种的区别</p><p>Function:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [goOut, setGoOut] = React.useState(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">toggleGoOut</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    setGoOut(<span class="function">(<span class="params">prevState</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> prevState === <span class="string">&quot;Yes&quot;</span> ? <span class="string">&quot;No&quot;</span> : <span class="string">&quot;Yes&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;state&quot;</span>&gt;</span><br><span class="line">      &lt;h1 className=<span class="string">&quot;state--title&quot;</span>&gt;Should I go out tonight?&lt;/h1&gt;</span><br><span class="line">      &lt;div className=<span class="string">&quot;state--value&quot;</span> onClick=&#123;toggleGoOut&#125;&gt;</span><br><span class="line">        &lt;h1&gt;&#123;goOut&#125;&lt;/h1&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Class:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * A class component with state will ALWAYS save state in a class</span></span><br><span class="line"><span class="comment">   * instance variable called `state`, which will always be an object.</span></span><br><span class="line"><span class="comment">   * The individual values you save in state will be properties on</span></span><br><span class="line"><span class="comment">   * the `state` object.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * The simplest (and more modern) way to delcare new state in a</span></span><br><span class="line"><span class="comment">   * class component is to just use a &quot;class field&quot; declaring state</span></span><br><span class="line"><span class="comment">   * as an object, like you see below.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * Then, throughout the rest of the component (e.g. inside the render</span></span><br><span class="line"><span class="comment">   * method) you can access that state with `this.state.&lt;yourPropertyHere&gt;`</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  state = &#123;</span><br><span class="line">    goOut: <span class="string">&quot;Yes&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Any class methods you create that need to call the `this.setState`</span></span><br><span class="line"><span class="comment">   * method (which is available to our component because we&#x27;re extending</span></span><br><span class="line"><span class="comment">   * React.Component) should be declared as an arrow function, for</span></span><br><span class="line"><span class="comment">   * reasons we will discuss soon. (Note: other class methods you</span></span><br><span class="line"><span class="comment">   * want to make that DON&#x27;T use `this.setState` don&#x27;t necessarily</span></span><br><span class="line"><span class="comment">   * need to be declared as arrow function to work correctly)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  toggleGoOut = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(<span class="function">(<span class="params">prevState</span>) =&gt;</span> (&#123;</span><br><span class="line">      goOut: prevState.goOut === <span class="string">&quot;Yes&quot;</span> ? <span class="string">&quot;No&quot;</span> : <span class="string">&quot;Yes&quot;</span>,</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">&quot;state&quot;</span>&gt;</span><br><span class="line">        &lt;h1 className=<span class="string">&quot;state--title&quot;</span>&gt;Should I go out tonight?&lt;/h1&gt;</span><br><span class="line">        &lt;div className=<span class="string">&quot;state--value&quot;</span> onClick=&#123;<span class="built_in">this</span>.toggleGoOut&#125;&gt;</span><br><span class="line">          &lt;h1&gt;&#123;<span class="built_in">this</span>.state.goOut&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Constructor-method"><a href="#Constructor-method" class="headerlink" title="Constructor method"></a>Constructor method</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * If you can&#x27;t use class fields in your class components</span></span><br><span class="line"><span class="comment">   * for some reason, then you&#x27;ll need to make use of the</span></span><br><span class="line"><span class="comment">   * class&#x27; `constructor` method to initialize your state object.</span></span><br><span class="line"><span class="comment">   * The first line of the constructor method should be a call</span></span><br><span class="line"><span class="comment">   * to `super()` like you see below, and then you can add your</span></span><br><span class="line"><span class="comment">   * state variable as a property attached to `this`</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      goOut: <span class="string">&quot;Yes&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">this</span>.toggleGoOut = <span class="built_in">this</span>.toggleGoOut.bind(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * If you can&#x27;t use arrow functions for your class methods,</span></span><br><span class="line"><span class="comment">   * you&#x27;ll need to make sure to `bind` them inside the</span></span><br><span class="line"><span class="comment">   * constructor above.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="title">toggleGoOut</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setState(<span class="function">(<span class="params">prevState</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        goOut: prevState.goOut === <span class="string">&quot;Yes&quot;</span> ? <span class="string">&quot;No&quot;</span> : <span class="string">&quot;Yes&quot;</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">&quot;state&quot;</span>&gt;</span><br><span class="line">        &lt;h1 className=<span class="string">&quot;state--title&quot;</span>&gt;Should I go out tonight?&lt;/h1&gt;</span><br><span class="line">        &lt;div className=<span class="string">&quot;state--value&quot;</span> onClick=&#123;<span class="built_in">this</span>.toggleGoOut&#125;&gt;</span><br><span class="line">          &lt;h1&gt;&#123;<span class="built_in">this</span>.state.goOut&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lifecycle-methods-componentDidMount"><a href="#Lifecycle-methods-componentDidMount" class="headerlink" title="Lifecycle methods: componentDidMount()"></a>Lifecycle methods: componentDidMount()</h3><p>当组件挂载后再运行的 function</p><h3 id="Lifecycle-methods-componentDidUpdate"><a href="#Lifecycle-methods-componentDidUpdate" class="headerlink" title="Lifecycle methods: componentDidUpdate()"></a>Lifecycle methods: componentDidUpdate()</h3><p>当组件更新后再运行的 function</p><p>为了防止循环调用：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">componentDidUpdate</span>(<span class="params">prevProps, prevState</span>)</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">if</span>(<span class="params">prevState.data !== <span class="built_in">this</span>.state.data</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.getData(<span class="built_in">this</span>.state.data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当目前的数据和之前的不一样时，以此表明数据更新了，于是再来调用 function，否则会循环调用。</p></blockquote><h3 id="Lifecycle-methods-componentWillUnmount"><a href="#Lifecycle-methods-componentWillUnmount" class="headerlink" title="Lifecycle methods: componentWillUnmount()"></a>Lifecycle methods: componentWillUnmount()</h3><p>在组件即将卸载前运行的 function</p><p>例如，在组建卸载时去除事件监听器（解绑事件）：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">window</span>.removeEventListener(<span class="string">&#x27;mousemove&#x27;</span>, <span class="built_in">this</span>.handleMouseMove)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lifecycle-methods-shouldComponentUpdate"><a href="#Lifecycle-methods-shouldComponentUpdate" class="headerlink" title="Lifecycle methods: shouldComponentUpdate()"></a>Lifecycle methods: shouldComponentUpdate()</h3><blockquote><p>父组件更新会引起子组件的更新，有时子组件不需要更新，那么可以使用该钩子函数 shouldComponentUpdate(nextProps, nextState)</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">shouldComponentUpdate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">//根据条件，决定是否重新渲染组件</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h1 id="React-进阶"><a href="#React-进阶" class="headerlink" title="React 进阶"></a>React 进阶</h1><blockquote><p>课程里最新 API：<a href="https://swapi.dev/api/people/1/">https://swapi.dev/api/people/1/</a></p></blockquote><h2 id="lt-React-Fragment-gt"><a href="#lt-React-Fragment-gt" class="headerlink" title="&lt;React.Fragment&gt;"></a>&lt;React.Fragment&gt;</h2><p>它是一个虚拟容器，用来包含其它元素，而不会在渲染中对实际的 DOM 元素产生任何影响。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyComponent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;React.Fragment&gt;</span><br><span class="line">      &lt;h1&gt;My Title&lt;/h1&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;Item <span class="number">1</span>&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;Item <span class="number">2</span>&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;Item <span class="number">3</span>&lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/React.Fragment&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>React 16.2 及更高版本中引入了简写语法，允许使用空标签 <code>&lt;&gt;&lt;/&gt;</code> 来表示 Fragment，而不是使用完整的语法 <code>&lt;React.Fragment&gt;&lt;/React.Fragment&gt;</code></p><h2 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h2><h3 id="Default-Props"><a href="#Default-Props" class="headerlink" title="Default Props"></a>Default Props</h3><blockquote><p>有时组件没有传入 props，这时需要写默认值</p></blockquote><p>方法 1，定义<code>&lt;Conponent&gt;.defaultProps</code>：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Card</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> styles = &#123;</span><br><span class="line">    backgroundColor: props.cardColor,</span><br><span class="line">    height: props.height,</span><br><span class="line">    width: props.width,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;styles&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Card.defaultProps = &#123;</span><br><span class="line">  cardColor: <span class="string">&quot;blue&quot;</span>,</span><br><span class="line">  height: <span class="number">100</span>,</span><br><span class="line">  width: <span class="number">100</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>方法 2：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Card</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> styles = &#123;</span><br><span class="line">    backgroundColor: props.cardColor || <span class="string">&quot;black&quot;</span>,</span><br><span class="line">    height: props.height || <span class="number">100</span>,</span><br><span class="line">    width: props.width || <span class="number">100</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;styles&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Prop-Types"><a href="#Prop-Types" class="headerlink" title="Prop Types"></a><a href="https://reactjs.org/docs/typechecking-with-proptypes.html#proptypes">Prop Types</a></h3><blockquote><p>有时 prop 值需要类型来限制/定义一下，防止组件传了错误类型的值。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">&quot;prop-types&quot;</span></span><br><span class="line"></span><br><span class="line">Card.propTypes = &#123;</span><br><span class="line">  cardColor: PropTypes.string.isRequired</span><br><span class="line">  height: PropTypes.number</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Render-Props"><a href="#Render-Props" class="headerlink" title="Render Props"></a>Render Props</h3><blockquote><p>它是通过将渲染函数作为组件的 props 传递的方式。它允许一个组件将其 UI 渲染代码传递给另一个组件，以便在其上进行操作。</p></blockquote><p>例如，假设有一个需要显示当前鼠标位置的组件，它可以使用 render props 将鼠标位置信息传递到 UI 上：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MouseTracker = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [position, setPosition] = React.useState(&#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleMouseMove = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    setPosition(&#123;</span><br><span class="line">      x: event.clientX,</span><br><span class="line">      y: event.clientY,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onMouseMove</span>=<span class="string">&#123;handleMouseMove&#125;</span>&gt;</span>&#123;props.render(position)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;Move the mouse around!&lt;/h1&gt;</span><br><span class="line">      &lt;MouseTracker</span><br><span class="line">        render=&#123;<span class="function">(<span class="params">&#123; x, y &#125;</span>) =&gt;</span> (</span><br><span class="line">          &lt;p&gt;</span><br><span class="line">            The mouse position is (&#123;x&#125;, &#123;y&#125;)</span><br><span class="line">          &lt;/p&gt;</span><br><span class="line">        )&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Higher-Order-Components-HOCs-高阶组件"><a href="#Higher-Order-Components-HOCs-高阶组件" class="headerlink" title="Higher Order Components (HOCs) 高阶组件"></a>Higher Order Components (HOCs) 高阶组件</h2><blockquote><p>可以让您重用组件的逻辑，并对组件进行自定义扩展。</p></blockquote><p>比如给组件提供横向滚动的功能：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> withHorizontalScroll = <span class="function">(<span class="params">WrappedComponent</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div style=&#123;&#123; <span class="attr">overflowX</span>: <span class="string">&quot;scroll&quot;</span> &#125;&#125;&gt;</span><br><span class="line">        &lt;WrappedComponent &#123;...props&#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 HOC 包装组件，下方List是一个组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withHorizontalScroll(List);</span><br></pre></td></tr></table></figure><h2 id="Performance-Optimization"><a href="#Performance-Optimization" class="headerlink" title="Performance Optimization"></a>Performance Optimization</h2><h3 id="React-PureComponent"><a href="#React-PureComponent" class="headerlink" title="React.PureComponent"></a>React.PureComponent</h3><blockquote><p>有时候父组件发生了状态或值的更改，其所有后代组件都会被迫渲染一次，很费时，将原来的<code>Component</code>换成<code>React.PureComponent</code>即可解决问题。</p><p><code>React.PureComponent</code>只用于 Class 组件。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;PureComponent&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;[ ]   [ ]   [🧒🏻]   [ ] rendered&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;p&gt;I<span class="string">&#x27;m a Child Component&lt;/p&gt;</span></span><br><span class="line"><span class="string">                &lt;GrandChild /&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        )</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="React-memo"><a href="#React-memo" class="headerlink" title="React.memo()"></a>React.memo()</h3><blockquote><p>可用于 Function 组件，类似于高阶组件的用法。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GrandParent</span>(<span class="params"></span>) </span>&#123;    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;[👴🏼]   [ ]   [ ]   [ ] rendered&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;p&gt;I<span class="string">&#x27;m a GrandParent Component&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;Parent /&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default React.memo(GrandParent)</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.memo(<span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;[ ]   [👩]   [ ]   [ ] rendered&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;p&gt;I<span class="string">&#x27;m a Parent Component&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;Child /&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    )</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure><h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><blockquote><p>Context 提供了一种通过组件树传递数据的方法，而无需在每个级别手动传递 props。</p></blockquote><h3 id="Context-Provider"><a href="#Context-Provider" class="headerlink" title="Context Provider"></a>Context Provider</h3><blockquote><p>Context Provider 相当于上下文的提供者，提供给组件使用共享的数据。它通常写在最低共同父组件的层级，这样既能方便相应组件访问 Context，也能准确控制 Context 数据被使用范围。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ThemeContext = React.createContext()</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;ThemeContext.Provider &gt;</span><br><span class="line">        &lt;App /&gt;</span><br><span class="line">    &lt;/ThemeContext.Provider&gt;, </span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="contextType"><a href="#contextType" class="headerlink" title="contextType"></a>contextType</h3><blockquote><p>contextType 更像是组件接收 context 的容器，通过<code>this.context</code>来取值，但只有 Class 组件可以用。</p></blockquote><p>下例是切换深浅模式功能：</p><p><code>Button.js</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ThemeContext <span class="keyword">from</span> <span class="string">&quot;./themeContext&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">//写法1，仅下面1行</span></span><br><span class="line"><span class="keyword">static</span> contextType = ThemeContext</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(this.context)</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;button className=&#123;<span class="built_in">this</span>.context == <span class="string">&#x27;light&#x27;</span> ? <span class="string">&#x27;light-theme&#x27;</span> : <span class="string">&#x27;dark-theme&#x27;</span>&#125;&gt;Switch Theme&lt;/button&gt;</span><br><span class="line">    )    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写法2</span></span><br><span class="line"><span class="comment">//Button.contextType = ThemeContext</span></span><br></pre></td></tr></table></figure><p><code>index.js</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ThemeContext <span class="keyword">from</span> <span class="string">&quot;./themeContext&quot;</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;ThemeContext.Provider value=&#123;<span class="string">&quot;dark&quot;</span>&#125;&gt;</span><br><span class="line">        &lt;App /&gt;</span><br><span class="line">    &lt;/ThemeContext.Provider&gt;, </span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="Context-Consumer"><a href="#Context-Consumer" class="headerlink" title="Context Consumer"></a>Context Consumer</h3><blockquote><p>它更像是给 Function 组件使用的。</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ThemeContext <span class="keyword">from</span> <span class="string">&quot;./themeContext&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;ThemeContext.Consumer&gt;</span><br><span class="line">            &#123;<span class="function"><span class="params">theme</span> =&gt;</span> (</span><br><span class="line">                &lt;button className=&#123;<span class="string">`<span class="subst">$&#123;theme&#125;</span>-theme`</span>&#125;&gt;Switch Theme&lt;/button&gt;</span><br><span class="line">            )&#125;</span><br><span class="line">        &lt;/ThemeContext.Consumer&gt;</span><br><span class="line">    )    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Move-Context-Provider-to-its-own-component"><a href="#Move-Context-Provider-to-its-own-component" class="headerlink" title="Move Context Provider to its own component"></a>Move Context Provider to its own component</h3><blockquote><p>把上下文提供者写成组件更好，代码细节应该封装到一个组件里，也方便写 State。</p></blockquote><p>ThemeContext.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">const</span> &#123;Provider, Consumer&#125; = React.createContext()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ThemeContextProvider = <span class="function">(<span class="params">props</span>) =&gt;</span>  &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      &lt;Provider value=&#123;<span class="string">&quot;light&quot;</span>&#125;&gt;</span><br><span class="line">          &#123;props.children&#125;</span><br><span class="line">      &lt;/Provider&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;ThemeContextProvider, Consumer <span class="keyword">as</span> ThemeContextConsumer&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Note：<code>value=&#123;&quot;light&quot;&#125;</code> 记得写上花括号 {}，因为这只接收 object 形式</p></blockquote><p>index.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123;ThemeContextProvider&#125; <span class="keyword">from</span> <span class="string">&quot;./themeContext&quot;</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;ThemeContextProvider&gt;</span><br><span class="line">        &lt;App /&gt;</span><br><span class="line">    &lt;/ThemeContextProvider&gt;, </span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Button.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123;ThemeContextConsumer&#125; <span class="keyword">from</span> <span class="string">&quot;./themeContext&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;ThemeContextConsumer&gt;</span><br><span class="line">            &#123;<span class="function"><span class="params">theme</span> =&gt;</span> (</span><br><span class="line">                &lt;button className=&#123;<span class="string">`<span class="subst">$&#123;theme&#125;</span>-theme`</span>&#125;&gt;Switch Theme&lt;/button&gt;</span><br><span class="line">            )&#125;</span><br><span class="line">        &lt;/ThemeContextConsumer&gt;</span><br><span class="line">    )    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Button</span><br></pre></td></tr></table></figure><h3 id="Changing-Context"><a href="#Changing-Context" class="headerlink" title="Changing Context"></a>Changing Context</h3><blockquote><p>获取上下文的值后，经常还需要更改上下文的值。</p></blockquote><p>ThemeContext.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">const</span> &#123;Provider, Consumer&#125; = React.createContext()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThemeContextProvider</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        theme: <span class="string">&quot;dark&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    toggleTheme = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(<span class="function"><span class="params">prevState</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                theme: prevState.theme === <span class="string">&quot;light&quot;</span> ? <span class="string">&quot;dark&quot;</span> : <span class="string">&quot;light&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Provider value=&#123;&#123;<span class="attr">theme</span>: <span class="built_in">this</span>.state.theme, <span class="attr">toggleTheme</span>: <span class="built_in">this</span>.toggleTheme&#125;&#125;&gt;</span><br><span class="line">                &#123;<span class="built_in">this</span>.props.children&#125;</span><br><span class="line">            &lt;/Provider&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;ThemeContextProvider, Consumer <span class="keyword">as</span> ThemeContextConsumer&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>&lt;Provider&gt;</code>组件的 props 只能是 <strong>value</strong>，如果要传入多个变量，得写成 object 形式。</p></blockquote><p>Button.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123;ThemeContextConsumer&#125; <span class="keyword">from</span> <span class="string">&quot;./themeContext&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;ThemeContextConsumer&gt;</span><br><span class="line">            &#123;<span class="function"><span class="params">context</span> =&gt;</span> (</span><br><span class="line">                &lt;button onClick=&#123;context.toggleTheme&#125; className=&#123;<span class="string">`<span class="subst">$&#123;context.theme&#125;</span>-theme`</span>&#125;&gt;Switch Theme&lt;/button&gt;</span><br><span class="line">            )&#125;</span><br><span class="line">        &lt;/ThemeContextConsumer&gt;</span><br><span class="line">    )    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Button</span><br></pre></td></tr></table></figure><h2 id="Hooks⭐️"><a href="#Hooks⭐️" class="headerlink" title="Hooks⭐️"></a>Hooks⭐️</h2><blockquote><p>React 内置的 Hooks 包括 <code>useState</code>, <code>useEffect</code>, <code>useContext</code>, <code>useRef</code>, <code>useReducer</code>（常用）</p><p><code>useMemo</code>, <code>useCallback</code>, <code>useImperativeHandle</code>, <code>useLayoutEffect</code>, <code>useDebugValue</code>.</p><p>你也可以自定义 Hooks。</p></blockquote><h3 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h3><blockquote><p> <code>useRef</code>的主要的功能就是帮助我们获取到DOM元素或者组件实例，它还可以保存在组件生命周期内不会变化的值。</p><p> 有时候希望点了按钮后，聚焦仍在输入框里，这时可以用 <code>useRef</code>。</p></blockquote><p>下例是一个 Todo list，我只保留了与 useRef 相关代码，看看如何使用就好：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inputRef = useRef(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  event.preventDefault()</span><br><span class="line">  setTodosList(<span class="function"><span class="params">prevTodosList</span> =&gt;</span> [...prevTodosList, newTodoValue])</span><br><span class="line">  setNewTodoValue(<span class="string">&quot;&quot;</span>)</span><br><span class="line">  inputRef.current.focus()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">      &lt;input ref=&#123;inputRef&#125; type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;todo&quot;</span> value=&#123;newTodoValue&#125; onChange=&#123;handleChange&#125;/&gt;</span><br><span class="line">      &lt;button onClick=&#123;addTodo&#125;&gt;Add todo item&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p><code>ref=&#123;inputRef&#125;</code>意思是 inputRef 变量指向该 input 输入框</p><p><code>inputRef.current.focus()</code> 意思是聚焦于该变量指向的输入框（直接敲键盘可以输入，无需鼠标点击）</p></blockquote><h3 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h3><blockquote><p>If you wanna use <code>useState()</code> hook to manage a non-trivial（重要的）state like a list of items, where you need to add, update and remove items in the state. You end up facing a situation where state management logic takes a good part of the component body. To help you separate the concerns (rendering and state management) React provides the <code>useReducer()</code> hook. （跟 Redux 里的 Reducer 真的很像耶）</p></blockquote><p><strong>Syntax</strong>: <code>const [state, dispatch] = useReducer(reducer, initialState);</code></p><h4 id="initialState"><a href="#initialState" class="headerlink" title="initialState"></a>initialState</h4><p>In the case of a counter state, the initial value could be like:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">  counter: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Note</strong>: the <code>initialState</code> can be a simple value but generally will contain an <u>object</u>.</p></blockquote><h4 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h4><p>The <code>reducer</code> function contains your custom state logic.</p><p>2 parameters: the <strong>current state</strong> and an <strong>action object</strong>.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newState;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;increase&#x27;</span>:</span><br><span class="line">      newState = &#123;<span class="attr">counter</span>: state.counter + <span class="number">1</span>&#125;;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;descrease&#x27;</span>:</span><br><span class="line">      newState = &#123;<span class="attr">counter</span>: state.counter - <span class="number">1</span>&#125;;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newState;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="action-object"><a href="#action-object" class="headerlink" title="action object"></a>action object</h5><p><strong>action object</strong> describes how to update the state. The property <code>type</code> describes what kind of state update the reducer must do. If the action object must carry some useful information (aka payload) to be used by the reducer, then you can add additional properties to the action object. Like <code>user</code> below.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> action = &#123;</span><br><span class="line">  type: <span class="string">&#x27;add&#x27;</span>,</span><br><span class="line">  user: &#123;</span><br><span class="line">    name: <span class="string">&#x27;Harris&#x27;</span>,</span><br><span class="line">    sex: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="dispatch"><a href="#dispatch" class="headerlink" title="dispatch"></a>dispatch</h4><p>The <code>dispatch</code> is a special function that dispatches an action object.</p><p><strong>Syntax</strong>: <code>dispatch(actionObject)</code></p><h3 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h3><blockquote><p>通过<code>useContext</code>拿到上下文里的数据。之前介绍过，这里直接上例子，看看和之前写的有什么不同（React进阶/Context/Move…），使用<code>useContext</code>代码会更简洁。</p></blockquote><p>ThemeContext.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">const</span> ThemeContext = React.createContext()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ThemeContextProvider = <span class="function">(<span class="params">props</span>) =&gt;</span>  &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ThemeContext.Provider value=&#123;<span class="string">&quot;light&quot;</span>&#125;&gt;</span><br><span class="line">      &#123;props.children&#125;</span><br><span class="line">    &lt;/ThemeContext.Provider&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;ThemeContextProvider, ThemeContext&#125;</span><br></pre></td></tr></table></figure><p>index.js（保持不变）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123;ThemeContextProvider&#125; <span class="keyword">from</span> <span class="string">&quot;./themeContext&quot;</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;ThemeContextProvider&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;/ThemeContextProvider&gt;, </span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Button.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123;ThemeContext&#125; <span class="keyword">from</span> <span class="string">&quot;./themeContext&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Button</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line"><span class="comment">//重点</span></span><br><span class="line">  <span class="keyword">const</span> context = React.useContext(ThemeContext)</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;button onClick=&#123;context.toggleTheme&#125; className=&#123;<span class="string">`<span class="subst">$&#123;context.theme&#125;</span>-theme`</span>&#125;&gt;Switch Theme&lt;/button&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Button</span><br></pre></td></tr></table></figure><h3 id="Custom-Hooks"><a href="#Custom-Hooks" class="headerlink" title="Custom Hooks"></a>Custom Hooks</h3><blockquote><p>自定义 Hook 是一种让你能够将组件里可复用的逻辑提取到函数中的方式。自定义 Hook 可以让你在不增加组件的情况下，<u>复用组件之间的状态逻辑</u>，从而使代码更加简洁、清晰。 </p><p>与 Component 直观区别是，Hook 是复用 JS 逻辑，Component 是复用 HTML 代码。</p></blockquote><p>useCounter.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useState&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">increment</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        setCount(<span class="function"><span class="params">prevCount</span> =&gt;</span> prevCount + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [count, increment]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useCounter</span><br></pre></td></tr></table></figure><blockquote><p>Note：<code>return [count, increment]</code> 部分也可以写成 <code>return &#123;count, increment&#125;</code>，这样的话，在接收时就必须使用该变量名了。</p></blockquote><p>App.js</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;useState&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> useCounter <span class="keyword">from</span> <span class="string">&quot;./useCounter&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [number, add] = useCounter()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h1&gt;The count is &#123;number&#125;&lt;/h1&gt;</span><br><span class="line">            &lt;button onClick=&#123;add&#125;&gt;Add <span class="number">1</span>&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure><h2 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h2><blockquote><p>React 路由 可以有效管理多个视图（组件）实现 SPA（single page application，单页应用）</p></blockquote><h3 id="Installation-安装"><a href="#Installation-安装" class="headerlink" title="Installation 安装"></a>Installation 安装</h3><p><code>npm add react-router-dom</code></p><h3 id="BrowserRouter"><a href="#BrowserRouter" class="headerlink" title="BrowserRouter"></a>BrowserRouter</h3><p>使用 <code>&lt;Router&gt;</code> 包裹整个应用，它相当于 context</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123;BrowserRouter <span class="keyword">as</span> Router&#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">        &lt;App /&gt;</span><br><span class="line">    &lt;/Router&gt;, </span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="Link-amp-Switch-amp-Route"><a href="#Link-amp-Switch-amp-Route" class="headerlink" title="Link &amp; Switch &amp; Route"></a>Link &amp; Switch &amp; Route</h3><p><code>&lt;Link&gt;</code> 作为导航菜单（路由入口）</p><p><code>&lt;Switch&gt;</code>和 JS 里的 switch 类似，在包裹的路由里选择一个进行渲染，如果不使用则会渲染多个页面。</p><p><code>&lt;Route&gt;</code> 配置路由规则和要展示的组件（路由出口）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123;Link, Switch, Route&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&quot;./Home&quot;</span></span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&quot;./About&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;    </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;Link to=<span class="string">&quot;/&quot;</span>&gt;Home&lt;/Link&gt;</span><br><span class="line">            &lt;Link to=<span class="string">&quot;/about&quot;</span>&gt;About&lt;/Link&gt;</span><br><span class="line">            </span><br><span class="line">            &lt;Switch&gt;</span><br><span class="line">                &lt;Route exact path=<span class="string">&quot;/&quot;</span>&gt;</span><br><span class="line">                    &lt;Home /&gt;</span><br><span class="line">                &lt;/Route&gt;</span><br><span class="line">                &lt;Route path=<span class="string">&quot;/about&quot;</span>&gt;</span><br><span class="line">                    &lt;About /&gt;</span><br><span class="line">                &lt;/Route&gt;</span><br><span class="line">            &lt;/Switch&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App</span><br></pre></td></tr></table></figure><blockquote><p>其中 <code>&lt;Route&gt;</code> 部分还有两种写法：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route exact path=<span class="string">&quot;/&quot;</span> component=&#123;Home&#125; /&gt;</span><br><span class="line">&lt;Route path=<span class="string">&quot;/about&quot;</span> component=&#123;About&#125; /&gt;</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route exact path=<span class="string">&quot;/&quot;</span> render=&#123;<span class="function">() =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Home</span>/&gt;</span></span> /&gt;</span><br><span class="line">&lt;Route path=<span class="string">&quot;/about&quot;</span> render=&#123;<span class="function">() =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">About</span>/&gt;</span></span> /&gt;</span><br></pre></td></tr></table></figure></blockquote><h4 id="路由匹配模式"><a href="#路由匹配模式" class="headerlink" title="路由匹配模式"></a>路由匹配模式</h4><p><strong>模糊匹配（默认）</strong>：</p><p>默认情况下，React 路由 是 模糊匹配模式</p><p>例如：路由为<code>/login</code>，但是用<code>/login123</code>也能访问到，也就是说，只要开头是<code>/login</code>的路由都可以访问到。</p><p><strong>精确匹配</strong>：</p><p>给 Route 组件添加<code>exact</code>属性即可</p><p><code>&lt;Route exact path=&quot;/&quot; component=&#123;...&#125; /&gt;</code></p><h3 id="Nested-Routes"><a href="#Nested-Routes" class="headerlink" title="Nested Routes"></a>Nested Routes</h3><blockquote><p>嵌套路由没啥好说，直接看例子</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/profile/info&quot;</span>&gt;</span>Profile Info<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span>&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/profile/settings&quot;</span>&gt;</span>Profile Settings<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span>&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;Switch&gt;</span><br><span class="line">  &lt;Route path=<span class="string">&quot;/profile/info&quot;</span>&gt;</span><br><span class="line">    &lt;Info/&gt;</span><br><span class="line">  &lt;/Route&gt;</span><br><span class="line">  &lt;Route path=<span class="string">&quot;/profile/settings&quot;</span>&gt;</span><br><span class="line">    &lt;Settings/&gt;</span><br><span class="line">  &lt;/Route&gt;</span><br><span class="line">&lt;/Switch&gt;</span><br></pre></td></tr></table></figure><h3 id="useParams"><a href="#useParams" class="headerlink" title="useParams"></a>useParams</h3><blockquote><p>有时需要获取路由传来的值</p></blockquote><p>App.js（定义路由）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Switch&gt;</span><br><span class="line">  &lt;Route exact path=<span class="string">&quot;/services&quot;</span> &gt;</span><br><span class="line">    &lt;ServicesList /&gt;</span><br><span class="line">  &lt;/Route&gt;</span><br><span class="line">  &lt;Route path=<span class="string">&quot;/services/:serviceId&quot;</span> &gt;</span><br><span class="line">    &lt;ServiceDetail /&gt;</span><br><span class="line">  &lt;/Route&gt;</span><br><span class="line">&lt;/Switch&gt;</span><br></pre></td></tr></table></figure><p>ServicesList.js（写链接）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ServicesList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> services = servicesData.map(<span class="function"><span class="params">service</span> =&gt;</span> (</span><br><span class="line">    &lt;h3 key=&#123;service._id&#125;&gt;</span><br><span class="line">      &lt;Link to=&#123;<span class="string">`/services/<span class="subst">$&#123;service._id&#125;</span>`</span>&#125;&gt;&#123;service.name&#125;&lt;/Link&gt;</span><br><span class="line">    &lt;/h3&gt;</span><br><span class="line">  ))</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;Services List Page&lt;/h1&gt;</span><br><span class="line">      &#123;services&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ServiceDetail.js（用<code>useParams</code>获取链接值）</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useParams&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ServiceDetail</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;serviceId&#125; = useParams()</span><br><span class="line">    <span class="keyword">const</span> thisService = servicesData.find(<span class="function"><span class="params">service</span> =&gt;</span> service._id === serviceId)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;h1&gt;Service Detail Page&lt;/h1&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="useRouteMatch"><a href="#useRouteMatch" class="headerlink" title="useRouteMatch"></a>useRouteMatch</h3><blockquote><p>有时需要更改路由路径名称，那其全部子路由需要手动更改了，很麻烦，这时需要用 <code>useRouteMatch</code></p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Link, Switch, Route, useRouteMatch&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Profile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;path, url&#125; = useRouteMatch()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;Profile Page&lt;/h1&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">url</span>&#125;/<span class="attr">info</span>`&#125;&gt;</span>Profile Info<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span>&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">url</span>&#125;/<span class="attr">settings</span>`&#125;&gt;</span>Profile Settings<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span>&lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">      &lt;Switch&gt;</span><br><span class="line">        &lt;Route path=&#123;<span class="string">`<span class="subst">$&#123;path&#125;</span>/info`</span>&#125;&gt;</span><br><span class="line">          &lt;Info/&gt;</span><br><span class="line">        &lt;/Route&gt;</span><br><span class="line">        &lt;Route path=&#123;<span class="string">`<span class="subst">$&#123;path&#125;</span>/settings`</span>&#125;&gt;</span><br><span class="line">          &lt;Settings/&gt;</span><br><span class="line">        &lt;/Route&gt;</span><br><span class="line">      &lt;/Switch&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Note</strong>: 官方文档建议 <code>url</code> 写在 <code>&lt;Link/&gt;</code> 里，<code>path</code> 写在 <code>&lt;Route/&gt;</code> 里。</p></blockquote><h3 id="useHistory"><a href="#useHistory" class="headerlink" title="useHistory"></a>useHistory</h3><blockquote><p>有时要用 JS 代码实现页面跳转。</p></blockquote><p>使用 <code>history.push(&quot;/pathname&quot;)</code> 可跳转到路径为 <code>/pathname</code> 页面</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useHistory&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ServiceDetail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> history = useHistory()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    history.push(<span class="string">&quot;/services&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button onClick=&#123;handleClick&#125;&gt;Go back to all services&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子里的 <code>history</code> 是 React 路由提供的，用于获取浏览器历史记录的相关信息，还有很多用法：</p><p><code>history.goBack()</code>：回退到上个页面</p><p><code>history.goForward()</code>：前进到下个页面</p><p><code>history.go(int)</code>：前进或回退到某个页面，参数 int 表示前进或后退页面数量（例如：-1 表示回退到上一页）</p><p><code>history.replace(/pathname)</code>： 替换当前页面历史记录，这样可以禁止用户回退到上一页面。</p><h3 id="useLocation"><a href="#useLocation" class="headerlink" title="useLocation"></a>useLocation</h3><blockquote><p>有时需要获取当前 URL 的位置信息，包括路径名 pathname、搜索参数 search、状态值 state 等等</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useLocation &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyComponent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> location = useLocation();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;Pathname: &#123;location.pathname&#125;&lt;/p&gt;</span><br><span class="line">      &lt;p&gt;Search: &#123;location.search&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果在搜索框里输入 <code>/services?name=harris</code>，那么 pathname 值是 <code>/services</code>， search 值就是 <code>?name=harris</code></p></blockquote><h3 id="Redirect"><a href="#Redirect" class="headerlink" title="Redirect"></a>Redirect</h3><blockquote><p>有时候需要页面重定向，比如检测是否登陆，若无就重定向到登陆界面。</p></blockquote><p>语法：<code>&lt;Redirect to=&quot;/pathname&quot;&gt;</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Link, Switch, Route, Redirect&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [isLoggedIn, setIsLoggedIn] = useState(<span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;Link to=<span class="string">&quot;/&quot;</span>&gt;Home&lt;/Link&gt;</span><br><span class="line">            &lt;Link to=<span class="string">&quot;/private&quot;</span>&gt;Private&lt;/Link&gt;</span><br><span class="line">            </span><br><span class="line">            &lt;Switch&gt;</span><br><span class="line">                &lt;Route exact path=<span class="string">&quot;/&quot;</span>&gt;</span><br><span class="line">                    &lt;h1&gt;Home page, anyone is allowed here&lt;/h1&gt;</span><br><span class="line">                &lt;/Route&gt;</span><br><span class="line">                &lt;Route path=<span class="string">&quot;/private&quot;</span>&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        isLoggedIn ?</span><br><span class="line">                        &lt;h1&gt;Protected page, must be logged <span class="keyword">in</span> to be here&lt;/h1&gt; :</span><br><span class="line">                        &lt;Redirect to=<span class="string">&quot;/login&quot;</span> /&gt;</span><br><span class="line">                    &#125;</span><br><span class="line">                &lt;/Route&gt;</span><br><span class="line">                &lt;Route path=<span class="string">&quot;/login&quot;</span>&gt;</span><br><span class="line">                    &lt;button onClick=&#123;<span class="function">() =&gt;</span> setIsLoggedIn(<span class="literal">true</span>)&#125;&gt;Log <span class="keyword">in</span>&lt;/button&gt;</span><br><span class="line">                &lt;/Route&gt;</span><br><span class="line">            &lt;/Switch&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h1 id="技巧合集"><a href="#技巧合集" class="headerlink" title="技巧合集"></a>技巧合集</h1><h2 id="快捷插件"><a href="#快捷插件" class="headerlink" title="快捷插件"></a>快捷插件</h2><p>在 VSCode 里安装<code>ES7+ React/Redux/React-Native snippets</code>插件后，可以通过键入<code>rafce</code>快捷创建一个 function 组件</p><h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>通常，src 目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">src&#x2F;项目源码，写项目功能代码</span><br><span class="line">assets&#x2F;资源（图片、字体等）</span><br><span class="line">components&#x2F;公共组件</span><br><span class="line">pages&#x2F;页面</span><br><span class="line">containers&#x2F; 容器</span><br><span class="line">utils&#x2F;工具</span><br><span class="line">App.js根组件（配置路由信息）</span><br><span class="line">index.css全局样式</span><br><span class="line">index.js项目入口文件（渲染根组件、导入组件库）</span><br></pre></td></tr></table></figure><p><code>components/</code>里放一些公用 UI 组件，包括导航栏和页尾等</p><p><code>containers/</code>里放需要与数据和状态有关的 UI 组件，负责从数据层获取数据，处理用户交互，然后传递数据到 UI 组件进行呈现。</p><h2 id="Project-Setup-项目安装-1"><a href="#Project-Setup-项目安装-1" class="headerlink" title="Project Setup 项目安装 1"></a>Project Setup 项目安装 1</h2><p>这里我们使用 Vite，它是一种新型前端构建工具，能够显著提升前端开发体验</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm create vite@latest</span><br><span class="line">y</span><br><span class="line">react</span><br><span class="line">javascript</span><br></pre></td></tr></table></figure><p>或者 👇</p><h2 id="Project-Setup-项目安装-2"><a href="#Project-Setup-项目安装-2" class="headerlink" title="Project Setup 项目安装 2"></a>Project Setup 项目安装 2</h2><p>初始化项目：<code>npx create-react-app &lt;project-name&gt;</code></p><p>启动项目：<code>npm start</code></p><h2 id="安装-antd-mobile-组件库"><a href="#安装-antd-mobile-组件库" class="headerlink" title="安装 antd-mobile 组件库"></a>安装 antd-mobile 组件库</h2><p><code>npm add antd-mobile</code></p><blockquote><p>样式无需自行导入，因为新版组件库已帮你导入好</p></blockquote><h2 id="安装-react-icons-图标库"><a href="#安装-react-icons-图标库" class="headerlink" title="安装 react-icons 图标库"></a>安装 react-icons 图标库</h2><p><code>npm install react-icons</code></p><h2 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h2><p>将React项目部署到GitHub和Vercel需要以下步骤：</p><h3 id="部署到-GitHub"><a href="#部署到-GitHub" class="headerlink" title="部署到 GitHub"></a>部署到 GitHub</h3><ol><li><p>在GitHub上创建一个新的repository，并将你的代码推送到这个repository中。</p></li><li><p>确保你的代码已经经过了所有的测试，并且已经成功运行过。</p></li><li><p>在你的React项目中安装GitHub Pages插件：</p><p><code>npm install gh-pages --save-dev</code></p></li><li><p>打开<code>package.json</code>文件，添加以下代码到文件中：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;homepage&quot;: &quot;https://&lt;your-username&gt;.github.io/&lt;your-repository-name&gt;&quot;,</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;predeploy&quot;: &quot;npm run build&quot;,</span><br><span class="line">  &quot;deploy&quot;: &quot;gh-pages -d build&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>homepage</code>中的URL应该与你的GitHub repository相对应。</p></blockquote></li><li><p>运行以下命令将你的应用程序部署到 GitHub Pages:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br><span class="line">npm run deploy</span><br></pre></td></tr></table></figure></li></ol><h3 id="部署到-Vercel"><a href="#部署到-Vercel" class="headerlink" title="部署到 Vercel"></a>部署到 Vercel</h3><ol><li>首先，你需要创建一个 Vercel 账户，并登录到 Vercel 控制台。</li><li>在控制台中，点击“New Project”，并选择“Import Git Repository”选项，将你的GitHub repository导入到Vercel中。</li><li>确保你的项目中有一个<code>package.json</code>文件，并在其中设置<code>start</code>脚本。例如：</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;start&quot;: &quot;react-scripts start&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>点击“Deploy”，等待Vercel构建和部署你的应用程序。</li><li>一旦部署成功，你的应用程序将会自动在Vercel上运行。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;我看的是&lt;a href=&quot;https://scrimba.com/learn/learnreact/&quot;&gt;React 教学视频 - Scrimba&lt;/a&gt;，&lt;a href=&quot;https://www.bilibili.com/video/BV14y4y</summary>
      
    
    
    
    <category term="📕知识笔记" scheme="https://blog.harriswong.top/categories/%F0%9F%93%95%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="📝前端" scheme="https://blog.harriswong.top/tags/%F0%9F%93%9D%E5%89%8D%E7%AB%AF/"/>
    
    <category term="❄React" scheme="https://blog.harriswong.top/tags/%E2%9D%84React/"/>
    
  </entry>
  
  <entry>
    <title>本科毕业啦~完结撒花🌸</title>
    <link href="https://blog.harriswong.top/posts/f13a3a59/"/>
    <id>https://blog.harriswong.top/posts/f13a3a59/</id>
    <published>2022-06-23T12:00:00.000Z</published>
    <updated>2022-07-10T17:02:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇相当于本科四年的回忆录，意识流畅所欲言</p></blockquote><h1 id="拍摄剪辑部"><a href="#拍摄剪辑部" class="headerlink" title="拍摄剪辑部"></a>拍摄剪辑部</h1><p>高中那会，可能是短视频和综艺的盛行，使我对视频后期非常感兴趣。高中毕业后我初步在网上查了查，好像没有剪辑这么一个专业，于是就选择了我一直很看好的计算机专业。为了满足我的剪辑爱好，我毅然决然在大一学生会招人那会选择了剪辑部，不得不说，和其它部门比起来，真的非常累，我们干事经常肝视频到凌晨，如果遇到电脑死机，而且剪辑没有保存的话那就完蛋功亏一篑了。对于那些剪辑技术，其实大部分时间是靠我们自学，不得不说，在B站自学剪辑技巧真的很快乐，很有成就感，遗憾的是，那时候没有接触博客，很多经验技巧都没有想着说记录下来，所以现在让我剪视频效果和以前差远了，但读研期间，我有拍Vlog记录生活的打算，还是有机会接触剪辑的😊。</p><p>大一除了学到很多剪辑技巧外，我还接触到了云台，部门宣传片里很丝滑的运镜都是我设计并拍出来的哈哈，话说我们当时的剪辑部部长都没怎么用过云台，招我进来是你们正确的选择哈哈哈，还记得我那时候对云台非常热爱，甚至寒假斥巨资买了手机云台。</p><p>大二时，我选择担任部长，恰逢拍摄部和剪辑部合并，话说，我觉得合并是个正确的选择，因为制作一个视频，需要拍摄部和剪辑部密切地合作探讨，否则拍出来的素材后期可能不想要，像一些重大活动，比如运动会、领导发言，事后是无法补救的，所以一定要提前商量好大概拍哪些素材以及是远景还是近景还是特写，其实对于一个学院的小部门来说，尽量做到物尽其用很重要，因为拍摄器材就那么多，无法像拍电视节目一样，有很多个机位，素材非常充足，当然素材非常多的话，对剪辑人员来说是非常头痛的，回忆起来，好像每次制作一个视频的拍摄素材差不多30多G，处理起来真的很头痛，你得快速看完每一个素材并命名，我们剪辑都是用自己的笔记本电脑，普通的笔记本剪辑来非常卡顿，学院太穷了没办法，连拍摄器材还是借的，其中一个器材还是一个部长自己买的。</p><p>记得大二部门招新还是一件比较头疼的事情，来应聘的人不是很多，报名的人有20多人，实际来的10多个，我们原打算招12人，最后招了11个，令我们满意的人选好像只有两三个。记得我大一第一次部门开会时，我们老部长说这一届招新不如上一届，哈哈，真就是一届不如一届，但是我敢保证我们这一届剪的部门宣传片直接吊打所有届，我大一和大二期间的灵感爆棚，各种好点子横空出世，我还有两个队友也是剪辑技术挺不错的，直接为部门宣传片添砖加瓦。</p><h1 id="舞蹈队"><a href="#舞蹈队" class="headerlink" title="舞蹈队"></a>舞蹈队</h1><p>记得我小学时，就经常趴在街舞室的窗外看那些哥哥姐姐们跳舞，感觉好帅，我妈看我喜欢就把我带进去准备报班，但我比较害羞腼腆，不敢在人群面前展现自己，最后我坚决不去，其实内心还是比较想的。我从小就很反感各种补习班，害怕见到新同学，尤其是父母让我去的话，我会持逆反心理。</p><p>到了大学，我真香地报名了校舞蹈队，当时还在纠结去舞蹈队还是合唱队，但我没学过跳舞（我可没说我学过唱歌，<del>有嘴就行</del>），想去学学，听说零基础也可以进，于是我就信心大增，不出我所料，顺利通过了部门面试，面试过程就是自我介绍，然后几个队长分别教我舞蹈动作，看看我学的快不快，我可是幼儿园就被老师夸过学跳操的速度很快，动作做得很不错。</p><p>但是！哈哈，我接下来想吐槽一下。提前说声，校舞蹈队主要负责为学校里各大舞台提供艺术节目，如果没有节目任务的话，我们就一周四天中午聚集在舞蹈室练一个多小时的基本功，其中两天练古典或现代舞，两天练街舞，下午第一二节课我直接昏昏欲睡，而且中午只有半小时时间给你下课飞奔到食堂、吃饭、从食堂飞奔到舞蹈室，如果有节目的话，那就要挤出更多的时间来排练舞蹈节目，甚至会让你推掉一些其它不重要的活动来进行舞蹈排练，一般一个舞蹈节目要排很久，动作好不容易学会了，还要排队形，扣动作细节和质感，我们经常在舞蹈室排上大半天的时间，晚上十点多回去甚至没有热水洗澡，我有时还挺羡慕那些排练歌唱、小品节目的队，我们排好一个节目要二十来天，也羡慕室友能无忧无虑待在宿舍打游戏追剧。</p><p>话说，我阴差阳错地进入了两个最累的社团——拍摄剪辑部、舞蹈队😭😭😭，但收获是真的有，技多不压身嘛，累是真的累，快乐是真的快乐！</p><h1 id="毕业设计"><a href="#毕业设计" class="headerlink" title="毕业设计"></a>毕业设计</h1><p>貌似很多同学已经早早地选好了毕设导师，我算是中期选好了导师，不算早也不算晚。我选择了学院的一个教授，我想着教授应该很专业，结果教授非常忙，在毕业设计上没有给到我太多的帮助，对比我其它同学，看着他们和导师的百条聊天记录真的很羡慕，我和导师只有十多条聊天记录。</p><p>我的毕设还是非常传统的项目——网站，哈哈哈，后端是真的两年来都没学会，但是为了毕设我咬咬牙还是学会了，网站顺利做出来了，我自己对这个网站还是很满意的，这网站的UI设计还得益于我玩了2年的博客，我的审美还是阔以滴哈哈哈，预答辩老师可能为了保持严肃形象，于是只好浅浅地夸了夸：“网站做的还是挺流畅的，交互什么的还可以”，md直接说：“网站做的碉堡了”不就行了嘛😏，而且夸完了，还找我茬，挑我论文的毛病，关键预答辩的时候，我已经吊打大多数人了，对我还这么严格。</p><p>整个毕业设计过程中，令我很不悦的是，导师最后一个月突然作妖，他在群里说请同学们及时提交论文最新版，我去交的时候发现他已经打了分，提交入口关了，我就一整个迷惑了，他此前明明没有在群里说要将论文最新版提交到网站，我问其他同学，他们都已经提交了论文，我真是大无语了，无论其他同学交没交，这应该是导师的失职，导师明明没有说，还自行改分，果不其然最后分数比较低，因为他改的是我的初稿，写的肯定没有最新版的好，跟导师说了也没用，大怨种。</p><p>最终答辩的那一天老师才临时通知有英语回答的部分，很多同学在空间吐槽，但我直接狂喜，我雅思可不是白考的，英语回答还算顺利，然后整体答辩自认为还不错，可惜答辩成绩只有82，真的不理解，但是我只能安慰自己，分数不重要，反正我有研究生可读。</p><h1 id="爱情"><a href="#爱情" class="headerlink" title="爱情"></a>爱情</h1><p>没想到我有幸在学生时代的尾巴找到了属于自己的爱情。</p><p>其实从小到大我都没有刻意去追求爱情，都是随缘心态，如果缘分到了就冲吧这么一个想法，要是问学生时代有没有心动的女生，那肯定是有，但也只是停留在眼球的愉悦，不足以让我去主动追求。要是问有没有追过我的女生，有很多，但我总觉得没有达到我想谈的那个阈值，人话说就是不够喜欢。我比较长情，不轻易进入恋爱关系，这也使我Solo了21年，我从不觉得20多年还没有谈过是件非常奇怪的事情，History再怎么丰富，很多人不依然留不住那个Ta吗？有一种单身叫单身贵族。</p><p>这段异地的感情现在谈了大半年，整体上还行，遇到那个她算是千载难逢的缘分，请耐心听我娓娓道来。我们最初是在微博某网友帖子下的评论区认识的，通过这种方式相遇的概率极低，能够抓住并发展成爱情的概率就更低了，通常一些情侣可能是同学或者同事，可能今天没有缘分深入交流，那好，还有明天、后天、下周。。。也许某一天就碰撞出了爱的火花，但我们就那一瞬，抓不住，就错过了。话说回来，通过微博相遇这种方式，就已经初步确定了我俩的兴趣爱好类似、未来发展一致、英文名很配、生日同一天且小我一岁，通过这几点已经很有缘分了，随后互加了好友，经过几天的聊天，我们发现彼此很多东西都非常匹配，心有灵犀，她直接满足我99%的择偶标准了，我一直以来都觉得自己择偶标准很严苛，实在没想到真有人能一次性满足那么多标准，这难道就是我的真命天女吗？但是！我不知为何，总感觉到100%那个点我才会主动追求，很多人估计早就先入为主了hh，就这样我们以朋友的关系持续了3个月，这3个月中有争吵、有暧昧、有冷战、有磨合，话说这不应该是情侣应该做的事情吗？但难能可贵的是，争吵之后还能“紧紧相拥”，无论如何，兜兜转转后我俩在一起了。在这我想说，请珍惜你爱和爱你的人，不留遗憾，缘分到了，不要犹豫去抓住它，我这段缘分是个特例，其实一般感觉到位了就可以主动追求。</p><p>能在学生时代的尾巴找到属于自己的爱情，我已经很满足了。</p><blockquote><p><strong>结束语</strong>：</p><p>四年就这么一瞬间过去了，虽然没有什么惊天动地的事情，但是平凡也值得去回味，这可是我的青春啊，回不去的青春。我始终持有活在当下的想法，走好当下每一步，结果不会太差。毕业后呢，我就继续踏踏实实走好每一步，享受当下的每时每分，期待自己找到一个好工作，步入职场的里程到喽～</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本篇相当于本科四年的回忆录，意识流畅所欲言&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;拍摄剪辑部&quot;&gt;&lt;a href=&quot;#拍摄剪辑部&quot; class=&quot;headerlink&quot; title=&quot;拍摄剪辑部&quot;&gt;&lt;/a&gt;拍摄剪辑部&lt;/h1&gt;&lt;p&gt;高中</summary>
      
    
    
    
    <category term="💬茶余饭后" scheme="https://blog.harriswong.top/categories/%F0%9F%92%AC%E8%8C%B6%E4%BD%99%E9%A5%AD%E5%90%8E/"/>
    
    
    <category term="🎓教育" scheme="https://blog.harriswong.top/tags/%F0%9F%8E%93%E6%95%99%E8%82%B2/"/>
    
    <category term="🍀青春" scheme="https://blog.harriswong.top/tags/%F0%9F%8D%80%E9%9D%92%E6%98%A5/"/>
    
  </entry>
  
  <entry>
    <title>用Python批量读取本地文本里的图片链接并下载到本地</title>
    <link href="https://blog.harriswong.top/posts/14e0d346/"/>
    <id>https://blog.harriswong.top/posts/14e0d346/</id>
    <published>2022-05-08T20:40:00.000Z</published>
    <updated>2022-05-08T20:40:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>背景：</p><p>我把 B 站热词表情包链接手动粘到 Twikoo 的 Json 文件里时，发现图片链接在 Twikoo 里显示不了，B 站应该开启了防盗链，于是我打算把表情包下载到本地再上传到图床。话说为什么要手动去复制表情包链接，因为 B 站数据是动态显示的，Python 爬取到的源码里没有表情包链接，网上有人说这类网站用 Selenium 来获取源码，我测试后，其它同类网站成功了，但 B 站还是获取不到。现在只好先把链接一个一个保存到 Json 文件里，再用 Python 逐个下载，这应该算是半自动化了吧。。。我先记录下如何读取文本里的图片链接并下载到本地吧。</p></blockquote><h1 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h1><blockquote><p>代码核心点就是<strong>读取文本内容</strong>、<strong>用正则表达式筛选出图片链接</strong>、<strong>命名</strong>、<strong>存储到本地文件夹</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(source_path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  json = f.read()</span><br><span class="line">  <span class="built_in">list</span> = re.findall(<span class="string">&quot;[正则表达式]&quot;</span>, json)</span><br><span class="line">  <span class="built_in">list</span>.reverse()</span><br><span class="line"></span><br><span class="line">  i = <span class="number">1</span></span><br><span class="line">  <span class="comment"># 下载图片</span></span><br><span class="line">  <span class="keyword">for</span> img_url <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    res = requests.get(img_url)</span><br><span class="line">    img_name = file_path + <span class="built_in">str</span>(i) + <span class="string">&quot;.png&quot;</span>    <span class="comment">#图片命名规则</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(img_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">      f.write(res.content)</span><br><span class="line"></span><br><span class="line">      print(<span class="string">&quot;第%d张&quot;</span> % i)</span><br><span class="line">      i += <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="Demo-代码"><a href="#Demo-代码" class="headerlink" title="Demo 代码"></a>Demo 代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding = utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time :2022-05-08 20:40</span></span><br><span class="line"><span class="comment"># @Author:HarrisWong</span></span><br><span class="line"><span class="comment"># @File : img_download_txt.py</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re <span class="comment">#正则表达式</span></span><br><span class="line"><span class="keyword">import</span> requests  <span class="comment"># 制定URL，获取网页数据</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    source_path = <span class="string">r&quot;E:\360MoveData\Users\Administrator\Pictures\博客专用\CDN\json\123.json&quot;</span>   <span class="comment">#文本链接</span></span><br><span class="line">    download(source_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户代理：表示告诉服务器，我们是什么类型的浏览器，可以接收什么样水平的文件</span></span><br><span class="line">headers = &#123;    <span class="comment"># 模拟浏览器头部信息，向服务器发送消息</span></span><br><span class="line">    <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">file_path = <span class="string">r&quot;E:\360MoveData\Users\Administrator\Pictures\博客专用\CDN\emoji\bilibiliHotKey\\&quot;</span>  <span class="comment">#文件保存地址</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">source_path</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 核心代码</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(source_path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json = f.read()</span><br><span class="line">        <span class="built_in">list</span> = re.findall(<span class="string">&quot;&lt;img src=&#x27;(https://i0.hdslb.com/bfs/emote/.*.png)&#x27;&gt;&quot;</span>, json)</span><br><span class="line">        <span class="built_in">list</span>.reverse()</span><br><span class="line"></span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 下载图片</span></span><br><span class="line">        <span class="keyword">for</span> img_url <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line"></span><br><span class="line">            res = requests.get(img_url)</span><br><span class="line"></span><br><span class="line">            img_name = file_path + <span class="built_in">str</span>(i) + <span class="string">&quot;.png&quot;</span>    <span class="comment">#图片命名规则</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(img_name, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(res.content)</span><br><span class="line"></span><br><span class="line">            print(<span class="string">&quot;第%d张&quot;</span> % i)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  <span class="comment"># 当程序执行时</span></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">    main()</span><br><span class="line">    print(<span class="string">&quot;爬取完毕！&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h1><ul><li><a href="https://blog.csdn.net/chushudu/article/details/121352345">Python 读取文本中的图片链接并下载到本地</a></li></ul><blockquote><p><strong>结束语</strong>：</p><p>有 Python 基础的小伙伴可以自己尝试在源代码基础上更改。欢迎评论，反馈 Bug 或给出更好建议。</p><p>对了，写这文章的时候突然想到一个更好的办法，就是直接把 F12 里的源码复制到 html 文件里，然后再用 python 解析源码，我哭了，心疼我键盘上的 CV 键。。。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;背景：&lt;/p&gt;
&lt;p&gt;我把 B 站热词表情包链接手动粘到 Twikoo 的 Json 文件里时，发现图片链接在 Twikoo 里显示不了，B 站应该开启了防盗链，于是我打算把表情包下载到本地再上传到图床。话说为什么要手动去复制表情包链接，因为 B </summary>
      
    
    
    
    <category term="💻实用教程" scheme="https://blog.harriswong.top/categories/%F0%9F%92%BB%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="🐍Python" scheme="https://blog.harriswong.top/tags/%F0%9F%90%8DPython/"/>
    
    <category term="🐛爬虫" scheme="https://blog.harriswong.top/tags/%F0%9F%90%9B%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>VSCode相关问题合集</title>
    <link href="https://blog.harriswong.top/posts/238f00fb/"/>
    <id>https://blog.harriswong.top/posts/238f00fb/</id>
    <published>2022-04-11T23:03:00.000Z</published>
    <updated>2022-04-21T12:38:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><blockquote><p>此处只记我常用的且易忘的</p></blockquote><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>Ctrl + P</td><td>全局搜索文件</td></tr><tr><td>Ctrl + D</td><td>每按一下即选中下一个相邻且相同的代码块，可同时编辑所有选中且相同的代码块</td></tr><tr><td>Shift + Alt + 上下键</td><td>复制该行</td></tr><tr><td>Alt + 上下键</td><td>移动改行</td></tr><tr><td>Ctrl + Shift + 上下键</td><td>纵向选中代码行</td></tr><tr><td>Ctrl + Alt + 上下键</td><td>纵向拉长光标，可同时编辑多个代码</td></tr></tbody></table><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><blockquote><p>记录我下载的插件</p></blockquote><ul><li>Auto Close Tag</li><li>Auto Rename Tag</li><li>Babel JavaScript</li><li>Chinese (Simplified)</li><li>Echarts Enhanced Completion</li><li>Elements Plus Snippets</li><li>EsLint</li><li>formatter-pug</li><li>HTML CSS Support</li><li>JavaScript (ES6) code snippets</li><li>Kaia Theme</li><li>Live Server</li><li>Material Icon Theme</li><li>open in browser</li><li>Path Intellisense</li><li>Prettier - Code formatter</li><li>pug</li><li>stylus</li><li>Vetur</li><li>vscode-icons</li><li>Vue 3 Snippets</li><li>Vue Language Features(Volar)</li></ul><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p><code>settings.json</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;workbench.colorTheme&quot;</span>: <span class="string">&quot;Kaia&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;workbench.colorCustomizations&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;[Kaia]&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;editor.selectionBackground&quot;</span>: <span class="string">&quot;#81d8cf33&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;editor.fontSize&quot;</span>: <span class="number">16</span>,</span><br><span class="line">  <span class="attr">&quot;workbench.iconTheme&quot;</span>: <span class="string">&quot;material-icon-theme&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;security.workspace.trust.untrustedFiles&quot;</span>: <span class="string">&quot;open&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;files.autoSave&quot;</span>: <span class="string">&quot;afterDelay&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;editor.formatOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;liveServer.settings.AdvanceCustomBrowserCmdLine&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;editor.tokenColorCustomizations&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;textMateRules&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Comment&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;scope&quot;</span>: [</span><br><span class="line">          <span class="string">&quot;comment&quot;</span>,</span><br><span class="line">          <span class="string">&quot;comment.block&quot;</span>,</span><br><span class="line">          <span class="string">&quot;comment.block.documentation&quot;</span>,</span><br><span class="line">          <span class="string">&quot;comment.line&quot;</span>,</span><br><span class="line">          <span class="string">&quot;comment.line.double-slash&quot;</span>,</span><br><span class="line">          <span class="string">&quot;punctuation.definition.comment&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;fontStyle&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="comment">// &quot;fontStyle&quot;: &quot;italic&quot;,  // 斜体</span></span><br><span class="line">          <span class="comment">// &quot;fontStyle&quot;: &quot;italic underline&quot;,  // 斜体下划线</span></span><br><span class="line">          <span class="comment">// &quot;fontStyle&quot;: &quot;italic bold underline&quot;,  // 斜体粗体下划线</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;git.ignoreMissingGitWarning&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;git.path&quot;</span>: <span class="string">&quot;E:\\Git\\Git\\bin\\git.exe&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;vetur.validation.template&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;[vue]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;explorer.confirmDelete&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;explorer.confirmDragAndDrop&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;editor.wordWrap&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;editor.tabSize&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">&quot;editor.detectIndentation&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;window.zoomLevel&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;liveServer.settings.donotShowInfoMsg&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;[pug]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;alexbabichev.formatter-pug&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;liveServer.settings.donotVerifyTags&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;editor.suggest.snippetsPreventQuickSuggestions&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;emmet.triggerExpansionOnTab&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;[javascript]&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span>: <span class="string">&quot;esbenp.prettier-vscode&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;editor.experimental.stickyScroll.enabled&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;vsicons.dontShowNewVersionMessage&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="如何在背景配置一个动态小女孩"><a href="#如何在背景配置一个动态小女孩" class="headerlink" title="如何在背景配置一个动态小女孩"></a>如何在背景配置一个动态小女孩</h1><p>替换所有代码<code>E:\Visual Studio Code\Microsoft VS Code\resources\app\out\vs\code\electron-browser\workbench\workbench.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Copyright (C) Microsoft Corporation. All rights reserved. --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;none&#x27;; img-src &#x27;self&#x27; https: data: blob: vscode-remote-resource:; media-src &#x27;none&#x27;; frame-src &#x27;self&#x27; vscode-webview: https://*.vscode-webview-test.com; object-src &#x27;self&#x27;; script-src * &#x27;unsafe-inline&#x27; &#x27;unsafe-eval&#x27;; style-src &#x27;self&#x27; &#x27;unsafe-inline&#x27;; connect-src &#x27;self&#x27; https:; font-src &#x27;self&#x27; https: vscode-remote-resource:;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#live2dcanvas</span> &#123;<span class="attribute">border</span>: <span class="number">0</span> <span class="meta">!important</span>;&#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">aria-label</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;live2d-widget&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;live2dcanvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;160&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: fixed;width:100px;height:160;opacity: 0.5;right: 0px;bottom: -20px;z-index: 99999;pointer-events: none;border:0;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- Init Bootstrap Helpers --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../../../bootstrap.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../../../vs/loader.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../../../bootstrap-window.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- Startup via workbench.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;workbench.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://npm.elemecdn.com/live2d-widget@3.0.4/lib/L2Dwidget.0.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>  <span class="attr">src</span>=<span class="string">&quot;https://npm.elemecdn.com/live2d-widget@3.0.4/lib/L2Dwidget.min.js?_=1557308476616&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// L2Dwidget.init();</span></span></span><br><span class="line"><span class="javascript">  L2Dwidget.init(&#123;<span class="string">&quot;display&quot;</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;superSample&quot;</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;width&quot;</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;height&quot;</span>: <span class="number">160</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;position&quot;</span>: <span class="string">&quot;right&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;hOffset&quot;</span>: <span class="number">120</span>,</span></span><br><span class="line"><span class="javascript">        <span class="string">&quot;vOffset&quot;</span>: <span class="number">0</span></span></span><br><span class="line">        &#125;</span><br><span class="line">     &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;快捷键&quot;&gt;&lt;a href=&quot;#快捷键&quot; class=&quot;headerlink&quot; title=&quot;快捷键&quot;&gt;&lt;/a&gt;快捷键&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;此处只记我常用的且易忘的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;</summary>
      
    
    
    
    <category term="🤗干货分享" scheme="https://blog.harriswong.top/categories/%F0%9F%A4%97%E5%B9%B2%E8%B4%A7%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="💠代码编辑器" scheme="https://blog.harriswong.top/tags/%F0%9F%92%A0%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
</feed>
